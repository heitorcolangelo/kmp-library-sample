{
  "openapi": "3.0.3",
  "info": {
    "title": "KitchenOS Internal Client API",
    "description": "KitchenOS Internal Client API",
    "version": "1.0.0",
    "contact": {
      "name": "Fresco KitchenOS API",
      "url": "https://frescocooks.com"
    }
  },
  "servers": [
    {
      "url": "https://{environment}.fresco-kitchenos.com",
      "variables": {
        "environment": {
          "description": "The environment to use for the API.",
          "default": "api-dev",
          "enum": [
            "api-dev",
            "api-stage",
            "api"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Appliances",
      "description": "The Appliances API."
    },
    {
      "name": "Collections",
      "description": "Endpoints to manage collections."
    },
    {
      "name": "Cooking Global",
      "description": "Endpoints providing cooking operations outside of a Cooking Session."
    },
    {
      "name": "Cooking Session",
      "description": "Endpoints related to Cooking Session management."
    },
    {
      "name": "Curated Collections",
      "description": "Endpoints to manage curated collections."
    },
    {
      "name": "Devices",
      "description": "Endpoints related to devices."
    },
    {
      "name": "Home Feeds",
      "description": "Endpoints to manage home feed."
    },
    {
      "name": "Media",
      "description": "The media service API"
    },
    {
      "name": "Notifications",
      "description": "Endpoints related to notifications."
    },
    {
      "name": "OAuth2.0",
      "description": "Endpoints to manage OAuth2.0 authorization."
    },
    {
      "name": "Organization",
      "description": "Endpoints providing organization data management."
    },
    {
      "name": "Recipe Adapt",
      "description": "A set of API endpoint that enables recipe adaptation based on user preference"
    },
    {
      "name": "Recipes",
      "description": "Endpoints to manage recipes in the system."
    },
    {
      "name": "Recipe Understanding",
      "description": "A facade API that powers ‘Web-to-fork’"
    },
    {
      "name": "Reference Data",
      "description": "A Facade API for Reference data retrieval and search over the Neptune graph database"
    },
    {
      "name": "Search",
      "description": "Endpoints related to searching."
    },
    {
      "name": "Users",
      "description": "Endpoints to manage users in the system."
    }
  ],
  "paths": {
    "/appliances/": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Locale"
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX (defaulting to the one on the user profile if not provided or not valid).",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get the list of appliances",
        "description": "Retrieve the list of appliances.",
        "operationId": "getApplianceList",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApplianceListResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Appliances"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplianceListLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/appliances/{appliance_id}": {
      "parameters": [
        {
          "name": "appliance_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The KitchenOS unique identifier for the appliance resource.",
            "example": "kitchenos:ZenKitchen:ZenMixer"
          }
        },
        {
          "name": "Accept-Language",
          "description": "The locale in format of xx-XX (defaulting to the one on the user profile if not provided or not valid).",
          "in": "header",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/Locale"
          },
          "example": "en-US"
        },
        {
          "name": "Accept",
          "in": "header",
          "required": false,
          "schema": {
            "type": "string",
            "description": "The version and variant of the appliance profile to retrieve. It is also possible to specify the header as \"version=1\" or \"version=2\" which correspond to \"application/json\" and \"application/x.default+json;version=2\" respectively. If a variant is not specified with version=2 (eg. \"application/json;version=2\"), it defaults to the \"default\" variant.",
            "enum": [
              "application/json",
              "application/x.default+json;version=2",
              "application/x.internal+json;version=2"
            ]
          }
        }
      ],
      "get": {
        "summary": "Get appliance",
        "description": "Retrieve a particular appliance by the given id.",
        "operationId": "getAppliance",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApplianceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Appliances"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplianceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/collections/{collection_id}": {
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "default": "saved-recipes"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the recipe in the collection.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of recipes returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "x-amazon-apigateway-auth": {
          "type": "AWS_IAM"
        },
        "summary": "Get collection",
        "description": "Get a list of all recipes in a user's collection.",
        "operationId": "getSavedRecipes",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CollectionResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSavedRecipesCollection.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/collections/{collection_id}/{recipe_id}": {
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "default": "saved-recipes"
          }
        },
        {
          "name": "recipe_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "x-amazon-apigateway-auth": {
          "type": "AWS_IAM"
        },
        "summary": "Add recipe to a collection",
        "description": "Add a recipe to a collection. A recipe can be added only once to a user's collection.",
        "operationId": "addToSavedRecipes",
        "responses": {
          "201": {
            "description": "Recipe successfully added to a collection."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddToSavedRecipesCollection.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "delete": {
        "x-amazon-apigateway-auth": {
          "type": "AWS_IAM"
        },
        "summary": "Remove recipe from a collection",
        "description": "Remove recipe from a collection. The recipe still exists after this operation, it is just no longer in the collection.",
        "operationId": "removeFromSavedRecipes",
        "responses": {
          "204": {
            "description": "Recipe successfully removed from a collection."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveFromSavedRecipesCollection.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/devices-with-capabilities": {
      "post": {
        "deprecated": true,
        "summary": "Devices with capabilities",
        "description": "Returns the devices that can be used on each step of the provided recipe (if any). This endpoint is deprecated and will be removed in the future. Use the cooking session data instead.\n",
        "operationId": "devicesWithCapabilities",
        "requestBody": {
          "$ref": "#/components/requestBodies/DevicesWithCapabilitiesBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DevicesWithCapabilitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Global"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevicesWithCapabilitiesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/cooking/execute-capability": {
      "post": {
        "summary": "Execute capability",
        "description": "Executes a capability command in a device outside of a cooking session context.",
        "operationId": "executeCapability",
        "deprecated": true,
        "requestBody": {
          "$ref": "#/components/requestBodies/ExecuteCapabilityBody"
        },
        "responses": {
          "202": {
            "description": "Capability command correctly submitted for execution."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Global"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExecuteCapabilityLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/execute": {
      "post": {
        "summary": "Execute",
        "description": "Execute a command on an appliance module based on a capability or an ingredient preset",
        "operationId": "execute",
        "requestBody": {
          "$ref": "#/components/requestBodies/ExecuteBody"
        },
        "responses": {
          "202": {
            "description": "Execution correctly submitted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Global"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExecuteLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions": {
      "post": {
        "summary": "Create Cooking Session",
        "description": "Create new Cooking Session for guided cooking of a given recipe.",
        "operationId": "createCookingSession",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCookingSessionBody"
        },
        "responses": {
          "201": {
            "description": "Cooking Session created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CookingSessionObject"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionCreateLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "get": {
        "summary": "Get current Cooking Sessions",
        "description": "Returns a list of the active Cooking Sessions for the user.",
        "operationId": "getCookingSessions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CookingSessionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "parameters": [],
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionListLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions/{sessionId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sessionId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Cooking Session",
        "description": "Returns information about a Cooking Session of the user.",
        "operationId": "getCookingSession",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CookingSessionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionGetLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions/{sessionId}/transition-step": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sessionId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Transition Cooking Session step",
        "description": "Transitions the current step of a Cooking Session.",
        "operationId": "sessionTransitionStep",
        "requestBody": {
          "$ref": "#/components/requestBodies/TransitionStepBody"
        },
        "responses": {
          "200": {
            "description": "The step was transitioned successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionTransitionStepLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions/{sessionId}/end": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sessionId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Finish Cooking Session",
        "description": "Marks the cooking session as finished.",
        "operationId": "sessionEnd",
        "responses": {
          "200": {
            "description": "Cooking Session finished successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionEndLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions/{sessionId}/execute-step/{executionId}": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "The cooking session ID started by the user to cook a recipe",
          "example": "2LEdbGvsUHGhzv5bwQKaCQruGL1"
        },
        {
          "name": "executionId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "An id to identify the step, device and module to execute",
          "example": "1LEdbGvsUHGhz15bqGKaCQruGL2"
        }
      ],
      "post": {
        "summary": "Execute a step inside a started cooking session",
        "description": "Executes a step in a device inside a cooking session context.\n\nThis endpoint should not be used directly by clients, but it will be used because inside\nthe cooking session (`execution_choices.step_number.choices.device_id#module_idx.endpoint`) there\nwill be `endpoint` fields referencing this endpoint.\n",
        "operationId": "executeStep",
        "responses": {
          "202": {
            "description": "Step correctly executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExecuteStepLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/cooking/sessions/{sessionId}/weighing/{ingredientIdx}/{stepPosition}": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "The cooking session ID started by the user to cook a recipe",
          "example": "2LEdbGvsUHGhzv5bwQKaCQruGL1"
        },
        {
          "name": "ingredientIdx",
          "in": "path",
          "schema": {
            "type": "integer"
          },
          "required": true,
          "description": "Index position of selected ingredient in the recipe.",
          "example": 0
        },
        {
          "name": "stepPosition",
          "in": "path",
          "schema": {
            "type": "integer"
          },
          "required": true,
          "description": "Recipe step position of the ingredient that needs to be weighed (0 if is a recipe ingredient).",
          "example": 1
        }
      ],
      "post": {
        "summary": "Send a weighing command to an appliance",
        "description": "Executes a weighing command referencing a step and an ingredient of a recipe.\n",
        "operationId": "weighing",
        "responses": {
          "202": {
            "description": "Weighing command correctly sent."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Cooking Session"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeighingLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/curated-collections/": {
      "post": {
        "summary": "Creates a curated collection",
        "description": "This operation allows the creation of a curated collection for an organization locale in KitchenOS",
        "operationId": "createCuratedCollection",
        "requestBody": {
          "$ref": "#/components/requestBodies/CuratedCollectionCreateRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CuratedCollectionResponseWithHeaders"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCuratedCollectionLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/curated-collections/search": {
      "post": {
        "summary": "Search curated collections for an organization",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0,
            "required": false,
            "description": "The starting position of the curated collection in the search results."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 20
            },
            "required": false,
            "description": "The max number of collections to return in the response."
          }
        ],
        "description": "This operation allows searching among the available curated collections for an organization",
        "operationId": "listAllCuratedCollections",
        "requestBody": {
          "$ref": "#/components/requestBodies/CuratedCollectionListRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CuratedCollectionListResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAllCuratedCollectionsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/curated-collections/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Gets a curated collection",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0,
            "required": false,
            "description": "The starting position of the recipe in the curated collection."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 30
            },
            "required": false,
            "description": "The max number of recipes to return in the response."
          }
        ],
        "description": "Get information about a curated collection for an organization.",
        "operationId": "retrieveCuratedCollection",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CuratedCollectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveCuratedCollectionLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "delete": {
        "summary": "Deletes a curated collection",
        "description": "This operation allows the deletion of a curated collection for an organization.",
        "operationId": "deleteCuratedCollection",
        "responses": {
          "204": {
            "description": "Curated collection successfully removed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteCuratedCollectionLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "ETag value to check freshness against.",
            "example": "1bcd5486fd6577cc48cc0ccbc363156b"
          }
        ],
        "summary": "Modifies an existing curated collection",
        "description": "This operation allows the modification of a curated collection for an organization.",
        "operationId": "modifyCuratedCollection",
        "requestBody": {
          "$ref": "#/components/requestBodies/CuratedCollectionModifyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CuratedCollectionResponseWithHeaders"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ModifyCuratedCollectionLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/curated-collections/{id}/duplicate": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Duplicates a curated collection",
        "description": "This operation allows the duplication of a curated collection in a different locale or with different appliance tags.",
        "operationId": "duplicateCuratedCollection",
        "requestBody": {
          "$ref": "#/components/requestBodies/CuratedCollectionDuplicateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CuratedCollectionDuplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Curated Collections"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DuplicateCuratedCollectionLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/devices/can-cloud-provision": {
      "post": {
        "summary": "Can cloud provision the device?",
        "description": "Endpoint called by the user (client app) to know if the device can be provisioned",
        "operationId": "can-cloud-provision",
        "requestBody": {
          "$ref": "#/components/requestBodies/CanCloudProvisionBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CanCloudProvisionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Devices"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CanCloudProvision.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/devices/provisioning-data": {
      "post": {
        "summary": "Get device temporal certificate.",
        "description": "Endpoint called by the user (client app) to retrieve temporal certificate that expires in 5 minutes and MQTT endpoint.",
        "operationId": "provisioning-data",
        "requestBody": {
          "$ref": "#/components/requestBodies/CanCloudProvisionBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProvisioningDataResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Devices"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProvisioningData.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/devices/get-upload-ota-url": {
      "post": {
        "summary": "Get upload ota url.",
        "description": "Endpoint called by an admin user to obtain an s3 pre-signed URL to put a firmware update file to s3 bucket.",
        "operationId": "get-upload-ota-url",
        "requestBody": {
          "$ref": "#/components/requestBodies/GetUploadOTAUrlBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUploadOTAUrlResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Devices"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUploadOTAUrl.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/devices/create-ota-details": {
      "post": {
        "summary": "Create OTA details",
        "description": "Endpoint called by an admin user to create an OTA details rule.",
        "operationId": "create-ota-details",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateOTADetailsBody"
        },
        "responses": {
          "201": {
            "description": "OTA rule successfully created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Devices"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOTADetails.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/home-feeds/": {
      "get": {
        "summary": "List all localized home feeds for an organization",
        "description": "This operation allows listing all the available localized home feeds for an organization.",
        "operationId": "listAllLocalizedHomeFeeds",
        "responses": {
          "200": {
            "$ref": "#/components/responses/HomeFeedListResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Home Feeds"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAllLocalizedHomeFeedsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/home-feeds/{locale}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Locale"
          },
          "name": "locale",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieves a localized home feed",
        "deprecated": true,
        "parameters": [
          {
            "in": "query",
            "name": "appliance_tag_ids",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "A comma separated string of appliance tag ids that will be used to filter the contents included in the home feed.",
            "example": "cckg:ApplianceA,cckg:ApplianceB"
          },
          {
            "in": "query",
            "name": "preview",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "description": "Flag to enable/disable the preview mode. When enabled, the home feed will only include published contents."
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Pointer to the starting position of the contents to return in response. If a cursor is not provided, request will fetch the first x number of results."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 8
            },
            "required": false,
            "description": "The max number of contents to return in the response."
          }
        ],
        "description": "This operation allows to retrieve a localized home feed for an organization.",
        "operationId": "retrieveLocalizedHomeFeedDeprecated",
        "responses": {
          "200": {
            "$ref": "#/components/responses/HomeFeedDeprecatedRetrieveResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Home Feeds"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveLocalizedHomeFeedLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "post": {
        "summary": "Retrieves a localized home feed",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0,
            "required": false,
            "description": "The starting position of the contents in the home feed."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 8
            },
            "required": false,
            "description": "The max number of contents to return in the response."
          }
        ],
        "description": "This operation allows to retrieve a localized home feed for an organization.",
        "operationId": "retrieveLocalizedHomeFeed",
        "requestBody": {
          "$ref": "#/components/requestBodies/HomeFeedPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HomeFeedRetrieveResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Home Feeds"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveLocalizedHomeFeedLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "ETag value to check freshness against.",
            "example": "1bcd5486fd6577cc48cc0ccbc363156b"
          }
        ],
        "summary": "Modifies an existing localized home feed",
        "description": "This operation allows the modification of a localized home feed for an organization.",
        "operationId": "modifyLocalizedHomeFeed",
        "requestBody": {
          "$ref": "#/components/requestBodies/HomeFeedModifyRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HomeFeedModifyResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "Missing privileges."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Home Feeds"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ModifyLocalizedHomeFeedLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/home-feeds/curated-collection": {
      "post": {
        "summary": "Adds a curated collection to its localized home feed",
        "description": "This operation allows to append or prepend a curated collection to its localized home feed for an organization.",
        "operationId": "addCuratedCollectionToHomeFeed",
        "requestBody": {
          "$ref": "#/components/requestBodies/AddCuratedCollectionToHomeFeedRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/HomeFeedModifyResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Home Feeds"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCuratedCollectionToHomeFeedLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/media/images/recipes/{resource_id}/{image_type}": {
      "parameters": [
        {
          "name": "resource_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The unique ID of the resource this image is associated with",
            "example": "12345"
          }
        },
        {
          "name": "image_type",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The type of image it represents",
            "enum": [
              "hero"
            ]
          }
        }
      ],
      "post": {
        "description": "Upload a single type recipe image",
        "operationId": "uploadRecipeImage",
        "security": [
          {
            "LambdaAuthorizer": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ImageUploadRequestBody"
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "headers": {
              "Content-Location": {
                "schema": {
                  "type": "string",
                  "description": "Relative resource URI."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Media"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadImage.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "get": {
        "description": "Retrieve a single type recipe image.",
        "operationId": "getRecipeImage",
        "servers": [
          {
            "url": "https://{environment}.fresco-kitchenos.com/media",
            "variables": {
              "environment": {
                "description": "The environment to use for the API.",
                "default": "media",
                "enum": [
                  "media-dev",
                  "media-stage",
                  "media"
                ]
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The width of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The height of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format of the image to retrieve",
              "default": "image/webp",
              "enum": [
                "image/webp"
              ]
            }
          },
          {
            "name": "x-refreshed",
            "in": "header",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "timestamp",
              "description": "Marker to bypass cache. Use with caution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image retrieved successfully",
            "content": {
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "byte",
                  "description": "The image in the requested format"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "description": "The content type of the image",
                  "default": "image/webp",
                  "enum": [
                    "image/webp"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Image not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Media"
        ]
      }
    },
    "/media/images/recipes/{resource_id}/{image_type}/{image_index}": {
      "parameters": [
        {
          "name": "resource_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The unique ID of the resource this image is associated with",
            "example": "12345"
          }
        },
        {
          "name": "image_type",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The type of image it represents",
            "enum": [
              "additional"
            ]
          }
        },
        {
          "name": "image_index",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "The index of the image within the type. Used for lists",
            "example": 1
          }
        }
      ],
      "post": {
        "description": "Upload a list type recipe image",
        "operationId": "uploadRecipeListImage",
        "security": [
          {
            "LambdaAuthorizer": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ImageUploadRequestBody"
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Media"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadImage.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "get": {
        "description": "Retrieve a list type recipe image by its index.",
        "operationId": "getRecipeListImage",
        "servers": [
          {
            "url": "https://{environment}.fresco-kitchenos.com/media",
            "variables": {
              "environment": {
                "description": "The environment to use for the API.",
                "default": "media",
                "enum": [
                  "media-dev",
                  "media-stage",
                  "media"
                ]
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The width of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The height of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format of the image to retrieve",
              "default": "image/webp",
              "enum": [
                "image/webp"
              ]
            }
          },
          {
            "name": "x-refreshed",
            "in": "header",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "timestamp",
              "description": "Marker to bypass cache. Use with caution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image retrieved successfully",
            "content": {
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "byte",
                  "description": "The image in the requested format"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "description": "The content type of the image",
                  "default": "image/webp",
                  "enum": [
                    "image/webp"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Image not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Media"
        ]
      }
    },
    "/media/images/devices/{resource_id}/{image_type}/{image_index}": {
      "parameters": [
        {
          "name": "resource_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The unique ID of the resource this image is associated with",
            "example": "12345"
          }
        },
        {
          "name": "image_type",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The type of image it represents.",
            "enum": [
              "tip"
            ]
          }
        },
        {
          "name": "image_index",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer",
            "description": "The index of the image within the type. Used for lists",
            "example": 1
          }
        }
      ],
      "post": {
        "description": "Upload a list type device image",
        "operationId": "uploadDeviceListImage",
        "security": [
          {
            "LambdaAuthorizer": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ImageUploadRequestBody"
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Media"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadImage.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "get": {
        "description": "Retrieve a a list type device image by its index.",
        "operationId": "getDevicesListImage",
        "servers": [
          {
            "url": "https://{environment}.fresco-kitchenos.com/media",
            "variables": {
              "environment": {
                "description": "The environment to use for the API.",
                "default": "media",
                "enum": [
                  "media-dev",
                  "media-stage",
                  "media"
                ]
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The width of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The height of the image to retrieve",
              "pattern": "^[0-9]+$",
              "example": "100"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The format of the image to retrieve",
              "default": "image/webp",
              "enum": [
                "image/webp"
              ]
            }
          },
          {
            "name": "x-refreshed",
            "in": "header",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "timestamp",
              "description": "Marker to bypass cache. Use with caution"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image retrieved successfully",
            "content": {
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "byte",
                  "description": "The image in the requested format"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "description": "The content type of the image",
                  "default": "image/webp",
                  "enum": [
                    "image/webp"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Image not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Media"
        ]
      }
    },
    "/media/images/{resource_type}/{resource_id}": {
      "parameters": [
        {
          "name": "resource_type",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The type of resource the images are associated with",
            "enum": [
              "recipes",
              "devices"
            ]
          }
        },
        {
          "name": "resource_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "The ID of the resource the images are associated with",
            "example": "12345"
          }
        }
      ],
      "get": {
        "description": "Retrieves the image types available for a resource",
        "operationId": "listImages",
        "security": [
          {
            "LambdaAuthorizer": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all the image types and indices available for a resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "example": [
                        "hero",
                        "additional/1"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListImages.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "tags": [
          "Media"
        ]
      }
    },
    "/notifications/push/device-token": {
      "post": {
        "summary": "Registers a Device Token for Push Notifications",
        "description": "Endpoint called by a client to register a device registration token (FCM for Android and APNs for iOS). These tokens are used to deliver cooking push notifications. This endpoint should be called every time the token is created or refreshed.",
        "operationId": "register-push-device-token",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterPushDeviceTokenBody"
        },
        "responses": {
          "201": {
            "description": "Push Device Token successfully registered/updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Notifications"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterPushDeviceToken.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "delete": {
        "summary": "Removes a Device Token for Push Notifications",
        "description": "Endpoint called by a client to remove a device registration token (FCM for Android and APNs for iOS). This endpoint should be called upon user sign out.",
        "operationId": "remove-push-device-token",
        "requestBody": {
          "$ref": "#/components/requestBodies/RemovePushDeviceTokenBody"
        },
        "responses": {
          "204": {
            "description": "Push Device Token successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Notifications"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemovePushDeviceToken.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/notifications/push/device-tokens": {
      "get": {
        "summary": "Returns a list of Device Tokens for Push Notifications for current user",
        "description": "Endpoint called by a client to get all device registration tokens for current user",
        "operationId": "get-user-push-device-tokens",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PushDeviceTokensResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Notifications"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserPushDeviceTokens.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/oauth2/authorize": {
      "get": {
        "summary": "Initiate user authorization in a browser",
        "description": "This endpoint initiates user authorization by either returning an authorization code or tokens based on the `response_type`. It should be initiated in a browser environment.",
        "operationId": "oauthAuthorize",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "description": "The type of response to return.",
            "schema": {
              "description": "The OAuth 2.0 response type.",
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "description": "The client ID of the app.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "description": "The URI to redirect to after authorization.",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "example": "openid profile email",
            "description": "The scope of the access request. An `id_token` is returned only if the `openid` scope is included.\n\nThe `email` and `profile` scopes can only be requested if the `openid` scope is also included.\n\nThe `id_token` must be used to access our APIs by including it in the Authorization header as: \"Authorization: Bearer <id_token>\".\n\nIf no scopes are specified, the authentication server will use all scopes associated with the client.\n",
            "schema": {
              "type": "string",
              "pattern": "^(openid|profile|email)(\\s+(openid|profile|email))*$",
              "default": "openid profile email"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "A client-generated value passed through unmodified from the authorization request to the token response, used to protect against CSRF. If passing structured data, encode as base64 to avoid encoding issues. [More info](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "required": false,
            "description": "A string value used to associate a client session with an ID Token, and to mitigate replay attacks. [More info](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "required": false,
            "description": "A challenge derived from the code verifier that is sent in the authorization request, to be used with PKCE. [More info](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "required": false,
            "description": "The method used to derive the code challenge, only `S256` is supported. [More info](https://datatracker.ietf.org/doc/html/rfc7636#section-4.3)",
            "schema": {
              "enum": [
                "S256"
              ]
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to the given redirect URI with authorization code as a query parameter.",
            "headers": {
              "Location": {
                "description": "The URI to redirect to with the authorization code as a query parameter.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "https://callback.com/?code=d7374313-c1fb-4bc5-82a5-de360050cce8"
              }
            }
          }
        },
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "summary": "Exchange authorization code for tokens, or refresh existing token",
        "description": "Exchanges an authorization code for ID token, access token, and refresh token, or refresh existing token.",
        "operationId": "oauthToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeGrant"
                  },
                  {
                    "$ref": "#/components/schemas/RefreshTokenGrant"
                  }
                ],
                "discriminator": {
                  "propertyName": "grant_type",
                  "mapping": {
                    "authorization_code": "#/components/schemas/AuthorizationCodeGrant",
                    "refresh_token": "#/components/schemas/RefreshTokenGrant"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON object containing an ID token, access token, and optionally a refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id_token": {
                      "type": "string",
                      "description": "The ID token contains user profile information and is used for user authentication.  Use the ID token to verify the user's identity and retrieve user attributes such as name,  email, and other claims. This token is the primary token that should be used for authenticating  users within your application and for interacting with our endpoints.\n"
                    },
                    "access_token": {
                      "type": "string",
                      "description": "The access token is typically used for authorization purposes and grants access to specific resources or APIs.  However, in our system, the access token is not utilized. Please use the ID token exclusively  for all authentication and interaction with our endpoints.\n"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "The refresh token is used to obtain a new access token when the current access token expires."
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "The number of seconds before the access token expires. Users must use this token within this timeframe."
                    },
                    "token_type": {
                      "type": "string",
                      "enum": [
                        "Bearer"
                      ],
                      "description": "The type of token returned. Currently, only `Bearer` is supported. Users must include this value in the `Authorization` header in the format: `Authorization: Bearer {token}`."
                    }
                  },
                  "required": [
                    "id_token",
                    "access_token",
                    "refresh_token",
                    "expires_in",
                    "token_type"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to various client-side issues.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The error code.",
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type"
                      ]
                    },
                    "error_description": {
                      "type": "string",
                      "description": "A human-readable text providing additional information about the error."
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/oauth2/revoke": {
      "post": {
        "summary": "Revoke a token",
        "description": "Revokes either an access or refresh token.",
        "operationId": "oauthRevoke",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The refresh token to revoke."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The app client ID."
                  }
                },
                "required": [
                  "token",
                  "client_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully revoked."
          }
        },
        "tags": [
          "OAuth2.0"
        ]
      }
    },
    "/organization/": {
      "get": {
        "summary": "Get organization's data.",
        "description": "Endpoint called by either a normal user or an organization admin to get the organization's data.",
        "operationId": "get-org",
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrganizationResponse"
          },
          "403": {
            "description": "The user is not authorized to get this resource."
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Organization"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrganization.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "requestParameters": {
            "integration.request.header.X-Organization-Id": "context.authorizer.organization_id",
            "integration.request.header.X-Roles": "context.authorizer.roles"
          },
          "cacheKeyParameters": [
            "integration.request.header.X-Organization-Id",
            "integration.request.header.X-Roles"
          ],
          "cacheNamespace": "organization",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "put": {
        "summary": "Update organization's data.",
        "description": "Endpoint called by an organization admin to update the organization's data.",
        "operationId": "update-org",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update operation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "description": "The user is not authorized to update this resource."
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Organization"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrganization.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/assistant/recipe-adapt": {
      "post": {
        "summary": "Adapt recipe by id",
        "description": "Accepts a kitchenOS recipe and instructions in request body. Update the input Recipe with necessary Adaptation based on the instructions.",
        "operationId": "postAdaptRecipe",
        "requestBody": {
          "$ref": "#/components/requestBodies/AdaptRecipeRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AdaptRecipeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Adapt"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdaptRecipe.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/assistant/ingredient-alternatives": {
      "post": {
        "parameters": [
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Suggested alternative ingredients",
        "description": "Accepts a list of recipe ingredients in request body. Returns the list of maximum three suggested ingredients for each ingredient in the request body. If no suggestion is available for an ingredient, an empty list will be returned.",
        "operationId": "PostSuggestedIngredients",
        "requestBody": {
          "$ref": "#/components/requestBodies/SuggestAlternativeIngredientRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuggestAlternativeIngredientResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Adapt"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SuggestedIngredients.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/assistant/jobs": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "query",
          "required": true,
          "example": "kn4g9k"
        }
      ],
      "get": {
        "summary": "List all pending adaptations for a given recipe",
        "description": "Get the current status of all recipe adaptations for a given recipe.",
        "operationId": "ListAdaptationJobs",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRecipeAdaptationJobsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Adapt"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListJobs.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/assistant/jobs/{job_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "job_id",
          "in": "path",
          "required": true,
          "example": "ada8632c-4cdd-42a5-801f-54853b7027c5"
        }
      ],
      "get": {
        "summary": "Get recipe adaptation job",
        "description": "Get the current status of a recipe adaptation.",
        "operationId": "GetAdaptationJob",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRecipeAdaptationJobResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Adapt"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetJob.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/": {
      "post": {
        "summary": "Creates a recipe",
        "description": "This operation allows the creation of a recipe in KitchenOS. *Reference data* IDs are used in properties with the `reference` prefix.\n",
        "operationId": "postRecipe",
        "requestBody": {
          "$ref": "#/components/requestBodies/RecipeCreateRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RecipeCreateResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/migrate": {
      "post": {
        "summary": "Creates a recipe (migration mode)",
        "description": "This operation allows the creation of a recipe in KitchenOS using migration mode. In this mode, additional recipe attributes can be set that cannot be set in a normal create. The purpose of this endpoint is to facilitate migrating recipes from the old to the new (KOS) platform. *Reference data* IDs are used in properties with the `reference` prefix.\n",
        "operationId": "postRecipeMigrate",
        "requestBody": {
          "$ref": "#/components/requestBodies/RecipeMigrateRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RecipeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRecipeMigrateLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/{recipe_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Gets a recipe",
        "description": "Get information about a single Recipe in the KitchenOS.",
        "operationId": "getRecipe",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecipeResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "If-Match",
            "in": "header",
            "required": false,
            "description": "ETag value to check freshness against.",
            "example": "1bcd5486fd6577cc48cc0ccbc363156b"
          }
        ],
        "summary": "Updates a recipe",
        "description": "Update a recipe in KitchenOS.",
        "operationId": "putRecipe",
        "requestBody": {
          "$ref": "#/components/requestBodies/RecipeUpdateRequest"
        },
        "responses": {
          "204": {
            "description": "Recipe updated successfully.",
            "headers": {
              "Content-Location": {
                "schema": {
                  "type": "string",
                  "description": "Relative resource URI."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "delete": {
        "summary": "Deletes a recipe",
        "description": "Delete a recipe in KitchenOS.",
        "operationId": "deleteRecipe",
        "responses": {
          "204": {
            "description": "Recipe deleted successfully."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/{recipe_id}/publish": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Publishes a recipe",
        "description": "Publish a recipe in KitchenOS.",
        "operationId": "publishRecipe",
        "responses": {
          "204": {
            "description": "Recipe published successfully.",
            "headers": {
              "Content-Location": {
                "schema": {
                  "type": "string",
                  "description": "Relative resource URI."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidOperationResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PublishRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/{recipe_id}/unpublish": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Unpublishes a recipe",
        "description": "Unpublish a recipe in KitchenOS.",
        "operationId": "unpublishRecipe",
        "responses": {
          "204": {
            "description": "Recipe unpublished successfully.",
            "headers": {
              "Content-Location": {
                "schema": {
                  "type": "string",
                  "description": "Relative resource URI."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidOperationResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnpublishRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/{recipe_id}/fork": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Locale"
          },
          "name": "locale",
          "in": "query",
          "required": false,
          "description": "The locale (format xx-XX) that is to be applied to the newly forked recipe.",
          "example": "en-US"
        }
      ],
      "post": {
        "summary": "Fork a recipe with a new locale",
        "description": "Fork a recipe in KitchenOS with a new locale.\n\nThis is used when copying a recipe and assigning a new locale to the new recipe.\nAny number of new recipes can be forked from another recipe but the locales must be unique.\nSo for example, one can have an en-GB, es-ES cloned from a given recipe but one cannot then \nclone a second en-GB or es-ES recipe from that original recipe.\n",
        "operationId": "forkRecipe",
        "requestBody": {
          "$ref": "#/components/requestBodies/RecipeForkRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RecipeCreateResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForkRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipes/{recipe_id}/fork-adapt": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "recipe_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Fork a recipe for adapting",
        "description": "Fork a recipe in KitchenOS as a precursor to adapting the recipe.\n\nThe forked recipe is identical to the original recipe apart from its `recipe_id` and \n`created_by_id` fields.\nThe newly forked recipe is owned by the user that performed the fork and can be\nmodified using the recipe adapt facility - for example to substitute one ingredient\nfor a different one.\nA recipe that is fork-adpated may not itself be fork-adapted - i.e. the fork adapt\ntree is at most one level deep.\n",
        "operationId": "forkAdaptRecipe",
        "responses": {
          "201": {
            "$ref": "#/components/responses/RecipeCreateResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Recipes"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForkAdaptRecipeLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/recipe-understanding/from-url": {
      "post": {
        "summary": "Post url input",
        "description": "Accepts a recipe url in request body. Converts to a Fresco Platform recipe structure with the help of AI models. Returns the recipe.",
        "operationId": "postFromUrl",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/OrganizationId"
            },
            "name": "x-kitchenos-organization-id",
            "in": "header",
            "required": false,
            "description": "The Organization Id in format of kitchenos:XXXX."
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FromUrlRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RUSRecipeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Understanding"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FromUrlLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/recipe-understanding/from-text": {
      "post": {
        "summary": "Post text input",
        "description": "Accepts text input structure as payload. Converts to a Fresco Platform recipe structure with the help of AI models. Returns the recipe.",
        "operationId": "postFromText",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/OrganizationId"
            },
            "name": "x-kitchenos-organization-id",
            "in": "header",
            "required": false,
            "description": "The Organization Id in format of kitchenos:XXXX."
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FromTextRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RUSRecipeResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Recipe Understanding"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FromTextLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/reference/appliance-skus": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Appliance Stock Keeping Units (SKU)",
        "description": "Get list of reference appliance SKUs as objects. An appliance SKU is an appliance model. An SKU uniquely defines an appliance at the inventory  level.",
        "operationId": "listReferenceApplianceSkus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceApplianceSkusResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListApplianceSkusLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/appliance-skus/{appliance_sku_id}": {
      "parameters": [
        {
          "description": "Id of appliance stock keeping unit (SKU)",
          "name": "appliance_sku_id",
          "schema": {
            "type": "string",
            "example": "cckg:ZenMixer"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Appliance Stock Keeping Unit (SKU)",
        "description": "Get appliance SKU object with given id. An appliance SKU is an appliance model. An SKU uniquely defines an appliance at the inventory level.",
        "operationId": "getReferenceApplianceSku",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceApplianceSkuResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplianceSkuLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/appliance-families": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Appliance Families",
        "description": "Get list of appliance families as objects. An appliance family is a grouping of appliance SKUs. An appliance family can overlap with another one.",
        "operationId": "listReferenceApplianceFamilies",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceApplianceFamiliesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListApplianceFamiliesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/appliance-families/{appliance_family_id}": {
      "parameters": [
        {
          "description": "Id of appliance family",
          "name": "appliance_family_id",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Appliance Family",
        "description": "Get appliance family object with given id. An appliance family is a grouping of appliance SKUs. An appliance family can overlap with another one.",
        "operationId": "getReferenceApplianceFamily",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceApplianceFamilyResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplianceFamilyLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/capability-phases": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Capability Phases",
        "description": "Get list of capability phases as objects.",
        "operationId": "listReferenceCapabilityPhases",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceCapabilityPhasesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListCapabilityPhasesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/capability-phases/{capability_phase_id}": {
      "parameters": [
        {
          "description": "Id of Capability Phase",
          "name": "capability_phase_id",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Capability Phase",
        "description": "Get capability phase object with given id.",
        "operationId": "getReferenceCapabilityPhase",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceCapabilityPhaseResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCapabilityPhaseLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/ingredients": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Ingredients",
        "description": "Get list of ingredients as objects.",
        "operationId": "listReferenceIngredients",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceIngredientsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListIngredientsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/ingredients/{ingredient_id}": {
      "parameters": [
        {
          "description": "Id of ingredient",
          "name": "ingredient_id",
          "schema": {
            "type": "string",
            "example": "cckg:Water"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Ingredient",
        "description": "Get ingredient object with given id.",
        "operationId": "getReferenceIngredient",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceIngredientResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIngredientLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/units": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Units",
        "description": "Get list of units as objects.",
        "operationId": "listReferenceUnits",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceUnitsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUnitsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/units/{unit_id}": {
      "parameters": [
        {
          "description": "Id of unit",
          "name": "unit_id",
          "schema": {
            "type": "string",
            "example": "cckg:Gram"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Unit",
        "description": "Get unit object with given id.",
        "operationId": "getReferenceUnit",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceUnitResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnitLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/preparations": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Preparations",
        "description": "Get list of ingredient preparations as objects.",
        "operationId": "listReferencePreparations",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferencePreparationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListPreparationsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/preparations/{preparation_id}": {
      "parameters": [
        {
          "description": "Id of ingredient preparation",
          "name": "preparation_id",
          "schema": {
            "type": "string",
            "example": "cckg:Chopped"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Preparation",
        "description": "Get ingredient preparation object with given id.",
        "operationId": "getReferencePreparation",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferencePreparationResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPreparationLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/capabilities": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Capabilities",
        "description": "Get list of capabilities as objects.",
        "operationId": "listReferenceCapabilities",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceCapabilitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListCapabilitiesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/capabilities/{capability_id}": {
      "parameters": [
        {
          "description": "Id of capability",
          "name": "capability_id",
          "schema": {
            "type": "string",
            "example": "cckg:Bake"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Capability",
        "description": "Get capability object with given id.",
        "operationId": "getReferenceCapability",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceCapabilityResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCapabilityLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/settings": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Settings",
        "description": "Get list of setting as objects.",
        "operationId": "listReferenceSettings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListSettingsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/settings/{setting_id}": {
      "parameters": [
        {
          "description": "Id of setting",
          "name": "setting_id",
          "schema": {
            "type": "string",
            "example": "cckg:TimeSetting"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Setting",
        "description": "Get setting object with given id.",
        "operationId": "getReferenceSetting",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceSettingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSettingLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/setting-values": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Nominal Setting Values",
        "description": "Get list of setting values as objects.",
        "operationId": "listReferenceSettingValues",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceSettingValuesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListSettingValuesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/setting-values/{setting_value_id}": {
      "parameters": [
        {
          "description": "Id of setting value",
          "name": "setting_value_id",
          "schema": {
            "type": "string",
            "example": "cckg:SpeedLow"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Nominal Setting Value",
        "description": "Get setting value object with given id.",
        "operationId": "getReferenceSettingValue",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceSettingValueResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSettingValueLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/tags": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Tags",
        "description": "Get list of tags as objects.",
        "operationId": "listReferenceTags",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceTagsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTagsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/tags/{tag_id}": {
      "parameters": [
        {
          "description": "Id of tag",
          "name": "tag_id",
          "schema": {
            "type": "string",
            "example": "cckg:Brunch"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Tag",
        "description": "Get tag object with given id.",
        "operationId": "getReferenceTag",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceTagResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptableResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTagLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/tag-categories": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "summary": "Get Tag Categories",
        "description": "Get list of tag categories as objects.",
        "operationId": "listReferenceTagCategories",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceTagCategoriesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTagCategoriesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/measurement-systems": {
      "get": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Get Measurement systems",
        "description": "Get a list of measurement systems as objects. A system of measurement is a collection of units of measurement and rules relating them to each other.",
        "operationId": "listReferenceMeasurementSystems",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReferenceMeasurementSystemsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListMeasurementSystemsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/measurement-systems/{measurement_system_id}": {
      "parameters": [
        {
          "description": "Id of Measurement System",
          "name": "measurement_system_id",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              },
              {
                "type": "string",
                "properties": {
                  "default": {
                    "type": "string",
                    "description": "Default value",
                    "default": "en-US"
                  }
                }
              }
            ]
          },
          "name": "Accept-Language",
          "in": "header",
          "required": false,
          "description": "The locale in format of xx-XX. The server will return  406 - Not Acceptable if the requested locale is not supported yet.",
          "example": "en-US"
        }
      ],
      "get": {
        "summary": "Get Measurement System",
        "description": "Get Measurement System object with given id. A system of measurement is a collection of units of measurement and rules relating them to each other.",
        "operationId": "getReferenceMeasurementSystem",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReferenceMeasurementSystemResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMeasurementSystemLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      }
    },
    "/reference/convert-units": {
      "post": {
        "parameters": [
          {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Locale"
                },
                {
                  "type": "string",
                  "properties": {
                    "default": {
                      "type": "string",
                      "description": "Default value",
                      "default": "en-US"
                    }
                  }
                }
              ]
            },
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "description": "The locale in format of xx-XX. The server will return data available only for the locale. If no data is available, it will return an empty list.",
            "example": "en-US"
          }
        ],
        "summary": "Convert Units",
        "description": "Accepts List of source value, Unit, Unit System with optional context and preferred target unit as payload. Convert value and unit from one unit system to another. Returns the new values and units in the target system.",
        "operationId": "postConvertUnits",
        "requestBody": {
          "$ref": "#/components/requestBodies/ConvertUnitsRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConvertUnitsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          }
        },
        "tags": [
          "Reference Data"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConvertUnitsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        }
      },
      "parameters": []
    },
    "/search/recipes": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecipesRequest"
              }
            }
          }
        },
        "summary": "Search recipes",
        "description": "*Return recipes matching search criteria.*\n\n**Search when not logged in (anonymous access):**\n* Only those recipes belonging to the organisation whose id is baked into the client application are searched.\n* Note that sending an expired token is not the same as anonymous access, no recipes will be returned.\n\n**Search when logged in:**\n* Only those recipes belonging to the user’s organisation are searched.\n* Only published recipes will be searched for non-admin users.\n* Both draft and published recipes will be searched for admin users.\n\n**Tags:**\n* All tags provided in a search are AND’ed\n* If you specify the following, then all three must be present for a match to occur.\n  - search term `chicken`\n  - tags: cckgFeatured , `cckg:ZenMixer`\n\n**Locales**\n* The `Accept-Language` field in the header is created auotmatically by the Platform.  This value will is used by the search service to filter search results - only those recipes matching the specified search criteria **and** the locale in `Accept-Language` will be returned.\n* If however a list of one or more locales (e.g. `en-US`, `en-AU`) is provided in the `locale` field of the query, then any value for `Accept-Language` is ignored and the results of any search will filter those results such that only those recipes that match one of the specified `locales` will be included in the search results.\n\n*Example:*\n1. Recipe name, ingredients names and description will be searched for `chicken`\n\n2. Any matching recipes will then be filtered that have both the tags: `cckgFeatured` and `cckg:ZenMixer`\n\n3. If the current user is logged in then recipes that belong to that organisation will then be filtered.\n\n4. If the user is logged in and is a non-admin user then published recipes will then be filtered - i.e. no DRAFT recipes returned.\n\nThe final result is then returned to the client (paginated).\n\nAlso note that when the client explicitly gets a recipe (i.e. passing  its id to the recipe service, not through search), the same user and organisation restrictions as apply in search also apply.\n",
        "operationId": "searchRecipes",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchRecipesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchRecipesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/ingredients": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference ingredients",
        "description": "Return all ingredients",
        "operationId": "searchIngredients",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchIngredientsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/ingredients/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the ingredient to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Water"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference ingredient",
        "description": "Return ingredient matching exact ingredient ID.",
        "operationId": "searchIngredient",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceIngredient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/units": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference units",
        "description": "Return all units",
        "operationId": "searchUnits",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchUnitsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/units/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the unit to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Gram"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference unit",
        "description": "Return unit matching exact unit ID.",
        "operationId": "searchUnit",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceUnit"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/measurement-systems": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference measurement systems",
        "description": "Return all measurement systems",
        "operationId": "searchMeasurementSystems",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchMeasurementSystemsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/measurement-systems/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the measurement system to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Chopped"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference measurement system",
        "description": "Return measurement system matching exact measurement system ID.",
        "operationId": "searchMeasurementSystem",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceMeasurementSystem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/preparations": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference preparations",
        "description": "Return all preparations",
        "operationId": "searchPreparations",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchPreparationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/preparations/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the preparation to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Chopped"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference preparation",
        "description": "Return preparation matching exact preparation ID.",
        "operationId": "searchPreparation",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferencePreparation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/capabilities": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference capabilities",
        "description": "Return all capabilities",
        "operationId": "searchCapabilities",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchCapabilitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/capabilities/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the capability to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Bake"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference capability",
        "description": "Return capability matching exact capability ID.",
        "operationId": "searchCapability",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCapability"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/capability-phases": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference capability phases",
        "description": "Return all capability phases",
        "operationId": "searchCapabilityPhases",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchCapabilityPhasesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/capability-phases/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the capability phase to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:ExecutionPhase"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference capability phase",
        "description": "Return capability phase matching exact capability phase ID.",
        "operationId": "searchCapabilityPhase",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCapabilityPhase"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/settings": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference settings",
        "description": "Return all settings",
        "operationId": "searchSettings",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSettingsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/settings/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the setting to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:TimeSetting"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference setting",
        "description": "Return setting matching exact setting ID.",
        "operationId": "searchSetting",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/tags": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference tags",
        "description": "Return all tags",
        "operationId": "searchTags",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchTagsResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/tags/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the tag to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "cckg:Brunch"
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference tag",
        "description": "Return tag matching exact tag ID.",
        "operationId": "searchTag",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceTag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/setting-values": {
      "post": {
        "parameters": [
          {
            "name": "from",
            "description": "The starting position of the results page.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "description": "The max number of results returned in this response.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference setting values",
        "description": "Return all setting values",
        "operationId": "searchSettingValues",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferencesLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSettingValuesResponse"
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/search/reference/setting-values/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "The ID of the setting value to search.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchReferenceRequestBody"
              }
            }
          }
        },
        "summary": "Search reference setting value",
        "description": "Return setting value matching exact setting ID.",
        "operationId": "searchSettingValue",
        "tags": [
          "Search"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReferenceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0"
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSettingValueNominal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        }
      }
    },
    "/user/": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user.\nUpon successful registration the user will receive an email with a confirmation link to activate their account.\nThe verification link is valid for 24 hours.\n",
        "operationId": "createUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserCreateRequest"
        },
        "responses": {
          "201": {
            "description": "User successfully created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      },
      "get": {
        "summary": "Retrieve user",
        "description": "Retrieves the user bearing the token",
        "operationId": "getUser",
        "security": [
          {
            "UserPoolAuthorizer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/NonCompliantResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserGetLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Modifies data of the user bearing the token",
        "operationId": "updateUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserUpdateRequest"
        },
        "security": [
          {
            "UserPoolAuthorizer": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserUpdateLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Deletes the user bearing the token",
        "operationId": "deleteUser",
        "security": [
          {
            "UserPoolAuthorizer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion requested successfully"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserDeleteLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      }
    },
    "/user/generate-anonymous-token": {
      "post": {
        "summary": "Generate an anonymous user token",
        "description": "Generate an anonymous user token",
        "operationId": "generateAnonymousToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAnonymousTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnonymousTokenResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenerateAnonymousTokenLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      }
    },
    "/user/terms-and-conditions": {
      "post": {
        "summary": "Accept terms and conditions",
        "description": "Accept Fresco's terms and conditions and those of the organization that issued the token.",
        "operationId": "acceptTermsAndConditions",
        "security": [
          {
            "UserPoolAuthorizer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Terms and conditions successfully accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AcceptTermsAndConditionsLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      }
    },
    "/user/unpair-device": {
      "post": {
        "summary": "Unpair a device",
        "description": "Unpairs a device from the user bearing the token",
        "operationId": "unpairDevice",
        "requestBody": {
          "$ref": "#/components/requestBodies/UnpairDeviceRequest"
        },
        "security": [
          {
            "UserPoolAuthorizer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Device successfully unpaired"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "description": "The token provided in the Authorization header is not valid"
          },
          "403": {
            "description": "Missing Authorization header"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ApplicationErrorResponse"
          },
          "502": {
            "$ref": "#/components/responses/IntegrationServiceErrorResponse"
          }
        },
        "tags": [
          "Users"
        ],
        "x-amazon-apigateway-integration": {
          "uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnpairDeviceLambda.Arn}:current/invocations"
          },
          "httpMethod": "POST",
          "type": "aws_proxy",
          "payloadFormatVersion": "1.0",
          "connectionType": "INTERNET"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Locale": {
        "title": "Locale",
        "description": "A locale of the form ab-XY",
        "type": "string",
        "enum": [
          "cs-CZ",
          "da-DK",
          "de-DE",
          "en-AU",
          "en-GB",
          "en-US",
          "es-ES",
          "fi-FI",
          "fr-FR",
          "it-IT",
          "nb-NO",
          "nl-NL",
          "pl-PL",
          "pt-PT",
          "ru-RU",
          "sv-SE"
        ]
      },
      "ApplianceEntityId": {
        "title": "Appliance entity ID.",
        "description": "The ID of an entity as defined in the Appliance profile.",
        "type": "string",
        "pattern": "^kitchenos(:[a-zA-Z0-9]+){1,}$",
        "example": "kitchenos:ZenKitchen:VentingNaturalQuick"
      },
      "ApplianceListItem": {
        "description": "An appliance list item.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NotAcceptableErrorData": {
        "description": "Data associated with a not acceptable error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Resource could not be produced."
          },
          "type": {
            "type": "string",
            "enum": [
              "NotAcceptableError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "NotAcceptableError": {
        "description": "An error indicating that the requested resource could not be produced matching the list of acceptable values defined in the request's proactive content negotiation headers.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/NotAcceptableErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "ApplicationErrorData": {
        "description": "Data associated with an application error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "An unexpected error occurred."
          },
          "type": {
            "type": "string",
            "enum": [
              "ApplicationError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "ApplicationError": {
        "description": "An error indicating that the request could not be processed due to an internal application error.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ApplicationErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "IntegrationServiceErrorData": {
        "description": "Data associated with an integration service error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad gateway."
          },
          "type": {
            "type": "string",
            "enum": [
              "IntegrationServiceError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "IntegrationServiceError": {
        "description": "An error indicating that communication with third party services failed.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/IntegrationServiceErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "NonCompliantErrorData": {
        "description": "Data associated with a response validation error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Response is non compliant."
          },
          "type": {
            "type": "string",
            "enum": [
              "NonCompliantError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "NonCompliantError": {
        "description": "An error indicating that the response was not compliant.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/NonCompliantErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "ApplianceNative": {
        "type": "object",
        "description": "A definition for the Appliance native value",
        "properties": {
          "path": {
            "type": "string",
            "description": "the JSON path"
          },
          "value": {
            "description": "the value",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "path"
        ]
      },
      "ApplianceNativeObject": {
        "type": "object",
        "properties": {
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceNative"
            }
          },
          "events": {
            "type": "array",
            "description": "A list of matching options for the native event. Each option can be just an appliance native object or a list of appliance native objects (i.e. this is an 'or' of 'ands').\n",
            "items": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplianceNative"
                  }
                },
                {
                  "$ref": "#/components/schemas/ApplianceNative"
                }
              ]
            }
          }
        }
      },
      "ReferenceId": {
        "title": "Reference ID",
        "description": "The ID of an entity as defined in the KitchenOS Reference Data.",
        "type": "string",
        "pattern": "^cckg:[a-zA-Z0-9]+$",
        "example": "cckg:Something"
      },
      "ApplianceCapabilitySettingNominalV1": {
        "description": "An appliance capability nominal setting.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The reference id to be used when referring to this appliance capability nominal setting."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for this appliance capability nominal setting."
          },
          "reference_setting_value_ids": {
            "type": "array",
            "description": "The list of reference data setting values or integer numeric values associated with this setting.",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ReferenceId"
                }
              ]
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          }
        },
        "required": [
          "id",
          "name",
          "native"
        ]
      },
      "ApplianceCapabilitySettingValueNominalV1": {
        "description": "An appliance capability setting value defined as a nominal.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV1"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueNumericV1": {
        "description": "An appliance capability setting value defined as numeric.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              },
              "reference_unit_id": {
                "$ref": "#/components/schemas/ReferenceId"
              },
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            },
            "required": [
              "reference_unit_id",
              "value",
              "native"
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueBooleanInternal": {
        "description": "An appliance capability setting value defined as a boolean.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          },
          "value": {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean"
              },
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            },
            "required": [
              "value",
              "native"
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueV1": {
        "description": "A capability setting value and a textual representation.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNominalV1"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericV1"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueBooleanInternal"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/ApplianceCapabilitySettingValueNominalV1",
            "numeric": "#/components/schemas/ApplianceCapabilitySettingValueNumericV1",
            "boolean": "#/components/schemas/ApplianceCapabilitySettingValueBooleanInternal"
          }
        }
      },
      "ReferenceUnitSimplified": {
        "title": "Simplified Unit without measurement system",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "Fahrenheit",
            "description": "The human-readable localised name for the Unit."
          },
          "abbreviation": {
            "type": "string",
            "example": "°F",
            "description": "The localised abbreviation."
          },
          "dimension": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ReferenceItem": {
        "title": "Item",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "description": "The human-readable localised name for the Item."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ReferenceUnit": {
        "title": "Unit",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceUnitSimplified"
          },
          {
            "type": "object",
            "properties": {
              "measurement_system": {
                "$ref": "#/components/schemas/ReferenceItem"
              }
            }
          }
        ]
      },
      "ApplianceCapabilitySettingNumericSingleUnit": {
        "description": "An appliance capability numeric setting.",
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "The minimum allowed value."
          },
          "max": {
            "type": "number",
            "description": "The maximum allowed value."
          },
          "step": {
            "type": "number",
            "description": "The step offset for the interval between min and max."
          },
          "reference_unit": {
            "$ref": "#/components/schemas/ReferenceUnit"
          }
        },
        "required": [
          "min",
          "max",
          "step",
          "reference_unit"
        ]
      },
      "ApplianceCapabilitySettingNumericSingleUnitInternal": {
        "description": "An appliance capability numeric setting with single units with native.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnit"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ],
        "required": [
          "native"
        ]
      },
      "ApplianceCapabilitySettingBoolean": {
        "description": "An appliance capability boolean setting.",
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean",
            "description": "The appliance capability setting value"
          }
        },
        "required": [
          "value"
        ]
      },
      "ApplianceCapabilitySettingBooleanInternal": {
        "description": "An appliance capability boolean setting.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingBoolean"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ],
        "required": [
          "native"
        ]
      },
      "ApplianceCapabilitySettingDependencyNumericAllowedValuesSingleUnit": {
        "description": "The appliance capability numeric setting values that applies to the constraint.",
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "description": "The minimum allowed value."
          },
          "max": {
            "type": "number",
            "description": "The maximum allowed value."
          },
          "step": {
            "type": "number",
            "description": "The step offset for the interval between min and max."
          },
          "reference_unit": {
            "$ref": "#/components/schemas/ReferenceUnit"
          }
        },
        "required": [
          "min",
          "max",
          "step",
          "reference_unit"
        ]
      },
      "ApplianceCapabilitySettingDependency": {
        "type": "object",
        "description": "An appliance capability setting constraint.",
        "properties": {
          "reference_setting_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "allowed_values": {
            "type": "object",
            "description": "The appliance capability setting values that applies to the constraint.",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceEntityId"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyNumericAllowedValuesSingleUnit"
                }
              },
              "boolean": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "reference_setting_id",
          "allowed_values"
        ]
      },
      "ApplianceCapabilitySettingV1": {
        "description": "An Appliance capability setting.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability setting."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the capability setting."
          },
          "weight": {
            "type": "string",
            "description": "A weight idea that helps clients to layout the setting in the UI.",
            "enum": [
              "kitchenos:SettingWeight:Primary",
              "kitchenos:SettingWeight:Secondary",
              "kitchenos:SettingWeight:NotShown"
            ]
          },
          "reference_setting_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "default_value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueV1"
          },
          "allowed_values": {
            "type": "object",
            "description": "The appliance capability setting allowed values.",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV1"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitInternal"
                }
              },
              "boolean": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingBooleanInternal"
                }
              }
            }
          },
          "update_allowed_in": {
            "type": "array",
            "description": "Describes on which capability states this setting can be updated with an `kitchenos:Command:Update` command.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "depends_on_setting": {
            "type": "array",
            "description": "Describes other capability settings values from the appliance capability that allows the use of this capability setting.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingDependency"
            }
          }
        },
        "required": [
          "id",
          "name",
          "weight",
          "default_value",
          "allowed_values"
        ]
      },
      "ApplianceCommandId": {
        "type": "string",
        "description": "The KitchenOS command id.\n\nThe current possible values and their meaning are:\n  * `kitchenos:Command:Start`: A command to start the execution of a capability.\n  * `kitchenos:Command:StartStagedProgram`: A command to start the execution of a staged program.\n  * `kitchenos:Command:Continue`: A command to continue the execution of a running capability after it reaches the Ready state.\n  * `kitchenos:Command:Cancel`: A command to cancel the execution of a running capability.\n  * `kitchenos:Command:Update`: A command to update the execution of a running capability.\n  * `kitchenos:Command:Pause`: A command to pause the execution of a running capability.\n  * `kitchenos:Command:Resume`: A command to resume the execution of a paused capability.\n  * `kitchenos:Command:Program`: A command to program an execution of a capability.\n  * `kitchenos:Command:Weigh`: A command to start the execution of a weighing command.\n",
        "enum": [
          "kitchenos:Command:Start",
          "kitchenos:Command:StartStagedProgram",
          "kitchenos:Command:Continue",
          "kitchenos:Command:Cancel",
          "kitchenos:Command:Update",
          "kitchenos:Command:Pause",
          "kitchenos:Command:Resume",
          "kitchenos:Command:Program",
          "kitchenos:Command:Weigh"
        ]
      },
      "ApplianceCommand": {
        "description": "An appliance capability command.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceCommandId"
          },
          "name": {
            "type": "string",
            "description": "Please use instead the call_to_action_text in allowed phases.",
            "deprecated": true
          },
          "requires_user_confirmation": {
            "type": "boolean",
            "description": "Indicates whether a confirmation should be requested before sending the command."
          }
        },
        "required": [
          "id",
          "requires_user_confirmation"
        ]
      },
      "ApplianceCapabilityStateProgressContinuous": {
        "description": "The definition of an appliance capability state continuous progress.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The appliance's capability state progress type.",
            "enum": [
              "continuous"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ApplianceCapabilityStateProgressPercentage": {
        "description": "The definition of an appliance capability state percentage progress.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The appliance's capability state progress type.",
            "enum": [
              "percentage"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ApplianceCapabilityStateProgressTimed": {
        "description": "The definition of an appliance capability state timed progress.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The appliance's capability state progress type.",
            "enum": [
              "timed"
            ]
          },
          "timer": {
            "type": "string",
            "description": "The timer counting method. The current possible values and their meaning are:\n  * remaining: The time starts with the duration and counts down to 0.\n  * elapsed: The time starts with 0 and counts up to the total duration.\n",
            "enum": [
              "remaining",
              "elapsed"
            ]
          }
        },
        "required": [
          "type",
          "timer"
        ]
      },
      "ApplianceCapabilityStateProgressTrack": {
        "description": "The definition of an appliance capability state track progress.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The appliance's capability state progress type.",
            "enum": [
              "track"
            ]
          },
          "reference_setting_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          }
        },
        "required": [
          "type",
          "reference_setting_id"
        ]
      },
      "ApplianceCapabilityStateProgress": {
        "description": "A capability state progress definition.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilityStateProgressContinuous"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilityStateProgressPercentage"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilityStateProgressTimed"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilityStateProgressTrack"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "continuous": "#/components/schemas/ApplianceCapabilityStateProgressContinuous",
            "percentage": "#/components/schemas/ApplianceCapabilityStateProgressPercentage",
            "timed": "#/components/schemas/ApplianceCapabilityStateProgressTimed",
            "track": "#/components/schemas/ApplianceCapabilityStateProgressTrack"
          }
        }
      },
      "TipData": {
        "description": "Base schema with data for tips and tip-like data",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The human readable text."
          },
          "media_type": {
            "type": "string",
            "description": "The media type for the url if present.",
            "enum": [
              "image/webp",
              "image/jpeg",
              "image/jpg",
              "image/png",
              "image/svg+xml",
              "video/webm",
              "video/mpeg",
              "video/mp4"
            ]
          },
          "url": {
            "type": "string",
            "description": "A url pointing to an associated media, it could be an image or a video."
          }
        },
        "required": [
          "text"
        ]
      },
      "ApplianceTip": {
        "description": "An Appliance tip.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "context_codes": {
                "type": "array",
                "description": "References to status contexts that map to this tip.",
                "items": {
                  "type": "string",
                  "pattern": "^kitchenos(:[a-zA-Z0-9]+){1,}$"
                }
              },
              "is_user_dismissible": {
                "type": "boolean",
                "description": "Whether the tip must be dismissed by the user or not."
              },
              "type": {
                "type": "string",
                "description": "Field to define the behavior or usage of the tip. These are the available types:\n\n  * standard: Default behavior, nothing special about the tip.\n  * pre-execution: The tip must be shown before the execution of the capability.\n",
                "enum": [
                  "standard",
                  "pre-execution"
                ]
              }
            },
            "required": [
              "is_user_dismissible",
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/TipData"
          }
        ]
      },
      "ApplianceCapabilityState": {
        "description": "An appliance capability state.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The KitchenOS capability state id.\n\nThe current possible values and their meaning are:\n  * `kitchenos:CapabilityState:Ready`: The device has reached all the conditions needed to start to cook.\n  * `kitchenos:CapabilityState:Heating`: The running capability is reaching the conditions needed to effectively start to cook.\n  * `kitchenos:CapabilityState:Cooking`: All the conditions are met so the running capability is cooking the food.\n  * `kitchenos:CapabilityState:Venting`: An special state for pressure related capabilities in which the inner pot pressure is being released.\n  * `kitchenos:CapabilityState:KeepWarm`: The cooking program has finished and the device is keeping a constant temperature for preserving the food in good conditions.\n  * `kitchenos:CapabilityState:Waiting`: The running capability is waiting for human intervention to continue.\n",
            "enum": [
              "kitchenos:CapabilityState:Ready",
              "kitchenos:CapabilityState:Heating",
              "kitchenos:CapabilityState:Cooking",
              "kitchenos:CapabilityState:Venting",
              "kitchenos:CapabilityState:KeepWarm",
              "kitchenos:CapabilityState:Waiting"
            ]
          },
          "name": {
            "type": "string",
            "description": "The human readable name for this appliance capability state."
          },
          "description": {
            "type": "string",
            "description": "A textual hint of the capability state."
          },
          "time_estimate": {
            "type": "string",
            "description": "An estimate of the time that the capability state will require.",
            "example": "About 5-10 minutes."
          },
          "stage": {
            "type": "string",
            "description": "Describes the stage in which the appliance capability state fits in the clients layout.\n\nA KitchenOS stage describes particular cosmetics and behavior that help clients to render the current \nappliance capability state properly.\n",
            "enum": [
              "kitchenos:Stage:PreCooking",
              "kitchenos:Stage:Cooking",
              "kitchenos:Stage:PostCooking"
            ]
          },
          "allowed_commands": {
            "type": "array",
            "description": "The allowed KitchenOS commands in this capability state.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCommand"
            }
          },
          "progress": {
            "$ref": "#/components/schemas/ApplianceCapabilityStateProgress"
          },
          "tips": {
            "type": "array",
            "description": "The tips associated with this appliance capability state.",
            "items": {
              "$ref": "#/components/schemas/ApplianceTip"
            }
          }
        },
        "required": [
          "id",
          "name",
          "stage",
          "progress"
        ]
      },
      "ApplianceCapabilityStateInternal": {
        "description": "An appliance capability state.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilityState"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              },
              "text_template": {
                "type": "string",
                "description": "A template to generate the textual representation of the state. The full documentation for the templates can be found in https://platform-docs.fresco-kitchenos.com/apis-and-services/appliance-profile/explanations/text-templates/",
                "example": "{capability.name}"
              }
            },
            "required": [
              "text_template"
            ]
          }
        ]
      },
      "AttachmentTip": {
        "description": "An Attachment tip.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Field to define the behavior or usage of the tip. These are the available types:\n\n  * set-up: Attachment set-up tip.\n  * take-down: Attachment take-down tip.\n",
                "enum": [
                  "set-up",
                  "take-down"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "$ref": "#/components/schemas/TipData"
          }
        ]
      },
      "Attachment": {
        "description": "An appliance attachment.",
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ],
            "description": "The reference id to be used when referring to this appliance attachment."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the attachment."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the attachment."
          },
          "origin": {
            "type": "string",
            "description": "Some attachments come with the appliance and others need to be bought separately. This field represents the origin of the attachment (examples: `standard`, `add-on`).\n"
          },
          "tips": {
            "type": "array",
            "description": "An array of tips associated with the described attachment.",
            "items": {
              "$ref": "#/components/schemas/AttachmentTip"
            }
          }
        },
        "required": [
          "id",
          "name",
          "origin"
        ],
        "example": {
          "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
          "name": "Dough hook",
          "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
          "origin": "standard",
          "tips": [
            {
              "text": "Put the dough hook in place.",
              "type": "set-up",
              "media_type": "image/svg+xml",
              "url": "https://placehold.co/400x400?text=placeholder"
            },
            {
              "text": "Take down the dough hook.",
              "type": "take-down",
              "media_type": "image/svg+xml",
              "url": "https://placehold.co/400x400?text=placeholder"
            }
          ]
        }
      },
      "ApplianceCapabilityPhase": {
        "title": "Appliance Capability phase",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "Execution",
            "description": "The human-readable name for the capability phase."
          },
          "call_to_action_text": {
            "type": "string",
            "example": "Execute Capability",
            "description": "A text to show the user on the button to start the phase"
          },
          "can_follow_phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "description": "A list of capability phases that can follow this phase"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EphemeralNotification": {
        "title": "Ephemeral Notification Definition",
        "description": "The definition of an ephemeral notification",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the notification"
              },
              "title": {
                "type": "string",
                "description": "Message shown in the title of the notification"
              }
            },
            "required": [
              "id",
              "title"
            ]
          },
          {
            "$ref": "#/components/schemas/TipData"
          }
        ]
      },
      "ApplianceCapabilityV1": {
        "description": "An Appliance capability.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the appliance capability."
          },
          "type": {
            "type": "string",
            "description": "The KitchenOS capability type.",
            "enum": [
              "kitchenos:StandardCapability",
              "kitchenos:PresetCapability",
              "kitchenos:CompositeCapability"
            ]
          },
          "reference_capability_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "settings": {
            "type": "array",
            "description": "The appliance capability settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV1"
            }
          },
          "composite_capability_ids": {
            "type": "array",
            "description": "The associated composite appliance capabilities ids for this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "states": {
            "type": "array",
            "description": "The possible capability states associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityStateInternal"
            }
          },
          "tips": {
            "type": "array",
            "description": "The tips associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceTip"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          },
          "attachments": {
            "type": "array",
            "description": "List of attachment options needed to execute this step. We only need one attachment from each array so when an array has more than one element, that means the user has to choose one of all the possible options.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "allowed_phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityPhase"
            }
          },
          "ephemeral_notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EphemeralNotification"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "settings"
        ]
      },
      "ApplianceWeighingV1": {
        "description": "Appliance weighing functionality.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the weighing."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the weighing."
          },
          "settings": {
            "type": "array",
            "description": "The appliance weighing settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV1"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          }
        },
        "required": [
          "name",
          "settings"
        ]
      },
      "ApplianceCapabilityReference": {
        "description": "An Appliance capability reference that only contains the id of the capability. The 'capabilities' section of the appliance module will have an entry with this id.\n",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the capability."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ApplianceModuleGroupWithOnlyCapabilities": {
        "description": "Groups of capabilities",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group (e.g. 'Presets')"
          },
          "capabilities": {
            "type": "array",
            "description": "Capabilities ids that belong to this group.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityReference"
            }
          }
        },
        "required": [
          "name",
          "capabilities"
        ]
      },
      "ApplianceModuleGroupWithOnlyGroups": {
        "description": "Groups to organize the appliace's module capabilities.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group (e.g. 'Standard capabilities')"
          },
          "subgroups": {
            "type": "array",
            "description": "Groups of capabilities.",
            "items": {
              "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyCapabilities"
            }
          }
        },
        "required": [
          "name",
          "subgroups"
        ]
      },
      "ApplianceModuleV1": {
        "description": "An Appliance module.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the module."
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          },
          "capabilities_title": {
            "type": "string",
            "description": "The human readable title for the module capabilities."
          },
          "capabilities": {
            "type": "array",
            "description": "The appliance capabilities.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityV1"
            }
          },
          "weighing": {
            "$ref": "#/components/schemas/ApplianceWeighingV1"
          },
          "groups": {
            "type": "array",
            "description": "Groups of capabilities that will contain either other groups or capability references (ids). There can only be two levels of nesting, so the first level will have groups, each group will have either capabilities or other groups and those groups can only have capabilities.\n",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyGroups"
                },
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyCapabilities"
                }
              ]
            }
          }
        },
        "required": [
          "capabilities"
        ]
      },
      "DeviceState": {
        "description": "An appliance state.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The KitchenOS appliance state id. While in `kitchenos:DeviceState:Running` state  the allowed command are determined by the appliance capability state.\nThe current possible values and their meaning are:\n  * `kitchenos:DeviceState:Offline`: The device is not available, there might be no internet connection, it's powered off...\n  * `kitchenos:DeviceState:Ready`: The device is available and ready to receive commands.\n  * `kitchenos:DeviceState:Programmed`: The device has been programmed to run a program or function some time later.\n  * `kitchenos:DeviceState:Running`: The device is running a program or function.\n  * `kitchenos:DeviceState:Restoring`: The device is returning back into its ready state but it can be used again to execute a new capability.\n  * `kitchenos:DeviceState:Paused`: The program or function running in the device is paused.\n  * `kitchenos:DeviceState:Blocked`: The device is available but in an special mode that requires non-remote human intervention with it.\n  * `kitchenos:DeviceState:Updating`: The device is updating the firmware.\n",
            "enum": [
              "kitchenos:DeviceState:Offline",
              "kitchenos:DeviceState:Ready",
              "kitchenos:DeviceState:Programmed",
              "kitchenos:DeviceState:Running",
              "kitchenos:DeviceState:Restoring",
              "kitchenos:DeviceState:Paused",
              "kitchenos:DeviceState:Blocked",
              "kitchenos:DeviceState:Updating"
            ]
          },
          "name": {
            "type": "string",
            "description": "The human readable name for this appliance state."
          },
          "allowed_commands": {
            "type": "array",
            "description": "The allowed KitchenOS commands in this capability state.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCommand"
            }
          },
          "with_capabilities": {
            "type": "boolean",
            "description": "Whether if the device can have capabilities or not during this state"
          }
        },
        "required": [
          "id",
          "name",
          "with_capabilities"
        ]
      },
      "DeviceStateInternal": {
        "description": "A device state.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeviceState"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ]
      },
      "StatusContext": {
        "description": "The context that a device can send during a status event",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "An appliance's Context code.",
            "pattern": "^kitchenos(:[a-zA-Z0-9]+){1,}$"
          },
          "message": {
            "description": "Context's message to give more info on what is happening with the device",
            "type": "string"
          },
          "severity": {
            "description": "Context's severity level",
            "type": "string",
            "enum": [
              "info",
              "warn",
              "error",
              "critical"
            ]
          }
        },
        "required": [
          "code",
          "message",
          "severity"
        ]
      },
      "StatusContextInternal": {
        "description": "The context that a device can send during a status event",
        "allOf": [
          {
            "$ref": "#/components/schemas/StatusContext"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ],
        "required": [
          "native"
        ]
      },
      "ApplianceFirmware": {
        "type": "object",
        "description": "Firmware related information that help clients to identify the different device workflows.",
        "properties": {
          "advertising_name": {
            "type": "string",
            "description": "A regex to identify the appliance in the discovery phase."
          },
          "available_flow": {
            "type": "object",
            "description": "Describes what flow this firmware description supports.",
            "properties": {
              "flow": {
                "type": "string",
                "enum": [
                  "kitchenos:FirmwareFlow:Legacy",
                  "kitchenos:FirmwareFlow:KitchenOS"
                ]
              },
              "transport": {
                "type": "string",
                "enum": [
                  "kitchenos:FirmwareTransportFlow:WiFi",
                  "kitchenos:FirmwareTransportFlow:BLE"
                ]
              }
            }
          }
        },
        "required": [
          "advertising_name",
          "available_flow"
        ]
      },
      "ApplianceNativeUnitsV1": {
        "type": "object",
        "description": "The translation for the Reference Unit.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          }
        },
        "required": [
          "id",
          "native"
        ]
      },
      "ApplianceAdditionalNativeData": {
        "type": "object",
        "description": "An object describing additional native information",
        "properties": {
          "commands": {
            "type": "array",
            "description": "A list of the KitchenOS Commands native translation.",
            "items": {
              "type": "object",
              "description": "An KitchenOS Command native data.",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/ApplianceCommandId"
                },
                "native": {
                  "$ref": "#/components/schemas/ApplianceNativeObject"
                }
              },
              "required": [
                "id",
                "native"
              ]
            }
          },
          "units": {
            "type": "array",
            "description": "A list of the KitchenOS Reference Data Units native translation.",
            "items": {
              "$ref": "#/components/schemas/ApplianceNativeUnitsV1"
            }
          }
        },
        "required": [
          "commands",
          "units"
        ]
      },
      "ApplianceV1": {
        "description": "An appliance profile.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The reference id to be used when referring to this appliance."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance."
          },
          "appliance_modules": {
            "type": "array",
            "description": "The appliance working modules",
            "items": {
              "$ref": "#/components/schemas/ApplianceModuleV1"
            }
          },
          "device_states": {
            "type": "array",
            "description": "The possible device states and their allowed commands.",
            "items": {
              "$ref": "#/components/schemas/DeviceStateInternal"
            }
          },
          "status_contexts": {
            "type": "array",
            "description": "The possible contexts that the device can have",
            "items": {
              "$ref": "#/components/schemas/StatusContextInternal"
            }
          },
          "reference_tag_ids": {
            "type": "array",
            "description": "A list of KitchenOS tags associated with this appliance.",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "appliance_sku_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "firmware": {
            "type": "array",
            "description": "A list of firmware related information that the Appliance supports.",
            "items": {
              "$ref": "#/components/schemas/ApplianceFirmware"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceAdditionalNativeData"
          },
          "version": {
            "type": "number",
            "description": "Version of the returned appliance profile"
          }
        },
        "required": [
          "id",
          "name",
          "appliance_modules",
          "device_states",
          "reference_tag_ids",
          "appliance_sku_id",
          "firmware",
          "native",
          "version"
        ]
      },
      "NumericReferenceSettingValueMappingSingleUnit": {
        "type": "object",
        "description": "Numeric values that map to the parent setting",
        "properties": {
          "max": {
            "type": "integer",
            "description": "Upper bound of the value range"
          },
          "min": {
            "type": "integer",
            "description": "Lower bound of the value range"
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "max",
          "min",
          "reference_unit_id"
        ]
      },
      "NumericReferenceSettingValueMappingMultipleUnits": {
        "type": "object",
        "description": "Numeric values that map to the parent setting with multiple unit systems",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/NumericReferenceSettingValueMappingSingleUnit"
          },
          "us_customary": {
            "$ref": "#/components/schemas/NumericReferenceSettingValueMappingSingleUnit"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ReferenceSettingValueMappingsToNominal": {
        "description": "Mappings from general settings to appliance specific settings",
        "type": "object",
        "properties": {
          "nominal": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "cckg tag name"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "numeric": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NumericReferenceSettingValueMappingSingleUnit"
              },
              {
                "$ref": "#/components/schemas/NumericReferenceSettingValueMappingMultipleUnits"
              }
            ]
          }
        }
      },
      "ApplianceCapabilitySettingNominalV2Default": {
        "description": "An appliance capability nominal setting.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The reference id to be used when referring to this appliance capability nominal setting."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for this appliance capability nominal setting."
          },
          "reference_setting_value_mappings": {
            "$ref": "#/components/schemas/ReferenceSettingValueMappingsToNominal"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ApplianceCapabilitySettingValueNominalV2Default": {
        "description": "An appliance capability setting value defined as a nominal.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV2Default"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueNumericSingleUnit": {
        "type": "object",
        "description": "Default value in a unit system",
        "properties": {
          "amount": {
            "type": "number"
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "reference_unit_id",
          "amount"
        ]
      },
      "ApplianceCapabilitySettingValueNumericMultipleUnits": {
        "type": "object",
        "description": "Value in multiple unit systems.",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnit"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnit"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ApplianceCapabilitySettingValueNumericV2Default": {
        "description": "An appliance capability setting value defined as numeric.",
        "type": "object",
        "title": "Numeric",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericMultipleUnits"
              },
              {
                "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnit"
              }
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueBoolean": {
        "description": "An appliance capability setting value defined as a boolean.",
        "type": "object",
        "title": "Boolean",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          },
          "value": {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "value"
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueV2Default": {
        "description": "A capability setting value and a textual representation.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNominalV2Default"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericV2Default"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/ApplianceCapabilitySettingValueNominalV2Default",
            "numeric": "#/components/schemas/ApplianceCapabilitySettingValueNumericV2Default",
            "boolean": "#/components/schemas/ApplianceCapabilitySettingValueBoolean"
          }
        }
      },
      "ReferenceSettingValueMappingsToNumeric": {
        "description": "Mappings from general settings to appliance specific settings",
        "type": "object",
        "properties": {
          "nominal": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "cckg tag name"
                },
                "value": {
                  "type": "integer",
                  "description": "Numeric value which maps to the \"id\". Using the units of the parent"
                }
              },
              "required": [
                "id",
                "value"
              ]
            }
          }
        }
      },
      "ApplianceCapabilitySettingNumericSingleUnitV2Default": {
        "description": "An appliance capability numeric setting with single units with native.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnit"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Defines if the value given to the appliance is an integer or a float. If not present, should be treated as \"integer\"",
                "enum": [
                  "int",
                  "float"
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "reference_setting_value_mappings": {
                "$ref": "#/components/schemas/ReferenceSettingValueMappingsToNumeric"
              }
            }
          }
        ]
      },
      "ApplianceCapabilitySettingNumericMultipleUnitsV2Default": {
        "description": "An appliance capability numeric setting with multiple unit systems with native.",
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Default"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Default"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ApplianceCapabilitySettingNumericV2Default": {
        "description": "An appliance capability numeric setting.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Default"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericMultipleUnitsV2Default"
          }
        ]
      },
      "ApplianceCapabilitySettingDependencyNumericAllowedValuesMultipleUnits": {
        "description": "The appliance capability numeric setting values with multiple unit systems that applies to the constraint.",
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyNumericAllowedValuesSingleUnit"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyNumericAllowedValuesSingleUnit"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ApplianceCapabilitySettingDependencyV2": {
        "type": "object",
        "description": "An appliance capability setting constraint.",
        "properties": {
          "reference_setting_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "allowed_values": {
            "type": "object",
            "description": "The appliance capability setting values that applies to the constraint.",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceEntityId"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyNumericAllowedValuesSingleUnit"
                    },
                    {
                      "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyNumericAllowedValuesMultipleUnits"
                    }
                  ]
                }
              },
              "boolean": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "reference_setting_id",
          "allowed_values"
        ]
      },
      "ApplianceCapabilitySettingV2Default": {
        "description": "An Appliance capability setting.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability setting."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the capability setting."
          },
          "weight": {
            "type": "string",
            "description": "A weight idea that helps clients to layout the setting in the UI.",
            "enum": [
              "kitchenos:SettingWeight:Primary",
              "kitchenos:SettingWeight:Secondary",
              "kitchenos:SettingWeight:NotShown"
            ]
          },
          "reference_setting_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "default_value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueV2Default"
          },
          "allowed_values": {
            "type": "object",
            "description": "The appliance capability setting allowed values.",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV2Default"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericV2Default"
                }
              },
              "boolean": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingBoolean"
                }
              }
            }
          },
          "update_allowed_in": {
            "type": "array",
            "description": "Describes on which capability states this setting can be updated with an `kitchenos:Command:Update` command.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "depends_on_setting": {
            "type": "array",
            "description": "Describes other capability settings values from the appliance capability that allows the use of this capability setting.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyV2"
            }
          }
        },
        "required": [
          "id",
          "name",
          "weight",
          "default_value",
          "allowed_values"
        ]
      },
      "ApplianceCapabilityV2Default": {
        "description": "An Appliance capability.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the appliance capability."
          },
          "type": {
            "type": "string",
            "description": "The KitchenOS capability type.",
            "enum": [
              "kitchenos:StandardCapability",
              "kitchenos:PresetCapability",
              "kitchenos:CompositeCapability"
            ]
          },
          "reference_capability_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "settings": {
            "type": "array",
            "description": "The appliance capability settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV2Default"
            }
          },
          "composite_capability_ids": {
            "type": "array",
            "description": "The associated composite appliance capabilities ids for this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "states": {
            "type": "array",
            "description": "The possible capability states associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityState"
            }
          },
          "tips": {
            "type": "array",
            "description": "The tips associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceTip"
            }
          },
          "attachments": {
            "type": "array",
            "description": "List of attachment options needed to execute this step. We only need one attachment from each array so when an array has more than one element, that means the user has to choose one of all the possible options.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "allowed_phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityPhase"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "settings"
        ]
      },
      "ApplianceIngredientPresetConfigurationSettingValueNominal": {
        "description": "An appliance capability setting value that contains a reference to a nominal setting.",
        "type": "object",
        "title": "Nominal",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "value": {
            "type": "object",
            "properties": {
              "value_id": {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            },
            "required": [
              "value_id"
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceIngredientPresetConfigurationSettingValueBoolean": {
        "description": "An appliance capability setting value defined as a boolean.",
        "type": "object",
        "title": "Boolean",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          },
          "value": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceIngredientPresetConfigurationSetting": {
        "description": "An appliance ingredient preset configuration setting that indicates how the appliance capability needs to be configured.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "setting_id": {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            },
            "required": [
              "setting_id"
            ]
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplianceIngredientPresetConfigurationSettingValueNominal"
              },
              {
                "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericV2Default"
              },
              {
                "$ref": "#/components/schemas/ApplianceIngredientPresetConfigurationSettingValueBoolean"
              }
            ],
            "discriminator": {
              "propertyName": "type"
            }
          }
        ]
      },
      "ApplianceIngredientPresetConfigurationValue": {
        "description": "An ingredient preset configuration option.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance ingredient preset configuration."
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetConfigurationSetting"
            }
          }
        },
        "required": [
          "id",
          "name",
          "settings"
        ]
      },
      "ApplianceIngredientPresetConfiguration": {
        "description": "An Appliance ingredient preset configuration.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance ingredient preset configuration."
          },
          "values": {
            "type": "array",
            "description": "List of options available to the user that define capability settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetConfigurationValue"
            }
          }
        },
        "required": [
          "id",
          "name",
          "values"
        ]
      },
      "ApplianceIngredientPresetV2Default": {
        "description": "An Appliance ingredient preset.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance ingredient preset."
          },
          "instructions": {
            "type": "string",
            "description": "Steps the user needs to follow to prepare the ingredient before executing the ingredient preset."
          },
          "reference_ingredient_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "capability_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "configurations": {
            "type": "array",
            "description": "The appliance ingredient preset configurations.",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetConfiguration"
            }
          }
        },
        "required": [
          "id",
          "name",
          "instructions",
          "reference_ingredient_id",
          "capability_id"
        ]
      },
      "ApplianceWeighingV2Default": {
        "description": "Appliance weighing functionality.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the weighing."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the weighing."
          },
          "settings": {
            "type": "array",
            "description": "The appliance weighing settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV2Default"
            }
          }
        },
        "required": [
          "name",
          "settings"
        ]
      },
      "ApplianceModuleV2Default": {
        "description": "An Appliance module.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the module."
          },
          "capabilities_title": {
            "type": "string",
            "description": "The human readable title for the module capabilities."
          },
          "capabilities": {
            "type": "array",
            "description": "The appliance capabilities.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityV2Default"
            }
          },
          "ingredient_presets": {
            "type": "array",
            "description": "The appliance ingredient presets.",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetV2Default"
            }
          },
          "weighing": {
            "$ref": "#/components/schemas/ApplianceWeighingV2Default"
          },
          "groups": {
            "type": "array",
            "description": "Groups of capabilities that will contain either other groups or capability references (ids). There can only be two levels of nesting, so the first level will have groups, each group will have either capabilities or other groups and those groups can only have capabilities.\n",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyGroups"
                },
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyCapabilities"
                }
              ]
            }
          }
        },
        "required": [
          "capabilities"
        ]
      },
      "ApplianceV2Default": {
        "description": "An appliance profile.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The reference id to be used when referring to this appliance."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance."
          },
          "appliance_modules": {
            "type": "array",
            "description": "The appliance working modules",
            "items": {
              "$ref": "#/components/schemas/ApplianceModuleV2Default"
            }
          },
          "device_states": {
            "type": "array",
            "description": "The possible device states and their allowed commands.",
            "items": {
              "$ref": "#/components/schemas/DeviceState"
            }
          },
          "status_contexts": {
            "type": "array",
            "description": "The possible contexts that the device can have",
            "items": {
              "$ref": "#/components/schemas/StatusContext"
            }
          },
          "reference_tag_ids": {
            "type": "array",
            "description": "A list of KitchenOS tags associated with this appliance.",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "appliance_sku_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "firmware": {
            "type": "array",
            "description": "A list of firmware related information that the Appliance supports.",
            "items": {
              "$ref": "#/components/schemas/ApplianceFirmware"
            }
          },
          "version": {
            "type": "number",
            "description": "Version of the returned appliance profile"
          }
        },
        "required": [
          "id",
          "name",
          "appliance_modules",
          "device_states",
          "reference_tag_ids",
          "appliance_sku_id",
          "firmware",
          "version"
        ]
      },
      "ApplianceCapabilitySettingNominalV2Internal": {
        "description": "An appliance capability nominal setting.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV2Default"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ],
        "required": [
          "native"
        ]
      },
      "ApplianceCapabilitySettingValueNominalV2Internal": {
        "description": "An appliance capability setting value defined as a nominal.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV2Internal"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueNumericSingleUnitInternal": {
        "description": "Default value in a unit system with native.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnit"
          },
          {
            "type": "object",
            "properties": {
              "native": {
                "$ref": "#/components/schemas/ApplianceNativeObject"
              }
            }
          }
        ],
        "required": [
          "native"
        ]
      },
      "ApplianceCapabilitySettingValueNumericMultipleUnitsInternal": {
        "type": "object",
        "description": "Value in multiple unit systems.",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnitInternal"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnitInternal"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ApplianceCapabilitySettingValueNumericV2Internal": {
        "description": "An appliance capability setting value defined as numeric.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericMultipleUnitsInternal"
              },
              {
                "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericSingleUnitInternal"
              }
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ApplianceCapabilitySettingValueV2Internal": {
        "description": "A capability setting value and a textual representation.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNominalV2Internal"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueNumericV2Internal"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueBooleanInternal"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/ApplianceCapabilitySettingValueNominalV2Internal",
            "numeric": "#/components/schemas/ApplianceCapabilitySettingValueNumericV2Internal",
            "boolean": "#/components/schemas/ApplianceCapabilitySettingValueBooleanInternal"
          }
        }
      },
      "ApplianceCapabilitySettingNumericSingleUnitV2Internal": {
        "description": "An appliance capability numeric setting with single units with native.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitInternal"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Defines if the value given to the appliance is an integer or a float. If not present, should be treated as \"integer\"",
                "enum": [
                  "int",
                  "float"
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "reference_setting_value_mappings": {
                "$ref": "#/components/schemas/ReferenceSettingValueMappingsToNumeric"
              }
            }
          }
        ]
      },
      "ApplianceCapabilitySettingNumericMultipleUnitsV2Internal": {
        "description": "An appliance capability numeric setting with multiple unit systems with native.",
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Internal"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Internal"
          }
        },
        "required": [
          "metric",
          "us_customary"
        ]
      },
      "ApplianceCapabilitySettingNumericV2Internal": {
        "description": "An appliance capability numeric setting.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericSingleUnitV2Internal"
          },
          {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericMultipleUnitsV2Internal"
          }
        ]
      },
      "ApplianceCapabilitySettingV2Internal": {
        "description": "An Appliance capability setting.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability setting."
          },
          "description": {
            "type": "string",
            "description": "A longer description of the capability setting."
          },
          "weight": {
            "type": "string",
            "description": "A weight idea that helps clients to layout the setting in the UI.",
            "enum": [
              "kitchenos:SettingWeight:Primary",
              "kitchenos:SettingWeight:Secondary",
              "kitchenos:SettingWeight:NotShown"
            ]
          },
          "reference_setting_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "default_value": {
            "$ref": "#/components/schemas/ApplianceCapabilitySettingValueV2Internal"
          },
          "allowed_values": {
            "type": "object",
            "description": "The appliance capability setting allowed values.",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNominalV2Internal"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingNumericV2Internal"
                }
              },
              "boolean": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplianceCapabilitySettingBooleanInternal"
                }
              }
            }
          },
          "update_allowed_in": {
            "type": "array",
            "description": "Describes on which capability states this setting can be updated with an `kitchenos:Command:Update` command.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "depends_on_setting": {
            "type": "array",
            "description": "Describes other capability settings values from the appliance capability that allows the use of this capability setting.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingDependencyV2"
            }
          }
        },
        "required": [
          "id",
          "name",
          "weight",
          "default_value",
          "allowed_values"
        ]
      },
      "PushNotification": {
        "title": "Push Notification Definition",
        "description": "The definition of a push notification",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the notification"
          },
          "title": {
            "type": "string",
            "description": "Message shown in the title of the notification"
          },
          "text": {
            "type": "string",
            "description": "Body text of the notification"
          },
          "ttl": {
            "type": "integer",
            "description": "Time in minutes in which the notification will expire if it's not delivered"
          },
          "priority": {
            "type": "integer",
            "description": "Value between 1 and 4 representing the priority of the notification (Critical, Urgent, Standard, Low)"
          }
        },
        "required": [
          "id",
          "title",
          "text",
          "ttl",
          "priority"
        ]
      },
      "ApplianceCapabilityV2Internal": {
        "description": "An Appliance capability.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance capability."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the appliance capability."
          },
          "type": {
            "type": "string",
            "description": "The KitchenOS capability type.",
            "enum": [
              "kitchenos:StandardCapability",
              "kitchenos:PresetCapability",
              "kitchenos:CompositeCapability"
            ]
          },
          "reference_capability_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "settings": {
            "type": "array",
            "description": "The appliance capability settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV2Internal"
            }
          },
          "composite_capability_ids": {
            "type": "array",
            "description": "The associated composite appliance capabilities ids for this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceEntityId"
            }
          },
          "states": {
            "type": "array",
            "description": "The possible capability states associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityStateInternal"
            }
          },
          "tips": {
            "type": "array",
            "description": "The tips associated with this appliance capability.",
            "items": {
              "$ref": "#/components/schemas/ApplianceTip"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          },
          "attachments": {
            "type": "array",
            "description": "List of attachment options needed to execute this step. We only need one attachment from each array so when an array has more than one element, that means the user has to choose one of all the possible options.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "allowed_phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityPhase"
            }
          },
          "ephemeral_notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EphemeralNotification"
            }
          },
          "push_notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PushNotification"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "settings"
        ]
      },
      "ApplianceIngredientPresetV2Internal": {
        "description": "An Appliance ingredient preset.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance ingredient preset."
          },
          "instructions": {
            "type": "string",
            "description": "Steps the user needs to follow to prepare the ingredient before executing the ingredient preset."
          },
          "reference_ingredient_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "capability_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "configurations": {
            "type": "array",
            "description": "The appliance ingredient preset configurations.",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetConfiguration"
            }
          },
          "ephemeral_notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EphemeralNotification"
            }
          },
          "push_notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PushNotification"
            }
          }
        },
        "required": [
          "id",
          "name",
          "instructions",
          "reference_ingredient_id",
          "capability_id"
        ]
      },
      "ApplianceWeighingV2Internal": {
        "description": "Appliance weighing functionality.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the weighing."
          },
          "description": {
            "type": "string",
            "description": "The human readable description for the weighing."
          },
          "settings": {
            "type": "array",
            "description": "The appliance weighing settings.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilitySettingV2Internal"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          }
        },
        "required": [
          "name",
          "settings"
        ]
      },
      "ApplianceModuleV2Internal": {
        "description": "An Appliance module.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name for the module."
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceNativeObject"
          },
          "capabilities_title": {
            "type": "string",
            "description": "The human readable title for the module capabilities."
          },
          "capabilities": {
            "type": "array",
            "description": "The appliance capabilities.",
            "items": {
              "$ref": "#/components/schemas/ApplianceCapabilityV2Internal"
            }
          },
          "ingredient_presets": {
            "type": "array",
            "description": "The appliance ingredient presets.",
            "items": {
              "$ref": "#/components/schemas/ApplianceIngredientPresetV2Internal"
            }
          },
          "weighing": {
            "$ref": "#/components/schemas/ApplianceWeighingV2Internal"
          },
          "groups": {
            "type": "array",
            "description": "Groups of capabilities that will contain either other groups or capability references (ids). There can only be two levels of nesting, so the first level will have groups, each group will have either capabilities or other groups and those groups can only have capabilities.\n",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyGroups"
                },
                {
                  "$ref": "#/components/schemas/ApplianceModuleGroupWithOnlyCapabilities"
                }
              ]
            }
          }
        },
        "required": [
          "capabilities"
        ]
      },
      "ApplianceNativeUnitsV2": {
        "description": "The translation for the Reference Unit.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplianceNativeUnitsV1"
          },
          {
            "type": "object",
            "properties": {
              "supported_by_the_appliance": {
                "type": "boolean",
                "description": "Specifies if the unit can be used to communicate with the device"
              }
            }
          }
        ],
        "required": [
          "supported_by_the_appliance"
        ]
      },
      "ApplianceAdditionalNativeDataV2Internal": {
        "type": "object",
        "description": "An object describing additional native information",
        "properties": {
          "commands": {
            "type": "array",
            "description": "A list of the KitchenOS Commands native translation.",
            "items": {
              "type": "object",
              "description": "An KitchenOS Command native data.",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/ApplianceCommandId"
                },
                "native": {
                  "$ref": "#/components/schemas/ApplianceNativeObject"
                }
              },
              "required": [
                "id",
                "native"
              ]
            }
          },
          "units": {
            "type": "array",
            "description": "A list of the KitchenOS Reference Data Units native translation.",
            "items": {
              "$ref": "#/components/schemas/ApplianceNativeUnitsV2"
            }
          }
        },
        "required": [
          "commands",
          "units"
        ]
      },
      "MatchStatement": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object",
                "properties": {
                  "is_not": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "less_than": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "greater_or_equal_than": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        "required": [
          "path",
          "value"
        ]
      },
      "Match": {
        "type": "object",
        "properties": {
          "new": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MatchStatement"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchStatement"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchStatement"
                  }
                }
              }
            ]
          },
          "old": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MatchStatement"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchStatement"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchStatement"
                  }
                }
              }
            ]
          },
          "execution": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MatchStatement"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MatchStatement"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchStatement"
                  }
                }
              }
            ]
          }
        }
      },
      "Matchable": {
        "description": "Object used to match events",
        "type": "object",
        "properties": {
          "match": {
            "$ref": "#/components/schemas/Match"
          }
        },
        "required": [
          "match"
        ]
      },
      "Action": {
        "type": "object",
        "description": "Describes an action",
        "properties": {
          "id": {
            "type": "string"
          },
          "match": {
            "$ref": "#/components/schemas/Match"
          },
          "args": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "command": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "match",
          "args"
        ]
      },
      "InternalEvent": {
        "description": "Object used to match events",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the internal event"
          },
          "match": {
            "$ref": "#/components/schemas/Match"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        },
        "required": [
          "id",
          "match",
          "actions"
        ]
      },
      "ApplianceControl": {
        "description": "Appliance internal control fields",
        "type": "object",
        "properties": {
          "preheat_ttl": {
            "type": "number",
            "description": "Time-to-live for preheat"
          },
          "handle_preheat_execution_phases": {
            "type": "boolean",
            "description": "Appliance requires command handling for pre-heat and execution phases (US ovens)"
          },
          "execution_detection": {
            "type": "object",
            "description": "Define reactions to execution processes",
            "properties": {
              "start_manual_execution": {
                "$ref": "#/components/schemas/Matchable"
              },
              "stop_execution": {
                "$ref": "#/components/schemas/Matchable"
              }
            }
          },
          "internal_events": {
            "type": "array",
            "description": "Defines internal events",
            "items": {
              "$ref": "#/components/schemas/InternalEvent"
            }
          }
        }
      },
      "ApplianceV2Internal": {
        "description": "An appliance profile.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The reference id to be used when referring to this appliance."
          },
          "name": {
            "type": "string",
            "description": "The human readable name for the appliance."
          },
          "appliance_modules": {
            "type": "array",
            "description": "The appliance working modules",
            "items": {
              "$ref": "#/components/schemas/ApplianceModuleV2Internal"
            }
          },
          "device_states": {
            "type": "array",
            "description": "The possible device states and their allowed commands.",
            "items": {
              "$ref": "#/components/schemas/DeviceStateInternal"
            }
          },
          "status_contexts": {
            "type": "array",
            "description": "The possible contexts that the device can have",
            "items": {
              "$ref": "#/components/schemas/StatusContextInternal"
            }
          },
          "reference_tag_ids": {
            "type": "array",
            "description": "A list of KitchenOS tags associated with this appliance.",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "appliance_sku_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "firmware": {
            "type": "array",
            "description": "A list of firmware related information that the Appliance supports.",
            "items": {
              "$ref": "#/components/schemas/ApplianceFirmware"
            }
          },
          "native": {
            "$ref": "#/components/schemas/ApplianceAdditionalNativeDataV2Internal"
          },
          "control": {
            "$ref": "#/components/schemas/ApplianceControl"
          },
          "version": {
            "type": "number",
            "description": "Version of the returned appliance profile"
          }
        },
        "required": [
          "id",
          "name",
          "appliance_modules",
          "device_states",
          "reference_tag_ids",
          "appliance_sku_id",
          "firmware",
          "native",
          "version"
        ]
      },
      "NotFoundErrorData": {
        "description": "Data associated with a not found error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Recipe not found."
          },
          "type": {
            "type": "string",
            "enum": [
              "NotFoundError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "NotFoundError": {
        "description": "An error indicating that the requested resource was not found.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/NotFoundErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "CollectionItem": {
        "title": "Recipe in a collection",
        "type": "object",
        "description": "A recipe as returned in a collection.",
        "properties": {
          "id": {
            "description": "The recipe's unique ID.",
            "type": "string"
          },
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "author_name": {
            "description": "The author of the recipe.",
            "type": "string"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n"
          }
        },
        "required": [
          "id",
          "name",
          "author_name",
          "total_time"
        ]
      },
      "ValidationErrorData": {
        "description": "Data associated with a validation error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "array",
            "example": [
              {
                "location": [
                  "steps",
                  0,
                  "ingredients",
                  0,
                  "quantity"
                ],
                "source": "body",
                "detail": "Field required"
              },
              {
                "location": [
                  "name"
                ],
                "source": "body",
                "detail": "Field required"
              },
              {
                "location": [
                  "difficulty"
                ],
                "source": "body",
                "detail": "Value is not a valid integer"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "location": {
                  "type": "array",
                  "description": "The location of the invalid value. If has more than one element,\nit represents a path combining keys and indexes.\n",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "example": [
                    "steps",
                    0,
                    "ingredients",
                    1,
                    "quantity"
                  ]
                },
                "source": {
                  "type": "string",
                  "enum": [
                    "path",
                    "query",
                    "body",
                    "headers"
                  ]
                },
                "detail": {
                  "type": "string",
                  "example": "Invalid parameter"
                }
              },
              "required": [
                "location",
                "source",
                "detail"
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ValidationError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "ValidationError": {
        "description": "An error indicating that the request parameters are invalid.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ValidationErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "InvalidOperationErrorData": {
        "description": "Data associated with an invalid operation error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Recipe is already published."
          },
          "type": {
            "type": "string",
            "enum": [
              "InvalidOperationError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "InvalidOperationError": {
        "description": "An error indicating that the requested operation is not valid for the requested resource.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/InvalidOperationErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "CapabilitySettingValueNominalWithRefs": {
        "description": "A capability setting value defined in KitchenOS Reference Data.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "reference_value_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          }
        },
        "required": [
          "type",
          "reference_value_id"
        ]
      },
      "ExecuteCapabilitySettingValueNumericWithRefs": {
        "description": "A capability setting value defined as a number.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "type": "number",
            "deprecated": true
          },
          "amount": {
            "type": "number"
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "type",
          "amount",
          "reference_unit_id"
        ]
      },
      "CapabilitySettingValueBoolean": {
        "description": "A capability setting value defined as a boolean.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "boolean"
            ]
          },
          "value": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ExecuteCapabilitySettingValueWithRefs": {
        "description": "A capability setting value using references to KitchenOS Reference Data.\n",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNominalWithRefs"
          },
          {
            "$ref": "#/components/schemas/ExecuteCapabilitySettingValueNumericWithRefs"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/CapabilitySettingValueNominalWithRefs",
            "numeric": "#/components/schemas/ExecuteCapabilitySettingValueNumericWithRefs",
            "boolean": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        }
      },
      "ExecuteCapabilitySettingWithRefs": {
        "description": "A setting associated with a KitchenOS Capability with some specific values for this recipe step.\n",
        "type": "object",
        "properties": {
          "reference_setting_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ExecuteCapabilitySettingValueWithRefs"
          }
        },
        "required": [
          "reference_setting_id",
          "value"
        ]
      },
      "ExecuteCapabilityWithRefs": {
        "description": "A capability used to complete a recipe step, using references to Reference Data resources.\n",
        "type": "object",
        "properties": {
          "reference_capability_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "settings": {
            "description": "A list of capability settings applied to this capability.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecuteCapabilitySettingWithRefs"
            }
          },
          "phase_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              }
            ],
            "title": "The Capability Phase for this capability",
            "description": "The Capability Phase for this capability",
            "default": "cckg:ExecutionPhase"
          }
        },
        "required": [
          "reference_capability_id"
        ]
      },
      "CapabilityExecutionCommand": {
        "title": "Capability execution command",
        "type": "object",
        "properties": {
          "command": {
            "$ref": "#/components/schemas/ApplianceCommandId"
          },
          "device_id": {
            "description": "Device ID to execute the command on.",
            "type": "string"
          },
          "appliance_module_idx": {
            "description": "The index of the appliance module to execute the command on.",
            "type": "integer",
            "default": 0
          },
          "capability": {
            "$ref": "#/components/schemas/ExecuteCapabilityWithRefs"
          },
          "composite_capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecuteCapabilityWithRefs"
            }
          }
        },
        "required": [
          "command",
          "device_id"
        ]
      },
      "DevicesWithCapabilitiesMatches": {
        "title": "The object that describes which devices to use on each recipe step with the needed attachments and commands to use when executing the step.",
        "type": "object",
        "properties": {
          "matches": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "step_position": {
                  "description": "The step position in the recipe that this match applies.",
                  "type": "integer",
                  "example": 2
                },
                "device_id": {
                  "description": "The device ID that can be used for the capability.",
                  "type": "string",
                  "example": "device-123"
                },
                "appliance_module_idx": {
                  "description": "The index of the appliance module that can be used for the capability.",
                  "type": "integer"
                },
                "attachments": {
                  "description": "List of attachment options needed to execute this step. We only need one attachment from each array so when an array has more than one element, that means the user has to choose one of all the possible options.\n",
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Attachment"
                    }
                  }
                },
                "command": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CapabilityExecutionCommand"
                    }
                  ],
                  "description": "The device command that needs to be sent by clients when executing this step. This describes the payload to be used in the execute-capability endpoint."
                }
              },
              "required": [
                "step_position",
                "device_id",
                "appliance_module_idx",
                "command"
              ]
            }
          }
        },
        "required": [
          "matches"
        ]
      },
      "ExecuteIngredientPresetWithRefs": {
        "type": "object",
        "description": "The ingredient preset to execute",
        "properties": {
          "ingredient_preset_id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "configurations": {
            "type": "array",
            "description": "The configurations to apply to the ingredient preset",
            "items": {
              "type": "object",
              "properties": {
                "configuration_id": {
                  "$ref": "#/components/schemas/ApplianceEntityId"
                },
                "value_id": {
                  "$ref": "#/components/schemas/ApplianceEntityId"
                }
              },
              "required": [
                "configuration_id",
                "value_id"
              ]
            }
          }
        },
        "example": {
          "ingredient_preset_id": "kitchenos:ZenKitchen:IngredientPreset:BeefRibs",
          "configurations": [
            {
              "configuration_id": "kitchenos:ZenKitchen:Amount",
              "value_id": "kitchenos:ZenKitchen:Amount:0to500g"
            }
          ]
        },
        "required": [
          "ingredient_preset_id"
        ]
      },
      "ExecutionCommand": {
        "title": "Execution command",
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The current possible values and their meaning are:\n    * `kitchenos:Command:Start`: A command to start the execution of a capability.\n    * `kitchenos:Command:StartStagedProgram`: A command to start the execution of a staged program.\n    * `kitchenos:Command:Continue`: A command to continue the execution of a running capability after it reaches the Ready state.\n    * `kitchenos:Command:Cancel`: A command to cancel the execution of a running capability.\n    * `kitchenos:Command:Update`: A command to update the execution of a running capability.\n    * `kitchenos:Command:Pause`: A command to pause the execution of a running capability.\n    * `kitchenos:Command:Resume`: A command to resume the execution of a paused capability.\n    * `kitchenos:Command:Program`: A command to program an execution of a capability.\n",
            "enum": [
              "kitchenos:Command:Start",
              "kitchenos:Command:StartStagedProgram",
              "kitchenos:Command:Continue",
              "kitchenos:Command:Cancel",
              "kitchenos:Command:Update",
              "kitchenos:Command:Pause",
              "kitchenos:Command:Resume",
              "kitchenos:Command:Program"
            ]
          },
          "device_id": {
            "description": "Device ID to execute the command on.",
            "type": "string"
          },
          "appliance_module_idx": {
            "description": "The index of the appliance module to execute the command on.",
            "type": "integer",
            "default": 0
          },
          "capability": {
            "$ref": "#/components/schemas/ExecuteCapabilityWithRefs"
          },
          "composite_capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecuteCapabilityWithRefs"
            }
          },
          "ingredient_preset": {
            "$ref": "#/components/schemas/ExecuteIngredientPresetWithRefs"
          }
        },
        "required": [
          "command",
          "device_id"
        ]
      },
      "WeighableIngredient": {
        "description": "Object that indentifies an ingredient as weigable and gives the endpoint to execute the weighing.\n",
        "type": "object",
        "properties": {
          "ingredient_idx": {
            "description": "Ingredient index referencing the recipe ingredient.",
            "type": "integer"
          },
          "endpoint": {
            "description": "Endpoint to send the weighing command.\nformat: /cooking/sessions/{session_id}/weighing/{ingredient_idx}/{step_pos}\n",
            "type": "string"
          }
        },
        "required": [
          "ingredient_idx",
          "endpoint"
        ]
      },
      "WeighableIngredients": {
        "description": "Object with all the information needed to weigh an ingredient.\n",
        "type": "object",
        "properties": {
          "recipe": {
            "description": "The list of weighable ingredients of the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeighableIngredient"
            }
          },
          "steps": {
            "description": "The list of weighable ingredients of each step of the recipe.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "step_position": {
                      "description": "Step position number where the ingredient is needed.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "step_position"
                  ]
                },
                {
                  "$ref": "#/components/schemas/WeighableIngredient"
                }
              ]
            }
          }
        },
        "required": [
          "recipe",
          "steps"
        ],
        "example": {
          "recipe": [
            {
              "ingredient_idx": 0,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/0"
            },
            {
              "ingredient_idx": 3,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/3"
            },
            {
              "ingredient_idx": 24,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/24"
            }
          ],
          "steps": [
            {
              "step_position": 1,
              "ingredient_idx": 0,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/0/1"
            },
            {
              "step_position": 1,
              "ingredient_idx": 3,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/3/1"
            },
            {
              "step_position": 13,
              "ingredient_idx": 24,
              "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/weighing/24/13"
            }
          ]
        }
      },
      "DeviceExecutionChoice": {
        "description": "Object with all the information needed to execute a step in a specific device and module.\n\nThis execution choice will have a `type: execution` field, this means that this step has\nan action associated with it that sends a command to the appliance.\n",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of _execution choice_ in this step. It will be a real capability execution on the\nappliance (e.g. _Bake at 350ºF for 30 minutes_).\n",
            "type": "string",
            "enum": [
              "execution"
            ]
          },
          "device_id": {
            "description": "The device ID that can be used for the step.",
            "type": "string",
            "example": "device-123"
          },
          "module_idx": {
            "description": "The index of the appliance module that can be used for the step.",
            "type": "integer",
            "example": 0
          },
          "name": {
            "description": "The name of the device and module that can be used for selection of device to execute this step.\n",
            "type": "string",
            "example": "Oven upper cavity"
          },
          "endpoint": {
            "description": "The endpoint to use to execute the step on the device and module.\n\nClients should not attempt to create this endpoint based on local values. Instead, it should be\ntreated as a black box.\n",
            "type": "string",
            "example": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abcdefg1"
          },
          "call_to_action_text": {
            "description": "Call to action to execute this step, use this text to show a button to execute the step.",
            "type": "string",
            "example": "Start Preheat"
          },
          "settings": {
            "description": "Settings in use for this step",
            "type": "array",
            "items": {
              "type": "string",
              "description": "All settings used in this step"
            },
            "example": [
              "30:00",
              "330ºF"
            ]
          }
        },
        "example": {
          "device_id": "device-123",
          "module_idx": 0,
          "name": "Oven upper cavity",
          "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/gfsfdafdl",
          "call_to_action_text": "Start Preheat",
          "settings": [
            "248ºF"
          ],
          "type": "execution"
        },
        "required": [
          "device_id",
          "module_idx",
          "name",
          "type",
          "call_to_action_text",
          "endpoint"
        ]
      },
      "DeviceExecutionChoiceAttachments": {
        "description": "Object with all the information needed to execute a step in a specific device and module.\n",
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of _execution choice_ in this step. An attachment information section where we only\nwant to show the list of attachments and their info (probably a video tip showing how to set up or\ntake down the attachment).\n\nIn this case when we use the _endpoint_ associated to this execution choice we are not doing\nanything on the appliance but selecting it for the next steps in this cooking session.\n",
            "type": "string",
            "enum": [
              "attachments"
            ]
          },
          "device_id": {
            "description": "The device ID that can be used for the step.",
            "type": "string",
            "example": "device-123"
          },
          "module_idx": {
            "description": "The index of the appliance module that can be used for the step.",
            "type": "integer",
            "example": 0
          },
          "name": {
            "description": "The name of the device and module that can be used for selection of device to execute this step.\n",
            "type": "string",
            "example": "Oven upper cavity"
          },
          "endpoint": {
            "description": "The endpoint to use to execute the step on the device and module.\n\nClients should not attempt to create this endpoint based on local values. Instead, it should be\ntreated as a black box.\n\nNotice this field is **optional**. When missing we don't want to present an action associated with\nthis step and the field `call_to_action_text` will be missing too.\n",
            "type": "string",
            "example": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abcdefg1"
          },
          "call_to_action_text": {
            "description": "Call to action to execute this step, use this text to show a button to execute the step.",
            "type": "string",
            "example": "Confirm appliance choice"
          },
          "attachments": {
            "description": "List of attachment options needed for this step. We only need one attachment from each\narray so when an array has more than one element, that means the user has to choose one of\nall the possible options.\n\nEach attachment object will only have **one** tip associated with it (either a *set-up* or a *take-down*\ntip depending on the step).\n",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        },
        "example": {
          "device_id": "device-123",
          "module_idx": 0,
          "name": "Zen mixer",
          "type": "attachments",
          "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/gfsfdafbl",
          "call_to_action_text": "Confirm appliance choice",
          "attachments": [
            [
              {
                "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                "name": "Dough hook",
                "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                "origin": "standard",
                "tips": [
                  {
                    "text": "Put the dough hook in place.",
                    "type": "set-up",
                    "media_type": "image/png",
                    "url": "https://placehold.co/400x400/png?text=how+to+put+attachment+in+place"
                  }
                ]
              }
            ]
          ]
        },
        "required": [
          "device_id",
          "module_idx",
          "name",
          "type",
          "attachments"
        ]
      },
      "CookingSessionObject": {
        "title": "Cooking Session",
        "type": "object",
        "properties": {
          "id": {
            "description": "Cooking Session ID.",
            "type": "string"
          },
          "recipe_id": {
            "description": "Recipe ID of this guided Cooking Session.",
            "type": "string"
          },
          "state": {
            "description": "Actual state of the cooking session",
            "type": "string",
            "enum": [
              "in-progress",
              "finished"
            ],
            "example": "in-progress"
          },
          "start_time": {
            "description": "Please use instead the started_at instead",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T12:43:23",
            "deprecated": true
          },
          "started_at": {
            "description": "Date & time in ISO-8601 format when this Cooking Session was created (UTC).",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-01T12:43:23"
          },
          "finished_at": {
            "description": "Date & time in ISO-8601 format when this Cooking Session was ended (UTC).",
            "type": "string",
            "format": "date-time",
            "example": "2022-02-02T12:43:23"
          },
          "weighing": {
            "$ref": "#/components/schemas/WeighableIngredients"
          },
          "step_position": {
            "description": "Current active step in the Cooking Session.",
            "type": "integer"
          },
          "execution_choices": {
            "description": "For every step (using step position as key, e.g. `\"1\"` or `\"42\"`) list information required to execute that step\n",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "For every combination of device and module there will be an object (using keys with the\nformat `{device_id}#{module_idx}`) with the needed information to execute the step.\n",
              "additionalProperties": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DeviceExecutionChoice"
                  },
                  {
                    "$ref": "#/components/schemas/DeviceExecutionChoiceAttachments"
                  }
                ]
              }
            },
            "example": {
              "1": {
                "device-123#0": {
                  "device_id": "device-123",
                  "module_idx": 0,
                  "name": "Oven upper cavity",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/gfsfdafdw",
                  "call_to_action_text": "Start Preheat",
                  "settings": [
                    "248ºF"
                  ],
                  "type": "execution"
                },
                "device-123#1": {
                  "device_id": "device-123",
                  "module_idx": 1,
                  "name": "Oven lower cavity",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/jgfr345uj35h",
                  "call_to_action_text": "Start Preheat",
                  "settings": [
                    "248ºF"
                  ],
                  "type": "execution"
                }
              },
              "13": {
                "device-123#0": {
                  "device_id": "device-123",
                  "module_idx": 0,
                  "name": "Oven upper cavity",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abcdefg1",
                  "call_to_action_text": "Start Baking",
                  "settings": [
                    "248ºF",
                    "30:00"
                  ],
                  "type": "execution"
                },
                "device-123#1": {
                  "device_id": "device-123",
                  "module_idx": 1,
                  "name": "Oven lower cavity",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abcdefg4",
                  "call_to_action_text": "Start Baking",
                  "settings": [
                    "248ºF",
                    "30:00"
                  ],
                  "type": "execution"
                }
              },
              "21": {
                "device-321#0": {
                  "device_id": "device-321",
                  "module_idx": 0,
                  "name": "Zen mixer",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abCdeHG9",
                  "call_to_action_text": "Confirm appliance choice",
                  "type": "attachments",
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/png",
                            "url": "https://placehold.co/400x400/png?text=how+to+put+attachment+in+place"
                          }
                        ]
                      }
                    ]
                  ]
                }
              },
              "22": {
                "device-321#0": {
                  "device_id": "device-321",
                  "module_idx": 0,
                  "name": "Zen mixer",
                  "endpoint": "/cooking/sessions/2LEdbGvsUHGhzv5bwQKaCQruGL1/execute-step/abCdeHG10",
                  "call_to_action_text": "Start Mix",
                  "settings": [
                    "30s",
                    "Highest"
                  ],
                  "type": "execution"
                }
              },
              "23": {
                "device-321#0": {
                  "device_id": "device-321",
                  "module_idx": 0,
                  "name": "Zen mixer",
                  "type": "attachments",
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/png",
                            "url": "https://placehold.co/400x400/png?text=how+to+remove+attachment"
                          }
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "executed_steps": {
            "description": "Array with the info of the already executed steps\n",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Object with device id, module idx and step position of the already executed steps\n",
              "properties": {
                "device_id": {
                  "description": "The device ID used for the step execution.",
                  "type": "string",
                  "example": "device-123"
                },
                "module_idx": {
                  "description": "The index of the appliance module used in the step execution.",
                  "type": "integer",
                  "example": 0
                },
                "step_position": {
                  "type": "integer",
                  "description": "Step position of the step execution.",
                  "example": 3
                }
              },
              "required": [
                "device_id",
                "module_idx",
                "step_position"
              ]
            },
            "example": [
              {
                "step_position": 1,
                "device_id": "device_123",
                "module_idx": 0
              },
              {
                "step_position": 13,
                "device_id": "device_456",
                "module_idx": 1
              }
            ]
          },
          "attachments": {
            "description": "List of attachment options needed for the recipe. We only need one attachment from each array so when an array has more than one element, that means the user has to choose one of all the possible options.\n",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        },
        "required": [
          "id",
          "recipe_id",
          "state",
          "started_at",
          "step_position"
        ]
      },
      "ReferenceData": {
        "title": "Reference Data",
        "type": "object",
        "description": "A Reference Data resource.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Author": {
        "description": "An author of a recipe.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The author's name.",
            "type": "string"
          },
          "image": {
            "description": "The author's image.",
            "type": "string",
            "format": "uri"
          },
          "url": {
            "description": "The author's website.",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "name",
          "image",
          "url"
        ]
      },
      "RecipeInCuratedCollection": {
        "type": "object",
        "description": "A recipe as returned in a Curated Collection.",
        "properties": {
          "id": {
            "description": "The recipe's unique ID.",
            "type": "string"
          },
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "reference_tags": {
            "description": "A list of tags associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceData"
            }
          },
          "ingredients_count": {
            "description": "The total number of ingredients in the recipe.",
            "type": "integer"
          },
          "steps_count": {
            "description": "The total number of steps in the recipe.",
            "type": "integer"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "state": {
            "description": "The state of the recipe.",
            "type": "string",
            "enum": [
              "draft",
              "published"
            ]
          },
          "forked_from_id": {
            "description": "The recipe from which this recipe was forked, if any.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "author",
          "ingredients_count",
          "steps_count",
          "state"
        ]
      },
      "Etag": {
        "title": "Etag",
        "description": "Identifier for a specific version of a resource.",
        "type": "string",
        "example": "1bcd5486fd6577cc48cc0ccbc363156b",
        "readOnly": true
      },
      "CuratedCollection": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The curated collection's unique ID.",
            "type": "string",
            "readOnly": true
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "title": {
            "description": "The title of the curated collection.",
            "type": "string",
            "minLength": 1
          },
          "subtitle": {
            "description": "A subtitle of the curated collection.",
            "type": "string",
            "minLength": 1
          },
          "state": {
            "description": "Indicates if the curated collection is published or draft",
            "type": "string",
            "enum": [
              "published",
              "draft"
            ]
          },
          "appliance_tag_ids": {
            "description": "List of appliance tags. Must belong to the categories cckg:ApplianceFamily or cckg:ApplianceSKU",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "writeOnly": true
          },
          "recipe_ids": {
            "type": "array",
            "uniqueItems": true,
            "description": "A list of recipe ids in the collection",
            "items": {
              "description": "The recipe's unique ID",
              "type": "string",
              "example": "34mh2p"
            },
            "writeOnly": true
          },
          "appliance_tags": {
            "description": "A list of appliance tags associated with the collection",
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ReferenceData"
            }
          },
          "recipes": {
            "type": "array",
            "uniqueItems": true,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/RecipeInCuratedCollection"
            }
          },
          "created_at": {
            "description": "Time at which the curated collection was created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "description": "Last time at which the curated collection was modified",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          }
        },
        "required": [
          "id",
          "title",
          "locale",
          "subtitle",
          "state",
          "appliance_tags",
          "recipes",
          "created_at",
          "modified_at",
          "etag",
          "appliance_tag_ids",
          "recipe_ids"
        ]
      },
      "SortOrder": {
        "title": "Sort Order",
        "description": "The sorting order.",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "CuratedCollectionSort": {
        "description": "The field and order by which the results should be ordered.\n",
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "title",
              "modified_at",
              "state",
              "recipe_count",
              "appliance_tags"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "required": [
          "field",
          "order"
        ]
      },
      "CuratedCollectionListRecipeLimit": {
        "title": "Recipe Limit",
        "description": "The max number of recipes to return for each of the curated collections in the home feed.",
        "type": "integer",
        "minimum": 1,
        "maximum": 50,
        "default": 30
      },
      "CuratedCollectionWithRecipeTotal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CuratedCollection"
          },
          {
            "type": "object",
            "properties": {
              "recipe_total": {
                "description": "The total number of recipes in the collection",
                "type": "integer"
              }
            }
          }
        ],
        "required": [
          "recipe_total"
        ]
      },
      "CuratedCollectionList": {
        "description": "KitchenOS Curated Collection List",
        "type": "object",
        "properties": {
          "items": {
            "description": "List of curated collections matching the search query (if provided) and filter parameters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CuratedCollectionWithRecipeTotal"
            }
          },
          "total": {
            "description": "The total number of curated collections in search results.",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "PreconditionFailedErrorData": {
        "description": "Data associated with a precondition failed error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Recipe updated since read."
          },
          "type": {
            "type": "string",
            "enum": [
              "PreconditionFailedError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "PreconditionFailedError": {
        "description": "An error indicating that the server does not meet one of the preconditions that the client put in its request header fields.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PreconditionFailedErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "DuplicationCuratedCollectionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The curated collection's unique ID.",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "appliance_tag_ids": {
            "description": "List of appliance tags. Must belong to the categories cckg:ApplianceFamily or cckg:ApplianceSKU",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          }
        },
        "required": [
          "id",
          "locale",
          "appliance_tag_ids"
        ]
      },
      "ApplianceTagsChangeReport": {
        "type": "object",
        "properties": {
          "original_appliance_tags": {
            "description": "List of tags in the recipe before the modification",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "target_appliance_tags": {
            "description": "List of tags in the recipe after the modification. Adding new required tags without removing existing ones.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "change_success": {
            "description": "Indicates whether the target recipe's appliance tags have been successfully changed (true) or not (false)",
            "type": "boolean"
          }
        },
        "required": [
          "original_appliance_tags",
          "target_appliance_tags",
          "change_success"
        ]
      },
      "DuplicationReportItem": {
        "type": "object",
        "properties": {
          "original_recipe": {
            "description": "Recipe in the original curated collection, which may have been forked, modified, both or neither. Depending on the other fields included",
            "type": "object",
            "properties": {
              "id": {
                "description": "The recipe's unique ID.",
                "type": "string"
              },
              "name": {
                "description": "The recipe's name.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ]
          },
          "destination_recipe": {
            "description": "Recipe ID used in the new curated collection. It may be the same as the original_recipe, or a fork. If it is a fork, it may be a preexisting fork or a new one.",
            "type": "object",
            "properties": {
              "id": {
                "description": "The recipe's unique ID.",
                "type": "string"
              },
              "name": {
                "description": "The recipe's name.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ]
          },
          "newly_forked": {
            "description": "If true, the recipe was forked specifically for the new curated collection, otherwise no new forking operation happened.",
            "type": "boolean"
          },
          "appliance_tags_change": {
            "description": "If a recipe is modified to change its appliance tags, this field includes information about the appliance tag changes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplianceTagsChangeReport"
            }
          }
        },
        "required": [
          "original_recipe",
          "destination_recipe",
          "newly_forked"
        ]
      },
      "CuratedCollectionDuplicationReport": {
        "type": "object",
        "properties": {
          "original": {
            "$ref": "#/components/schemas/DuplicationCuratedCollectionSummary"
          },
          "duplicate": {
            "$ref": "#/components/schemas/DuplicationCuratedCollectionSummary"
          },
          "report": {
            "description": "Includes 1 report item per recipe in the original curated collection. It reports what has happened with each recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicationReportItem"
            }
          }
        },
        "required": [
          "original",
          "duplicate",
          "report"
        ]
      },
      "FirmwareTypeEnum": {
        "title": "Firmware Type",
        "type": "string",
        "enum": [
          "micro-iot",
          "micro-mcu",
          "linux-iot"
        ]
      },
      "HomeFeedListItem": {
        "description": "KitchenOS Home Feed List Item",
        "type": "object",
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/Locale"
          }
        },
        "required": [
          "locale"
        ]
      },
      "HomeFeedList": {
        "description": "KitchenOS Home Feed List",
        "type": "object",
        "properties": {
          "total": {
            "description": "Total number of localized home feeds in the list",
            "type": "integer",
            "minimum": 0
          },
          "items": {
            "description": "List of locale names of the localized home feeds",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HomeFeedListItem"
            }
          }
        },
        "required": [
          "total",
          "items"
        ]
      },
      "HomeFeedOutput": {
        "type": "object",
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "items": {
            "description": "List of content rails in home feed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CuratedCollectionWithRecipeTotal"
            }
          },
          "created_at": {
            "description": "Time at which the home feed was created",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified_at": {
            "description": "Last time at which the home feed was modified",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          }
        },
        "required": [
          "locale",
          "items",
          "created_at",
          "modified_at",
          "etag"
        ]
      },
      "HomeFeedOutputWithNext": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HomeFeedOutput"
          },
          {
            "type": "object",
            "properties": {
              "next": {
                "description": "Pointer to fetch the subsequent x number of results.",
                "type": "string",
                "nullable": true
              }
            }
          }
        ],
        "required": [
          "next"
        ]
      },
      "HomeFeedOutputWithTotal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HomeFeedOutput"
          },
          {
            "type": "object",
            "properties": {
              "total": {
                "description": "The total number of contents in the home feed.",
                "type": "integer"
              }
            }
          }
        ],
        "required": [
          "total"
        ]
      },
      "PushDeviceTokenObject": {
        "title": "Push Device Token",
        "type": "object",
        "properties": {
          "token": {
            "description": "Actual Push Device Token sent by the client",
            "type": "string"
          },
          "platform": {
            "description": "Platform for which the Push Device Token was registered",
            "type": "string",
            "enum": [
              "Android",
              "iOS"
            ]
          },
          "organization_id": {
            "description": "KitchenOS organization id associated to the token",
            "type": "string"
          }
        },
        "required": [
          "token",
          "platform",
          "organization_id"
        ]
      },
      "AuthorizationCodeGrant": {
        "type": "object",
        "description": "The OAuth 2.0 authorization code grant.",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "authorization_code"
            ]
          },
          "code": {
            "type": "string",
            "description": "The authorization code, obtained from the /authorize endpoint."
          },
          "redirect_uri": {
            "type": "string",
            "format": "uri",
            "description": "The URI to redirect to after authorization."
          },
          "client_id": {
            "type": "string",
            "description": "The client ID of the app."
          }
        },
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "client_id"
        ]
      },
      "RefreshTokenGrant": {
        "type": "object",
        "description": "The OAuth 2.0 refresh token grant.",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "refresh_token"
            ]
          },
          "client_id": {
            "type": "string",
            "description": "The client ID of the app."
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token to use for refreshing the access token."
          }
        },
        "required": [
          "grant_type",
          "client_id",
          "refresh_token"
        ]
      },
      "AndroidMinimumVersion": {
        "title": "Android Minimum Version",
        "description": "Minimum version required for the organization's app",
        "type": "string",
        "pattern": "^\\d{5}$",
        "example": "18374"
      },
      "IosMinimumVersion": {
        "title": "iOS Minimum Version",
        "description": "Minimum version required for the organization's app",
        "type": "string",
        "pattern": "^\\d+\\.\\d+\\.\\d+$",
        "example": "3.3.0"
      },
      "OrganizationAppliances": {
        "description": "An organization's appliances data.",
        "type": "object",
        "properties": {
          "connected": {
            "description": "Smart kitchen appliance(s) that are fully integrated in KitchenOS, thus can be paired and controlled remotely.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "appliance_id": {
                  "$ref": "#/components/schemas/ApplianceEntityId"
                },
                "appliance_sku_id": {
                  "$ref": "#/components/schemas/ReferenceId"
                },
                "name": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "required": [
                "appliance_id",
                "appliance_sku_id",
                "name"
              ]
            }
          },
          "non_connected": {
            "type": "array",
            "description": "Kitchen appliance(s) that cannot be remotely controlled by KitchenOS but it has an entity in the system.",
            "items": {
              "type": "object",
              "properties": {
                "appliance_sku_id": {
                  "$ref": "#/components/schemas/ReferenceId"
                },
                "name": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "required": [
                "appliance_sku_id",
                "name"
              ]
            }
          }
        },
        "required": [
          "connected",
          "non_connected"
        ]
      },
      "Organization": {
        "description": "Organization's data.",
        "type": "object",
        "properties": {
          "locales": {
            "description": "Organization's locales data.",
            "type": "object",
            "properties": {
              "available": {
                "description": "List of available locales for the organization.\n",
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Locale"
                }
              },
              "enabled": {
                "type": "array",
                "description": "List of enabled locales for the organization.",
                "items": {
                  "$ref": "#/components/schemas/Locale"
                }
              },
              "default": {
                "$ref": "#/components/schemas/Locale"
              },
              "admin_enabled": {
                "description": "List of enabled locales only for the organization admins.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Locale"
                }
              }
            },
            "required": [
              "available",
              "enabled",
              "default",
              "admin_enabled"
            ]
          },
          "minimum_version": {
            "description": "Minimum version required for the organization's app.",
            "type": "object",
            "properties": {
              "android": {
                "$ref": "#/components/schemas/AndroidMinimumVersion"
              },
              "ios": {
                "$ref": "#/components/schemas/IosMinimumVersion"
              }
            },
            "required": [
              "android",
              "ios"
            ]
          },
          "appliances": {
            "description": "Organization's appliances data.\nList of available and enabled appliances for the organization.\n",
            "type": "object",
            "properties": {
              "available": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationAppliances"
                  }
                ],
                "description": "List of available appliances for the organization.\n",
                "readOnly": true
              },
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationAppliances"
                  }
                ],
                "description": "List of enabled appliances for the organization."
              },
              "admin_enabled": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationAppliances"
                  }
                ],
                "description": "List of enabled appliances for the organization admins."
              }
            },
            "required": [
              "available",
              "enabled",
              "admin_enabled"
            ]
          },
          "json_data": {
            "description": "Additional json data for the organization, such as device groups,\ndevice items and images, this field does not have a fixed structure.\n",
            "type": "object",
            "readOnly": true
          },
          "features_enabled": {
            "description": "List of features enabled for an organization.",
            "type": "array",
            "readOnly": true,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^(?:[a-z]+_)*[a-z]+$"
            }
          }
        },
        "required": [
          "locales",
          "minimum_version",
          "appliances",
          "json_data",
          "features_enabled"
        ]
      },
      "IngredientSubstituteAction": {
        "description": "Recipe Adapt instructions to substitute an ingredient.",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "kitchenos:SubstituteIngredient"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "ingredient_source_id": {
                "$ref": "#/components/schemas/ReferenceId"
              },
              "ingredient_target_id": {
                "$ref": "#/components/schemas/ReferenceId"
              }
            },
            "required": [
              "ingredient_source_id",
              "ingredient_target_id"
            ]
          }
        },
        "required": [
          "action",
          "data"
        ]
      },
      "IngredientRemovalAction": {
        "description": "Recipe Adapt instructions to remove an ingredient.",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "kitchenos:RemoveIngredient"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "ingredient_id": {
                "$ref": "#/components/schemas/ReferenceId"
              }
            },
            "required": [
              "ingredient_id"
            ]
          }
        },
        "required": [
          "action",
          "data"
        ]
      },
      "AdaptRecipeInput": {
        "description": "Recipe Adapt input",
        "type": "object",
        "properties": {
          "recipe_id": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IngredientSubstituteAction"
                },
                {
                  "$ref": "#/components/schemas/IngredientRemovalAction"
                }
              ]
            }
          }
        },
        "required": [
          "recipe_id",
          "actions"
        ]
      },
      "AdaptRecipeOutput": {
        "description": "Recipe Adapt output",
        "type": "object",
        "properties": {
          "job_id": {
            "description": "the job ID needed to poll to know the status of the adaptation operation, using the GET /assistant/jobs/ endpoint",
            "type": "string"
          }
        },
        "required": [
          "job_id"
        ]
      },
      "UnprocessableEntityErrorData": {
        "description": "Data associated with a unprocessable entity error.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "No unit was found in the 3rd ingredient line of the given recipe."
          },
          "type": {
            "type": "string",
            "enum": [
              "UnprocessableEntityError"
            ]
          },
          "correlation_id": {
            "type": "string",
            "example": "123456789",
            "description": "A unique identifier for the request. This can be used to correlate a request with a response.\n"
          }
        },
        "required": [
          "message",
          "type",
          "correlation_id"
        ]
      },
      "UnprocessableEntityError": {
        "description": "An error indicationg that the server understands the content type of the request entity, and the syntax of the request entity is correct but semantically erroneous.\n",
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/UnprocessableEntityErrorData"
          }
        },
        "required": [
          "error"
        ]
      },
      "SuggestAlternativeIngredientsInput": {
        "description": "Suggest alternative ingredients parameters",
        "type": "object",
        "properties": {
          "recipe_id": {
            "type": "string"
          },
          "ingredient_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          }
        },
        "required": [
          "recipe_id",
          "ingredient_ids"
        ]
      },
      "ReferenceIngredientSimplified": {
        "title": "Ingredient",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "dark chocolate",
            "description": "The human-readable localised name for the Ingredient."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "RecipeAdaptationJobStatus": {
        "title": "Recipe adaptation job status",
        "description": "Represents the possible statuses of a recipe adaptation job.",
        "type": "string",
        "enum": [
          "pending",
          "error",
          "running",
          "finished"
        ]
      },
      "RecipeAdaptationJob": {
        "title": "Adaptation job",
        "description": "Adaptation job",
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          },
          "recipe_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RecipeAdaptationJobStatus"
          },
          "actions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IngredientSubstituteAction"
                },
                {
                  "$ref": "#/components/schemas/IngredientRemovalAction"
                }
              ]
            }
          }
        },
        "required": [
          "job_id",
          "recipe_id",
          "status",
          "actions"
        ]
      },
      "ListRecipeAdaptationJobsOutput": {
        "description": "Get recipe adaptation job output",
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipeAdaptationJob"
            }
          }
        }
      },
      "IngredientQuantityWithRefs": {
        "description": "An ingredient quantity expressed in a unit supported in KitchenOS.",
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount of the ingredient without unit.",
            "type": "number",
            "example": 1.5
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "reference_unit_id"
        ]
      },
      "IngredientWithRefs": {
        "description": "An ingredient used in the Recipe, based on references to Reference Data resources.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "reference_ingredient_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "reference_preparation_ids": {
            "description": "A list of preparation IDs defined in the KitchenOS Reference Data.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:Sliced",
              "cckg:Tempered"
            ]
          },
          "quantity": {
            "$ref": "#/components/schemas/IngredientQuantityWithRefs"
          }
        },
        "required": [
          "reference_ingredient_id",
          "quantity"
        ]
      },
      "StepIngredientWithRefs": {
        "description": "An ingredient used in a recipe step. If quantity is not included, the complete amount will be assumed.\n",
        "type": "object",
        "properties": {
          "ingredient_idx": {
            "type": "integer",
            "description": "The index of the ingredient in the recipe ingredient list.",
            "minimum": 0
          },
          "quantity": {
            "$ref": "#/components/schemas/IngredientQuantityWithRefs"
          }
        },
        "required": [
          "ingredient_idx",
          "quantity"
        ]
      },
      "CapabilitySettingValueNumericWithRefs": {
        "description": "A capability setting value defined as a number.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "type": "number"
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "type",
          "value",
          "reference_unit_id"
        ]
      },
      "CapabilitySettingValueWithRefs": {
        "description": "A capability setting value using references to KitchenOS Reference Data.\n",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNominalWithRefs"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNumericWithRefs"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/CapabilitySettingValueNominalWithRefs",
            "numeric": "#/components/schemas/CapabilitySettingValueNumericWithRefs",
            "boolean": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        }
      },
      "CapabilitySettingWithRefs": {
        "description": "A setting associated with a KitchenOS Capability with some specific values for this recipe step.\n",
        "type": "object",
        "properties": {
          "reference_setting_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/CapabilitySettingValueWithRefs"
          }
        },
        "required": [
          "reference_setting_id",
          "value"
        ]
      },
      "CapabilityWithRefs": {
        "description": "A capability used to complete a recipe step, using references to Reference Data resources.\n",
        "type": "object",
        "properties": {
          "reference_capability_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "settings": {
            "description": "A list of capability settings applied to this capability.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilitySettingWithRefs"
            }
          },
          "phase_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              }
            ],
            "title": "The Capability Phase for this capability",
            "description": "The Capability Phase for this capability",
            "default": "cckg:ExecutionPhase"
          }
        },
        "required": [
          "reference_capability_id"
        ]
      },
      "StepWithRefs": {
        "description": "A step in the recipe, using references to Reference Data resources.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "text": {
            "description": "The text describing this Step.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "ingredients": {
            "description": "The ingredients and quantities used in this step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepIngredientWithRefs"
            }
          },
          "capability": {
            "$ref": "#/components/schemas/CapabilityWithRefs"
          }
        },
        "required": [
          "text"
        ]
      },
      "RecipeWithRefs": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "legacy_id": {
            "description": "An optional field to store legacy id. Used only when creating a Recipe.",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "ingredients": {
            "description": "The ingredients used in the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientWithRefs"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepWithRefs"
            }
          },
          "reference_tag_ids": {
            "description": "A list of tags IDs associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:Vegetarian",
              "cckg:Vegetarian"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "name",
          "locale",
          "ingredients",
          "steps",
          "author",
          "serves"
        ]
      },
      "RecipeCreateWithRefs": {
        "description": "A recipe using references to Reference Data in KitchenOS that is used when creating a recipe.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecipeWithRefs"
          },
          {
            "type": "object"
          }
        ]
      },
      "ValueWithUnitAndRefs": {
        "description": "A quantity expressed in a unit supported in KitchenOS.",
        "type": "object",
        "properties": {
          "amount": {
            "description": "The amount of the value without unit.",
            "type": "number",
            "example": 1.5
          },
          "reference_unit_id": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "reference_unit_id"
        ]
      },
      "ValueInMultipleSystemsWithRefs": {
        "description": "Value in multiple unit systems.",
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ValueWithUnitAndRefs"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ValueWithUnitAndRefs"
          }
        },
        "anyOf": [
          {
            "required": [
              "metric"
            ]
          },
          {
            "required": [
              "us_customary"
            ]
          }
        ]
      },
      "IngredientWithRefsV3": {
        "description": "An ingredient used in the Recipe, based on references to Reference Data resources.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "reference_ingredient_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "reference_preparation_ids": {
            "description": "A list of preparation IDs defined in the KitchenOS Reference Data.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:Sliced",
              "cckg:Tempered"
            ]
          },
          "quantity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystemsWithRefs"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnitAndRefs"
              }
            ]
          }
        },
        "required": [
          "reference_ingredient_id",
          "quantity"
        ]
      },
      "StepIngredientWithRefsV3": {
        "description": "An ingredient used in a recipe step.\n",
        "type": "object",
        "properties": {
          "ingredient_idx": {
            "type": "integer",
            "description": "The index of the ingredient in the recipe ingredient list.",
            "minimum": 0
          },
          "quantity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystemsWithRefs"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnitAndRefs"
              }
            ]
          }
        },
        "required": [
          "ingredient_idx",
          "quantity"
        ]
      },
      "CapabilitySettingValueNumericWithRefsV3": {
        "description": "A capability setting value defined as a number.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystemsWithRefs"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnitAndRefs"
              }
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "CapabilitySettingValueWithRefsV3": {
        "description": "A capability setting value using references to KitchenOS Reference Data.\n",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNominalWithRefs"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNumericWithRefsV3"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/CapabilitySettingValueNominalWithRefs",
            "numeric": "#/components/schemas/CapabilitySettingValueNumericWithRefsV3",
            "boolean": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        }
      },
      "CapabilitySettingWithRefsV3": {
        "description": "A setting associated with a KitchenOS Capability with some specific values for this recipe step.\n",
        "type": "object",
        "properties": {
          "reference_setting_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/CapabilitySettingValueWithRefsV3"
          }
        },
        "required": [
          "reference_setting_id",
          "value"
        ]
      },
      "CapabilityWithRefsV3": {
        "description": "A capability used to complete a recipe step, using references to Reference Data resources.\n",
        "type": "object",
        "properties": {
          "reference_capability_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityId"
              }
            ]
          },
          "settings": {
            "description": "A list of capability settings applied to this capability.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilitySettingWithRefsV3"
            }
          },
          "phase_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceId"
              }
            ],
            "title": "The Capability Phase for this capability",
            "description": "The Capability Phase for this capability",
            "default": "cckg:ExecutionPhase"
          }
        },
        "required": [
          "reference_capability_id"
        ]
      },
      "StepWithRefsV3": {
        "description": "A step in the recipe, using references to Reference Data resources.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "text": {
            "description": "The text describing this Step.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "ingredients": {
            "description": "The ingredients and quantities used in this step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepIngredientWithRefsV3"
            }
          },
          "capability": {
            "$ref": "#/components/schemas/CapabilityWithRefsV3"
          }
        },
        "required": [
          "text"
        ]
      },
      "RecipeWithRefsV3": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "legacy_id": {
            "description": "An optional field to store legacy id. Used only when creating a Recipe.",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "ingredients": {
            "description": "The ingredients used in the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientWithRefsV3"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepWithRefsV3"
            }
          },
          "reference_tag_ids": {
            "description": "A list of tags IDs associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:Vegetarian",
              "cckg:Vegetarian"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "name",
          "locale",
          "ingredients",
          "steps",
          "author",
          "serves"
        ]
      },
      "RecipeCreateWithRefsV3": {
        "description": "A recipe using references to Reference Data in KitchenOS that is used when creating a recipe.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecipeWithRefsV3"
          }
        ]
      },
      "OrganizationId": {
        "title": "Organization ID.",
        "description": "The ID of an organization defined in the KitchenOS platform.",
        "type": "string",
        "pattern": "^kitchenos(:[a-zA-Z0-9]+)$",
        "example": "kitchenos:ZenKitchen"
      },
      "ReferenceDataWithAbbreviation": {
        "title": "Reference Data with abbreviation",
        "type": "object",
        "description": "A Reference Data resource with abbreviation.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string"
          },
          "abbreviation": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "abbreviation"
        ]
      },
      "IngredientQuantity": {
        "description": "An ingredient quantity expressed in a unit supported in KitchenOS.",
        "type": "object",
        "properties": {
          "text": {
            "description": "Formatted text representation of quantity to show in UI.",
            "example": "¾ cup",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the ingredient without unit.",
            "type": "number",
            "example": 1.5
          },
          "reference_unit": {
            "$ref": "#/components/schemas/ReferenceDataWithAbbreviation"
          }
        },
        "required": [
          "text",
          "reference_unit"
        ]
      },
      "Ingredient": {
        "description": "An ingredient used in the recipe.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "reference_ingredient": {
            "$ref": "#/components/schemas/ReferenceData"
          },
          "reference_preparations": {
            "description": "A list of KitchenOS preparations to be done to this ingredient before cooking.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ReferenceData"
            }
          },
          "quantity": {
            "$ref": "#/components/schemas/IngredientQuantity"
          }
        },
        "required": [
          "reference_ingredient",
          "quantity"
        ]
      },
      "StepIngredient": {
        "description": "An ingredient used in a recipe step.",
        "type": "object",
        "properties": {
          "ingredient_idx": {
            "type": "integer",
            "description": "The index of the ingredient in the recipe ingredient list.",
            "minimum": 0
          },
          "quantity": {
            "$ref": "#/components/schemas/IngredientQuantity"
          }
        },
        "required": [
          "ingredient_idx",
          "quantity"
        ]
      },
      "ApplianceEntityData": {
        "title": "Appliance Profile Data",
        "type": "object",
        "description": "An appliance profile capability or capability setting resource.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplianceEntityId"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CapabilitySettingValueNominal": {
        "description": "A capability setting value defined in KitchenOS Reference Data.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "nominal"
            ]
          },
          "reference_value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceData"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityData"
              }
            ]
          }
        },
        "required": [
          "type",
          "reference_value"
        ]
      },
      "CapabilitySettingValueNumeric": {
        "description": "A capability setting value defined as a number.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "type": "number"
          },
          "reference_unit": {
            "$ref": "#/components/schemas/ReferenceDataWithAbbreviation"
          }
        },
        "required": [
          "type",
          "value",
          "reference_unit"
        ]
      },
      "CapabilitySettingValue": {
        "description": "A capability setting value and a textual representation.",
        "type": "object",
        "properties": {
          "text": {
            "description": "Text representation of value with user preferred units to show in UI.",
            "type": "string",
            "example": "180°F",
            "readOnly": true
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNominal"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNumeric"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/CapabilitySettingValueNominal",
            "numeric": "#/components/schemas/CapabilitySettingValueNumeric",
            "boolean": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        }
      },
      "CapabilitySetting": {
        "description": "A Setting associated with a KitchenOS Capability with some specific values for this Step Recipe.\n",
        "type": "object",
        "properties": {
          "reference_setting": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceData"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityData"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/CapabilitySettingValue"
          }
        },
        "required": [
          "reference_setting",
          "value"
        ]
      },
      "CapabilityPhase": {
        "title": "Capability phase",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "Execution",
            "description": "The human-readable name for the capability phase."
          },
          "can_follow_phases": {
            "type": "array",
            "description": "The list of phases that can come immediately before this current phase. For example, preheat phase can come before run phase.",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Capability": {
        "description": "A capability used to complete a recipe step.",
        "type": "object",
        "properties": {
          "reference_capability": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceData"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityData"
              }
            ]
          },
          "settings": {
            "description": "A list of Capability Settings applied to this Capability.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilitySetting"
            }
          },
          "phase": {
            "$ref": "#/components/schemas/CapabilityPhase"
          }
        },
        "required": [
          "reference_capability"
        ]
      },
      "Step": {
        "description": "A step in the recipe.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "text": {
            "description": "The text describing this step.",
            "type": "string"
          },
          "ingredients": {
            "description": "The ingredients and quantities used in this step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepIngredient"
            }
          },
          "capability": {
            "$ref": "#/components/schemas/Capability"
          }
        },
        "required": [
          "text"
        ]
      },
      "ReferenceTag": {
        "title": "Tag",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "description": "The human-readable localised name for the Tag."
          },
          "category": {
            "$ref": "#/components/schemas/ReferenceId"
          }
        },
        "required": [
          "id",
          "name",
          "category"
        ]
      },
      "Recipe": {
        "description": "A Recipe in KitchenOS.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The recipe's unique ID.",
            "type": "string"
          },
          "forked_from_id": {
            "description": "The recipe from which this recipe was forked, if any.",
            "type": "string"
          },
          "organization_id": {
            "$ref": "#/components/schemas/OrganizationId"
          },
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "rating": {
            "description": "The user rating of the recipe.",
            "type": "number",
            "format": "float",
            "minimum": 1,
            "maximum": 5
          },
          "state": {
            "description": "The state of the recipe.",
            "type": "string",
            "default": "draft",
            "enum": [
              "draft",
              "published"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "created_at": {
            "description": "Date and time when the recipe was added to KitchenOS.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "description": "Date and time when the recipe was last modified.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "published_at": {
            "description": "Date and time when the recipe was published.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "ingredients": {
            "description": "The ingredients used in the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ingredient"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          },
          "reference_tags": {
            "description": "A list of tags associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceTag"
            }
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "created_by_id": {
            "description": "The user that created the recipe.",
            "type": "string"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          }
        },
        "required": [
          "id",
          "name",
          "state",
          "created_at",
          "modified_at",
          "ingredients",
          "steps",
          "author",
          "created_by_id",
          "serves",
          "locale",
          "etag"
        ]
      },
      "ValueWithUnit": {
        "description": "An ingredient quantity expressed in a unit supported in KitchenOS.",
        "type": "object",
        "properties": {
          "text": {
            "description": "Formatted text representation of quantity to show in UI.",
            "example": "¾ cup",
            "type": "string",
            "readOnly": true
          },
          "amount": {
            "description": "The amount of the ingredient without unit.",
            "type": "number",
            "example": 1.5
          },
          "reference_unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReferenceDataWithAbbreviation"
              },
              {
                "$ref": "#/components/schemas/ReferenceData"
              }
            ]
          }
        },
        "required": [
          "text",
          "reference_unit"
        ]
      },
      "ValueInMultipleSystems": {
        "description": "Value in multiple unit systems.",
        "type": "object",
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/ValueWithUnit"
          },
          "us_customary": {
            "$ref": "#/components/schemas/ValueWithUnit"
          }
        },
        "anyOf": [
          {
            "required": [
              "metric"
            ]
          },
          {
            "required": [
              "us_customary"
            ]
          }
        ]
      },
      "IngredientV3": {
        "description": "An ingredient used in the recipe.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "reference_ingredient": {
            "$ref": "#/components/schemas/ReferenceData"
          },
          "reference_preparations": {
            "description": "A list of KitchenOS preparations to be done to this ingredient before cooking.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ReferenceData"
            }
          },
          "quantity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystems"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnit"
              }
            ]
          }
        },
        "required": [
          "reference_ingredient",
          "quantity"
        ]
      },
      "StepIngredientV3": {
        "description": "An ingredient used in a recipe step.",
        "type": "object",
        "properties": {
          "ingredient_idx": {
            "type": "integer",
            "description": "The index of the ingredient in the recipe ingredient list.",
            "minimum": 0
          },
          "quantity": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystems"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnit"
              }
            ]
          }
        },
        "required": [
          "ingredient_idx",
          "quantity"
        ]
      },
      "CapabilitySettingValueNumericV3": {
        "description": "A capability setting value defined as a number.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "numeric"
            ]
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ValueInMultipleSystems"
              },
              {
                "$ref": "#/components/schemas/ValueWithUnit"
              }
            ]
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "CapabilitySettingValueV3": {
        "description": "A capability setting value and a textual representation.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNominal"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueNumericV3"
          },
          {
            "$ref": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "nominal": "#/components/schemas/CapabilitySettingValueNominal",
            "numeric": "#/components/schemas/CapabilitySettingValueNumericV3",
            "boolean": "#/components/schemas/CapabilitySettingValueBoolean"
          }
        }
      },
      "CapabilitySettingV3": {
        "description": "A Setting associated with a KitchenOS Capability with some specific values for this Step Recipe.\n",
        "type": "object",
        "properties": {
          "reference_setting": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceData"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityData"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/CapabilitySettingValueV3"
          }
        },
        "required": [
          "reference_setting",
          "value"
        ]
      },
      "CapabilityV3": {
        "description": "A capability used to complete a recipe step.",
        "type": "object",
        "properties": {
          "reference_capability": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReferenceData"
              },
              {
                "$ref": "#/components/schemas/ApplianceEntityData"
              }
            ]
          },
          "settings": {
            "description": "A list of Capability Settings applied to this Capability.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilitySettingV3"
            }
          },
          "phase": {
            "$ref": "#/components/schemas/CapabilityPhase"
          }
        },
        "required": [
          "reference_capability"
        ]
      },
      "StepV3": {
        "description": "A step in the recipe.",
        "type": "object",
        "properties": {
          "source_text": {
            "description": "The original string from the source Recipe for later reference (if applies).",
            "type": "string"
          },
          "text": {
            "description": "The text describing this step.",
            "type": "string"
          },
          "ingredients": {
            "description": "The ingredients and quantities used in this step.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepIngredientV3"
            }
          },
          "capability": {
            "$ref": "#/components/schemas/CapabilityV3"
          }
        },
        "required": [
          "text"
        ]
      },
      "RecipeV3": {
        "description": "A Recipe in KitchenOS.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The recipe's unique ID.",
            "type": "string"
          },
          "forked_from_id": {
            "description": "The recipe from which this recipe was forked, if any.",
            "type": "string"
          },
          "organization_id": {
            "$ref": "#/components/schemas/OrganizationId"
          },
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "rating": {
            "description": "The user rating of the recipe.",
            "type": "number",
            "format": "float",
            "minimum": 1,
            "maximum": 5
          },
          "state": {
            "description": "The state of the recipe.",
            "type": "string",
            "default": "draft",
            "enum": [
              "draft",
              "published"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "created_at": {
            "description": "Date and time when the recipe was added to KitchenOS.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "description": "Date and time when the recipe was last modified.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "published_at": {
            "description": "Date and time when the recipe was published.",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time"
          },
          "ingredients": {
            "description": "The ingredients used in the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientV3"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepV3"
            }
          },
          "reference_tags": {
            "description": "A list of tags associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceTag"
            }
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "created_by_id": {
            "description": "The user that created the recipe.",
            "type": "string"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          },
          "etag": {
            "$ref": "#/components/schemas/Etag"
          }
        },
        "required": [
          "id",
          "name",
          "state",
          "created_at",
          "modified_at",
          "ingredients",
          "steps",
          "author",
          "created_by_id",
          "serves",
          "locale",
          "etag"
        ]
      },
      "RecipeMigrateWithRefs": {
        "description": "A recipe using references to Reference Data in KitchenOS that is used when migrating a recipe.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecipeWithRefs"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "organization_id": {
            "$ref": "#/components/schemas/OrganizationId"
          },
          "created_by_id": {
            "description": "The id of the user who created the (original) recipe.",
            "type": "string",
            "example": "06bb8732-5720-48af-a801-ac3f6aa09932"
          },
          "rating_total": {
            "description": "The total of all ratings for the recipe.",
            "type": "integer",
            "example": 524
          },
          "rating_count": {
            "description": "The number of times a rating has been added to recipe.",
            "type": "integer",
            "example": 17
          },
          "legacy_id": {
            "description": "The id of the recipe in the old system.",
            "type": "string",
            "example": "ab98762"
          }
        },
        "required": [
          "organization_id",
          "created_by_id",
          "rating_total",
          "rating_count",
          "legacy_id"
        ]
      },
      "RecipeUpdateWithRefs": {
        "description": "A recipe using references to Reference Data in KitchenOS.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "ingredients": {
            "description": "The ingredients used in the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientWithRefs"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepWithRefs"
            }
          },
          "reference_tag_ids": {
            "description": "A list of tags IDs associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:Vegetarian",
              "cckg:Vegetarian"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "name",
          "ingredients",
          "steps",
          "author",
          "serves"
        ]
      },
      "RecipeUpdateWithRefsV3": {
        "description": "A recipe using references to Reference Data in KitchenOS.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "difficulty": {
            "type": "integer",
            "description": "The difficulty associated with cooking the recipe.\n",
            "example": 3,
            "minimum": 1,
            "maximum": 5
          },
          "ingredients": {
            "description": "The ingredients used in the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientWithRefsV3"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe, containing references to Reference Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepWithRefsV3"
            }
          },
          "reference_tag_ids": {
            "description": "A list of tags IDs associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "example": [
              "cckg:ZenMixer",
              "cckg:Lunch",
              "cckg:Dinner"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "serves": {
            "description": "The number of people the recipe serves.",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "name",
          "ingredients",
          "steps",
          "author",
          "serves"
        ]
      },
      "UrlInput": {
        "description": "Url of recipe on the web",
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "RusRecipe": {
        "description": "A Recipe in KitchenOS.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The title of the recipe.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A description of the recipe."
          },
          "source_url": {
            "description": "Source URL of the recipe.",
            "type": "string",
            "format": "uri"
          },
          "prep_time": {
            "type": "string",
            "description": "Time to prepare ingredients before cooking the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT10M45S",
            "format": "duration"
          },
          "cook_time": {
            "type": "string",
            "description": "Time required to cook the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT5M",
            "format": "duration"
          },
          "total_time": {
            "type": "string",
            "description": "Total time to complete the recipe. It uses the ISO 8601 duration format as per Recipe schema.org.\n",
            "example": "PT1H20M",
            "format": "duration"
          },
          "ingredients": {
            "description": "The ingredients used in the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientV3"
            }
          },
          "steps": {
            "description": "The steps to cook the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepV3"
            }
          },
          "reference_tags": {
            "description": "A list of tags associated with the recipe.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceData"
            }
          }
        },
        "required": [
          "name",
          "ingredients",
          "steps"
        ]
      },
      "TextInput": {
        "description": "Text input",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "ingredients",
          "steps"
        ]
      },
      "ReferenceApplianceSku": {
        "title": "Appliance Stock Keeping Unit (SKU)",
        "description": "An appliance model. An SKU uniquely defines an appliance at the inventory  level.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "cckg:ZenMixer",
            "description": "The human-readable localised name for the Appliance Stock."
          },
          "appliance_families": {
            "description": "A list of appliance families this appliance SKU belongs to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceItem"
            }
          }
        },
        "required": [
          "id",
          "name",
          "appliance_families"
        ]
      },
      "ReferenceApplianceFamily": {
        "title": "Appliance Family",
        "description": "An appliance family is a grouping of appliance SKUs. An appliance family can overlap with another one.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "cckg:ZenAppliance",
            "description": "The human-readable localised name for the Appliance Family."
          },
          "appliance_skus": {
            "description": "a list of appliance SKUs that belongs to this appliance family",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceItem"
            }
          }
        },
        "required": [
          "id",
          "name",
          "appliance_skus"
        ]
      },
      "ReferenceCapabilityPhase": {
        "title": "Capability phase",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "Execution",
            "description": "The human-readable name for the capability phase."
          },
          "can_follow_phases": {
            "type": "array",
            "description": "The list of phases that can come immediately before this current phase. For example, preheat phase can come before run phase.",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          }
        },
        "required": [
          "id",
          "name",
          "can_follow_phases"
        ]
      },
      "ReferenceIngredient": {
        "title": "Ingredient",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "dark chocolate",
            "description": "The human-readable localised name for the Ingredient."
          },
          "allowed_units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceUnit"
            }
          }
        },
        "required": [
          "id",
          "name",
          "allowed_units"
        ]
      },
      "ReferencePreparation": {
        "title": "Ingredient Preparation",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "chopped",
            "description": "The human-readable localised name for the Ingredient Preparation."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ReferenceSettingValueNominal": {
        "title": "SettingValueNominal",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "low temperature",
            "description": "The human-readable localised name for the Appliance Capability Nominal Setting Value."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ReferenceSettingValueNumeric": {
        "title": "SettingValueNumeric",
        "type": "object",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/ReferenceUnit"
          }
        },
        "required": [
          "unit"
        ]
      },
      "ReferenceSettingDependency": {
        "type": "object",
        "description": "A reference setting dependency",
        "properties": {
          "reference_setting_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "allowed_values": {
            "type": "object",
            "description": "The setting values that apply to the constraint",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceId"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "min": {
                      "type": "number",
                      "description": "The minimum allowed value"
                    },
                    "max": {
                      "type": "number",
                      "description": "The maximum allowed value"
                    },
                    "reference_unit": {
                      "$ref": "#/components/schemas/ReferenceUnit"
                    }
                  },
                  "required": [
                    "min",
                    "max",
                    "reference_unit"
                  ]
                }
              },
              "boolean": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "reference_setting_id",
          "allowed_values"
        ]
      },
      "ReferenceSetting": {
        "title": "Setting",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "temperature setting",
            "description": "The human-readable localised name for the Appliance Capability Setting."
          },
          "allowed_values": {
            "type": "object",
            "properties": {
              "nominal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceSettingValueNominal"
                }
              },
              "numeric": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceSettingValueNumeric"
                }
              }
            }
          },
          "depends_on_setting": {
            "type": "array",
            "description": "Lists other settings that are required to be present before use of this setting.",
            "items": {
              "$ref": "#/components/schemas/ReferenceSettingDependency"
            }
          }
        },
        "required": [
          "id",
          "name",
          "allowed_values"
        ]
      },
      "ReferenceCapability": {
        "title": "Capability",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "bake",
            "description": "The human-readable localised name for the Appliance Capability."
          },
          "allowed_settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceSetting"
            }
          },
          "allowed_phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceCapabilityPhase"
            }
          }
        },
        "required": [
          "id",
          "name",
          "allowed_settings",
          "allowed_phases"
        ]
      },
      "ReferenceMeasurementSystem": {
        "title": "Measurement System",
        "description": "A system of measurement is a collection of units of measurement and rules relating them to each other.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "name": {
            "type": "string",
            "example": "Metric",
            "description": "The human-readable localised name for the Measurement System."
          },
          "units": {
            "description": "A list of units that belongs to this Measurement System.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceUnitSimplified"
            }
          }
        },
        "required": [
          "id",
          "name",
          "units"
        ]
      },
      "UnitSystem": {
        "title": "Unit Systems",
        "description": "Unit Systems supported on Fresco",
        "type": "string",
        "enum": [
          "cckg:MetricSystem",
          "cckg:USCustomarySystem"
        ]
      },
      "SourceUnit": {
        "description": "Source Unit",
        "type": "object",
        "properties": {
          "value": {
            "description": "The quantity of the reference entity (Ingredient/Temperature).",
            "type": "number",
            "example": 200
          },
          "unit_reference_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "unit_system_reference_id": {
            "$ref": "#/components/schemas/UnitSystem"
          },
          "context": {
            "description": "Extra context for unit conversion between different units of classes. For example Weight to Volume",
            "type": "object",
            "properties": {
              "preparation_reference_ids": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReferenceId"
                }
              },
              "ingredient_reference_id": {
                "$ref": "#/components/schemas/ReferenceId"
              },
              "capability_reference_id": {
                "$ref": "#/components/schemas/ReferenceId"
              },
              "setting_reference_id": {
                "$ref": "#/components/schemas/ReferenceId"
              }
            }
          }
        },
        "required": [
          "value",
          "unit_system_reference_id",
          "unit_reference_id"
        ]
      },
      "TargetUnit": {
        "description": "Target Unit",
        "type": "object",
        "properties": {
          "unit_system_reference_id": {
            "$ref": "#/components/schemas/UnitSystem"
          },
          "preferred_unit_reference_id": {
            "$ref": "#/components/schemas/ReferenceId"
          },
          "rounding": {
            "description": "To apply rounding in the target unit value. False for no rounding, True to apply rounding])",
            "type": "boolean",
            "example": false,
            "default": true
          }
        },
        "required": [
          "unit_system_reference_id"
        ]
      },
      "ConvertUnitsInput": {
        "description": "Convert Unit parameters",
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source_unit": {
                  "$ref": "#/components/schemas/SourceUnit"
                },
                "target_unit": {
                  "$ref": "#/components/schemas/TargetUnit"
                }
              },
              "required": [
                "source_unit",
                "target_unit"
              ]
            }
          }
        },
        "required": [
          "entities"
        ]
      },
      "ConvertUnitsOutput": {
        "description": "List of new values and units in the target system.",
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "converted_value": {
                  "description": "The Converted value in the preferred or default target unit",
                  "type": "number",
                  "example": 8
                },
                "converted_reference_unit": {
                  "$ref": "#/components/schemas/ReferenceUnitSimplified"
                },
                "converted_reference_unit_system": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              },
              "required": [
                "converted_reference_unit",
                "converted_value"
              ]
            }
          }
        },
        "required": [
          "entities"
        ]
      },
      "SearchSort": {
        "description": "The field and order by which the results should be ordered.\n",
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "created_at",
            "enum": [
              "created_at",
              "modified_at",
              "published_at",
              "organization_id",
              "forked_from_id",
              "locale",
              "state"
            ]
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "required": [
          "field",
          "order"
        ]
      },
      "SearchRecipesRequest": {
        "type": "object",
        "properties": {
          "query": {
            "description": "The search query. It will search for recipes that contain the specified terms (ANDed) in their name and in the name of the ingredients.",
            "type": "string",
            "example": "chicken pork",
            "nullable": true
          },
          "forked_from_id": {
            "description": "The id of the recipe from which the matching recipes were forked.\nUsed to get a list of recipes that were forked from the recipe with this id.\nSearch only the core or forked recipes or all.\n A core recipe in this scenario is defined as a recipe whose forked_from_id field is null.\n A non core recipe is defined as a recipe whose forked_from_id field is not null.\n  1)Recipes that are not forked - forked_from_id = null\n  2)Recipes that are forked from a specific (core) recipe - forked_from_id = abc123 (for example)\n  3)Recipes that are forked irrespective of from which recipe they are forked - forked_from_id = '*'\n  4)Ignore the fact that a recipe is forked or not - forked_from_id is not included in request.\n",
            "type": "string",
            "example": "ab73rq",
            "nullable": true
          },
          "locales": {
            "description": "If a list of one or more locales (e.g. en-US, en-AU) is provided, then the results of any search will filter those results such that only those recipes that match one of the specified locales will be included in the search results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Locale"
            },
            "example": [
              "en-US",
              "en-AU"
            ]
          },
          "tags": {
            "description": "The reference tag IDs to filter the results by. A recipe can be tagged with one or more categories, classified as either \"appliance\" or \"non-appliance\" tags.  If appliance tags are present, only recipes with at least one of these tags will appear in search results. For non-appliance tags, only recipes containing all specified tags will be included.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            }
          },
          "author": {
            "description": "The recipe author name. It will search for recipes created by this author.",
            "type": "string",
            "example": "John Doe"
          },
          "state": {
            "description": "The current state of the recipe (either draft or published).",
            "type": "string",
            "enum": [
              "draft",
              "published"
            ]
          },
          "sort": {
            "description": "The field and order by which the results should be ordered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSort"
            }
          },
          "rating": {
            "description": "The user rating of the recipe.\nWhen selecting a rating, the results will include recipes with a rating equal to or higher than the chosen value.\n",
            "type": "number",
            "minimum": 1,
            "maximum": 5,
            "multipleOf": 1
          }
        },
        "required": [
          "query"
        ]
      },
      "SearchReferenceRequestBody": {
        "type": "object",
        "properties": {
          "locale": {
            "$ref": "#/components/schemas/Locale"
          }
        }
      },
      "TermsAndConditions": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "accepted": {
            "type": "boolean"
          }
        },
        "required": [
          "accepted"
        ]
      },
      "MarketingPreferences": {
        "type": "object",
        "properties": {
          "emails_accepted": {
            "type": "boolean"
          },
          "emails_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "push_notifications_accepted": {
            "type": "boolean"
          },
          "push_notifications_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "emails_accepted",
          "push_notifications_accepted"
        ]
      },
      "Role": {
        "type": "string",
        "description": "Role of a user",
        "enum": [
          "user",
          "admin"
        ]
      },
      "TemperatureUnitId": {
        "allOf": [
          {
            "description": "The ID of a unit of temperature defined in the KitchenOS platform"
          },
          {
            "$ref": "#/components/schemas/ReferenceId"
          },
          {
            "enum": [
              "cckg:Celsius",
              "cckg:Fahrenheit"
            ]
          }
        ]
      },
      "MeasurementSystemId": {
        "allOf": [
          {
            "description": "The ID of a system of measurement defined in the KitchenOS platform"
          },
          {
            "$ref": "#/components/schemas/ReferenceId"
          },
          {
            "enum": [
              "cckg:MetricSystem",
              "cckg:USCustomarySystem"
            ]
          }
        ]
      },
      "User": {
        "description": "KitchenOS user",
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "family_name": {
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "non_connected_devices": {
            "type": "array",
            "readOnly": true,
            "description": "A list of non-connected devices that identify as devices owned by the user",
            "items": {
              "type": "object",
              "title": "NonConnectedDevice",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/ReferenceId"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the device"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "non_connected_devices_ids": {
            "description": "A list of non-connected devices ids that identify as devices owned by the user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceId"
            },
            "writeOnly": true
          },
          "devices": {
            "type": "array",
            "description": "A list of smart devices paired with the user",
            "readOnly": true,
            "items": {
              "type": "object",
              "title": "UserDevice",
              "properties": {
                "appliance": {
                  "type": "object",
                  "title": "Appliance",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/ApplianceEntityId"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the appliance"
                    },
                    "appliance_sku_id": {
                      "$ref": "#/components/schemas/ReferenceId"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "appliance_sku_id"
                  ]
                },
                "device_id": {
                  "type": "string"
                }
              },
              "required": [
                "appliance_id",
                "appliance",
                "device_id"
              ]
            }
          },
          "fresco_terms_and_conditions": {
            "description": "Status of acceptance of Fresco terms and conditions",
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsAndConditions"
              }
            ]
          },
          "organization_terms_and_conditions": {
            "description": "Status of acceptance of terms and conditions of the organization identified in the credentials",
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsAndConditions"
              }
            ]
          },
          "fresco_marketing_preferences": {
            "deprecated": true,
            "description": "Fresco marketing preferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketingPreferences"
              }
            ]
          },
          "organization_marketing_preferences": {
            "description": "Marketing preferences scoped to the organization identified in the credentials",
            "allOf": [
              {
                "$ref": "#/components/schemas/MarketingPreferences"
              }
            ]
          },
          "organization_transactional_preferences": {
            "type": "object",
            "description": "Transactional preferences scoped to the organization identified in the credentials",
            "properties": {
              "push_notifications_accepted": {
                "type": "boolean",
                "description": "Whether the user accepts push notifications from the organization",
                "default": false
              },
              "push_notifications_modified_at": {
                "type": "string",
                "description": "The date and time when the user last modified their push notification preferences",
                "format": "date-time",
                "readOnly": true
              }
            },
            "required": [
              "push_notifications_accepted"
            ]
          },
          "organization_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationId"
              },
              {
                "readOnly": true
              }
            ]
          },
          "roles": {
            "type": "array",
            "description": "A list of roles defined for the user",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "readOnly": true
          },
          "created_at": {
            "description": "Date and time when the user was added to KitchenOS",
            "example": "2022-02-22T14:54:15.793Z",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "unit_preferences": {
            "type": "object",
            "description": "User preferences for measurement system and units",
            "properties": {
              "temperature_unit": {
                "type": "object",
                "title": "TemperatureUnit",
                "description": "User preferences for temperature units",
                "readOnly": true,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/TemperatureUnitId"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of a unit of temperature"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "measurement_system": {
                "type": "object",
                "title": "MeasurementSystem",
                "description": "User preferences for the measurement system of any unit other than temperature, such as weight or volume",
                "readOnly": true,
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/MeasurementSystemId"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of a system of measurement"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "temperature_unit_id": {
                "allOf": [
                  {
                    "writeOnly": true
                  },
                  {
                    "$ref": "#/components/schemas/TemperatureUnitId"
                  }
                ]
              },
              "measurement_system_id": {
                "allOf": [
                  {
                    "writeOnly": true
                  },
                  {
                    "$ref": "#/components/schemas/MeasurementSystemId"
                  }
                ]
              }
            },
            "required": [
              "temperature_unit",
              "measurement_system",
              "temperature_unit_id",
              "measurement_system_id"
            ]
          }
        },
        "required": [
          "user_id",
          "email",
          "name",
          "family_name",
          "locale",
          "non_connected_devices",
          "non_connected_devices_ids",
          "devices",
          "fresco_terms_and_conditions",
          "organization_terms_and_conditions",
          "fresco_marketing_preferences",
          "organization_marketing_preferences",
          "organization_id",
          "roles",
          "created_at",
          "unit_preferences",
          "organization_transactional_preferences"
        ]
      },
      "GenerateAnonymousTokenRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          }
        },
        "required": [
          "client_id"
        ]
      }
    },
    "examples": {
      "appliance_list": {
        "value": {
          "items": [
            {
              "id": "kitchenos:ZenKitchen:ZenMixer",
              "name": "Zen Mixer"
            },
            {
              "id": "kitchenos:ZenKitchen:ZenPot",
              "name": "Zen Pot"
            }
          ]
        }
      },
      "ZenMixerV1": {
        "value": {
          "version": 1,
          "id": "kitchenos:ZenKitchen:ZenMixer",
          "name": "Zen Mixer",
          "appliance_modules": [
            {
              "capabilities": [
                {
                  "id": "kitchenos:ZenKitchen:Mix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:Mix",
                  "name": "Mix",
                  "description": "Combine or put together ingredients to form one substance or mass.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "value": 300,
                          "reference_unit_id": "cckg:Second",
                          "native": {
                            "commands": [
                              {
                                "path": "time"
                              }
                            ],
                            "events": [
                              {
                                "path": "time"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "time"
                                }
                              ],
                              "events": [
                                {
                                  "path": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high",
                          "native": {
                            "commands": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ],
                            "events": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_ids": [
                              "cckg:SpeedLowest"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_ids": [
                              "cckg:SpeedLow"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMediumLow"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMedium"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMediumHigh"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_ids": [
                              "cckg:SpeedHigh"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_ids": [
                              "cckg:SpeedHighest"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "name": "Cooking",
                      "text_template": "{capability.state.name}",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "cooking"
                            }
                          ]
                        ]
                      }
                    }
                  ],
                  "native": {
                    "commands": [
                      {
                        "path": "capability",
                        "value": "mix"
                      }
                    ],
                    "events": [
                      {
                        "path": "capability",
                        "value": "mix"
                      }
                    ]
                  },
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start Mix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update Mix"
                    }
                  ]
                },
                {
                  "id": "kitchenos:ZenKitchen:CookAndMix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:CookAndMix",
                  "name": "Cook And Mix",
                  "description": "Combine or put together ingredients to form one substance or mass while cooking.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "value": 300,
                          "reference_unit_id": "cckg:Second",
                          "native": {
                            "commands": [
                              {
                                "path": "time"
                              }
                            ],
                            "events": [
                              {
                                "path": "time"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "time"
                                }
                              ],
                              "events": [
                                {
                                  "path": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high",
                          "native": {
                            "commands": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ],
                            "events": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_ids": [
                              "cckg:SpeedLowest"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_ids": [
                              "cckg:SpeedLow"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMediumLow"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMedium"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_ids": [
                              "cckg:SpeedMediumHigh"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_ids": [
                              "cckg:SpeedHigh"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_ids": [
                              "cckg:SpeedHighest"
                            ],
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:TemperatureSetting",
                      "name": "Temperature",
                      "description": "Temperature",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TemperatureSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "value": 65,
                          "reference_unit_id": "cckg:Celsius",
                          "native": {
                            "commands": [
                              {
                                "path": "temperature"
                              }
                            ],
                            "events": [
                              {
                                "path": "temperature"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 40,
                            "max": 120,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Celsius",
                              "name": "Celsius",
                              "abbreviation": "°C"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "temperature"
                                }
                              ],
                              "events": [
                                {
                                  "path": "temperature"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Heating",
                      "name": "Preheating",
                      "text_template": "{capability.state.name}",
                      "stage": "kitchenos:Stage:PreCooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "continuous"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "heating"
                            }
                          ]
                        ]
                      }
                    },
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "text_template": "{capability.state.name}",
                      "name": "Cooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "cooking"
                            }
                          ]
                        ]
                      }
                    }
                  ],
                  "native": {
                    "commands": [
                      {
                        "path": "capability",
                        "value": "cook_and_mix"
                      }
                    ],
                    "events": [
                      {
                        "path": "capability",
                        "value": "cook_and_mix"
                      }
                    ]
                  },
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ],
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:HeatProtector",
                        "name": "Heat protector",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the heat protector in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the heat protector.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:PreheatInitializationPhase",
                      "name": "preheat",
                      "call_to_action_text": "Start Preheat"
                    },
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start CookAndMix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update CookAndMix"
                    }
                  ]
                }
              ],
              "groups": [
                {
                  "name": "Standard capabilities",
                  "subgroups": [
                    {
                      "name": "Mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:Mix",
                          "name": "Mix"
                        }
                      ]
                    },
                    {
                      "name": "Cook and mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:CookAndMix",
                          "name": "Cook and Mix"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Presets",
                  "capabilities": [
                    {
                      "id": "kitchenos:ZenKitchen:CookAndMix",
                      "name": "Cook and Mix"
                    }
                  ]
                }
              ],
              "weighing": {
                "name": "Weighing",
                "description": "Set a target weight to the appliance",
                "settings": [
                  {
                    "id": "kitchenos:ZenKitchen:WeightSetting",
                    "name": "Weight",
                    "description": "Weight",
                    "weight": "kitchenos:SettingWeight:Primary",
                    "reference_setting_id": "cckg:WeightSetting",
                    "default_value": {
                      "type": "numeric",
                      "value": {
                        "value": 0,
                        "reference_unit_id": "cckg:Gram",
                        "native": {
                          "commands": [
                            {
                              "path": "weight"
                            }
                          ],
                          "events": [
                            {
                              "path": "weight"
                            }
                          ]
                        }
                      }
                    },
                    "allowed_values": {
                      "numeric": [
                        {
                          "min": 0,
                          "max": 5000,
                          "step": 1,
                          "reference_unit": {
                            "id": "cckg:Gram",
                            "name": "Gram",
                            "abbreviation": "g"
                          },
                          "native": {
                            "commands": [
                              {
                                "path": "weight"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "native": {
                  "commands": [
                    {
                      "path": "capability",
                      "value": "weigh"
                    }
                  ]
                }
              }
            }
          ],
          "device_states": [
            {
              "id": "kitchenos:DeviceState:Offline",
              "name": "Disconnected",
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Ready",
              "name": "Ready",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Start",
                  "name": "Start",
                  "requires_user_confirmation": false
                }
              ],
              "native": {
                "events": [
                  {
                    "path": "state",
                    "value": "idle"
                  }
                ]
              },
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Running",
              "name": "Running",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Cancel",
                  "name": "Cancel",
                  "requires_user_confirmation": true
                },
                {
                  "id": "kitchenos:Command:Update",
                  "name": "Update",
                  "requires_user_confirmation": false
                }
              ],
              "native": {
                "events": [
                  {
                    "path": "capability",
                    "value": "mix"
                  },
                  {
                    "path": "capability",
                    "value": "cook_and_mix"
                  }
                ]
              },
              "with_capabilities": true
            }
          ],
          "reference_tag_ids": [
            "cckg:ZenMixer"
          ],
          "appliance_sku_id": "cckg:ZenMixer",
          "firmware": [
            {
              "advertising_name": "^ZenMixer$",
              "available_flow": {
                "flow": "kitchenos:FirmwareFlow:KitchenOS",
                "transport": "kitchenos:FirmwareTransportFlow:BLE"
              }
            }
          ],
          "native": {
            "commands": [
              {
                "id": "kitchenos:Command:Cancel",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "cancel"
                    }
                  ]
                }
              },
              {
                "id": "kitchenos:Command:Start",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "start"
                    }
                  ]
                }
              },
              {
                "id": "kitchenos:Command:Update",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "update"
                    }
                  ]
                }
              }
            ],
            "units": [
              {
                "id": "cckg:Celsius",
                "native": {
                  "commands": [],
                  "events": []
                }
              },
              {
                "id": "cckg:Gram",
                "native": {
                  "commands": [],
                  "events": []
                }
              }
            ]
          }
        }
      },
      "ZenMixerV2Default": {
        "value": {
          "version": 2,
          "id": "kitchenos:ZenKitchen:ZenMixer",
          "name": "Zen Mixer",
          "appliance_modules": [
            {
              "capabilities": [
                {
                  "id": "kitchenos:ZenKitchen:Mix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:Mix",
                  "name": "Mix",
                  "description": "Combine or put together ingredients to form one substance or mass.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "amount": 300,
                          "reference_unit_id": "cckg:Second"
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high"
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLow"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumLow"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMedium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumHigh"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHigh"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHighest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "name": "Cooking",
                      "text_template": "{capability.state.name}",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      }
                    }
                  ],
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start Mix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update Mix"
                    }
                  ]
                },
                {
                  "id": "kitchenos:ZenKitchen:CookAndMix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:CookAndMix",
                  "name": "Cook And Mix",
                  "description": "Combine or put together ingredients to form one substance or mass while cooking.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "amount": 300,
                          "reference_unit_id": "cckg:Second"
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high"
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLow"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumLow"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMedium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumHigh"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHigh"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHighest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:TemperatureSetting",
                      "name": "Temperature",
                      "description": "Temperature",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TemperatureSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "metric": {
                            "amount": 65,
                            "reference_unit_id": "cckg:Celsius"
                          },
                          "us_customary": {
                            "amount": 149,
                            "reference_unit_id": "cckg:Fahrenheit"
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "metric": {
                              "min": 40,
                              "max": 120,
                              "step": 1,
                              "reference_unit": {
                                "id": "cckg:Celsius",
                                "name": "Celsius",
                                "abbreviation": "°C"
                              }
                            },
                            "us_customary": {
                              "min": 104,
                              "max": 248,
                              "step": 1,
                              "reference_unit": {
                                "id": "cckg:Fahrenheit",
                                "name": "Fahrenheit",
                                "abbreviation": "°F"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Heating",
                      "name": "Preheating",
                      "text_template": "{capability.state.name}",
                      "stage": "kitchenos:Stage:PreCooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "continuous"
                      }
                    },
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "text_template": "{capability.state.name}",
                      "name": "Cooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      }
                    }
                  ],
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ],
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:HeatProtector",
                        "name": "Heat protector",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the heat protector in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the heat protector.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:PreheatInitializationPhase",
                      "name": "preheat",
                      "call_to_action_text": "Start Preheat"
                    },
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start CookAndMix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update CookAndMix"
                    }
                  ]
                }
              ],
              "ingredient_presets": [
                {
                  "id": "kitchenos:ZenKitchen:IngredientPreset:BeefRibs",
                  "name": "Beef Ribs",
                  "instructions": "Place the beef ribs with the bones facing up.",
                  "capability_id": "kitchenos:ZenKitchen:CookAndMix",
                  "reference_ingredient_id": "cckg:BeefRibs",
                  "configurations": [
                    {
                      "id": "kitchenos:ZenKitchen:Amount",
                      "name": "Amount",
                      "values": [
                        {
                          "id": "kitchenos:ZenKitchen:Amount:0to500g",
                          "name": "0-500g",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TemperatureSetting",
                              "type": "numeric",
                              "value": {
                                "metric": {
                                  "amount": 140,
                                  "reference_unit_id": "cckg:Celsius"
                                },
                                "us_customary": {
                                  "amount": 350,
                                  "reference_unit_id": "cckg:Fahrenheit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "id": "kitchenos:ZenKitchen:Amount:501to2000g",
                          "name": "501-2000g",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TemperatureSetting",
                              "type": "numeric",
                              "value": {
                                "metric": {
                                  "amount": 160,
                                  "reference_unit_id": "cckg:Celsius"
                                },
                                "us_customary": {
                                  "amount": 380,
                                  "reference_unit_id": "cckg:Fahrenheit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:Doneness",
                      "name": "Doneness",
                      "values": [
                        {
                          "id": "kitchenos:ZenKitchen:Doneness:Rare",
                          "name": "Raw",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TimeSetting",
                              "type": "numeric",
                              "value": {
                                "amount": 600,
                                "reference_unit_id": "cckg:Second"
                              }
                            }
                          ]
                        },
                        {
                          "id": "kitchenos:ZenKitchen:Doneness:Done",
                          "name": "Done",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TimeSetting",
                              "type": "numeric",
                              "value": {
                                "amount": 1400,
                                "reference_unit_id": "cckg:Second"
                              }
                            },
                            {
                              "setting_id": "kitchenos:ZenKitchen:SpeedSetting",
                              "type": "nominal",
                              "value": {
                                "value_id": "kitchenos:ZenKitchen:SpeedMediumHigh"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "groups": [
                {
                  "name": "Standard capabilities",
                  "subgroups": [
                    {
                      "name": "Mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:Mix",
                          "name": "Mix"
                        }
                      ]
                    },
                    {
                      "name": "Cook and mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:CookAndMix",
                          "name": "Cook and Mix"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Presets",
                  "capabilities": [
                    {
                      "id": "kitchenos:ZenKitchen:CookAndMix",
                      "name": "Cook and Mix"
                    }
                  ]
                }
              ],
              "weighing": {
                "name": "Weighing",
                "description": "Set a target weight to the appliance",
                "settings": [
                  {
                    "id": "kitchenos:ZenKitchen:WeightSetting",
                    "name": "Weight",
                    "description": "Weight",
                    "weight": "kitchenos:SettingWeight:Primary",
                    "reference_setting_id": "cckg:WeightSetting",
                    "default_value": {
                      "type": "numeric",
                      "value": {
                        "metric": {
                          "amount": 0,
                          "reference_unit_id": "cckg:Gram"
                        },
                        "us_customary": {
                          "amount": 0,
                          "reference_unit_id": "cckg:Ounce"
                        }
                      }
                    },
                    "allowed_values": {
                      "numeric": [
                        {
                          "metric": {
                            "min": 0,
                            "max": 5000,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Gram",
                              "name": "Gram",
                              "abbreviation": "g"
                            }
                          },
                          "us_customary": {
                            "min": 0,
                            "max": 176,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Ounce",
                              "name": "Ounce",
                              "abbreviation": "oz"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "device_states": [
            {
              "id": "kitchenos:DeviceState:Offline",
              "name": "Disconnected",
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Ready",
              "name": "Ready",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Start",
                  "name": "Start",
                  "requires_user_confirmation": false
                }
              ],
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Running",
              "name": "Running",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Cancel",
                  "name": "Cancel",
                  "requires_user_confirmation": true
                },
                {
                  "id": "kitchenos:Command:Update",
                  "name": "Update",
                  "requires_user_confirmation": false
                }
              ],
              "with_capabilities": true
            }
          ],
          "reference_tag_ids": [
            "cckg:ZenMixer"
          ],
          "appliance_sku_id": "cckg:ZenMixer",
          "firmware": [
            {
              "advertising_name": "^ZenMixer$",
              "available_flow": {
                "flow": "kitchenos:FirmwareFlow:KitchenOS",
                "transport": "kitchenos:FirmwareTransportFlow:BLE"
              }
            }
          ]
        }
      },
      "ZenMixerV2Internal": {
        "value": {
          "version": 2,
          "id": "kitchenos:ZenKitchen:ZenMixer",
          "name": "Zen Mixer",
          "appliance_modules": [
            {
              "capabilities": [
                {
                  "id": "kitchenos:ZenKitchen:Mix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:Mix",
                  "name": "Mix",
                  "description": "Combine or put together ingredients to form one substance or mass.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "amount": 300,
                          "reference_unit_id": "cckg:Second",
                          "native": {
                            "commands": [
                              {
                                "path": "time"
                              }
                            ],
                            "events": [
                              {
                                "path": "time"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "time"
                                }
                              ],
                              "events": [
                                {
                                  "path": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high",
                          "native": {
                            "commands": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ],
                            "events": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLowest"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLow"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumLow"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMedium"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumHigh"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHigh"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHighest"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "name": "Cooking",
                      "text_template": "{capability.state.name}",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "cooking"
                            }
                          ]
                        ]
                      }
                    }
                  ],
                  "native": {
                    "commands": [
                      {
                        "path": "capability",
                        "value": "mix"
                      }
                    ],
                    "events": [
                      {
                        "path": "capability",
                        "value": "mix"
                      }
                    ]
                  },
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start Mix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update Mix"
                    }
                  ],
                  "ephemeral_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your mix is done"
                    }
                  ],
                  "push_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your mix is done",
                      "ttl": 60,
                      "priority": 2
                    }
                  ]
                },
                {
                  "id": "kitchenos:ZenKitchen:CookAndMix",
                  "type": "kitchenos:StandardCapability",
                  "reference_capability_id": "cckg:CookAndMix",
                  "name": "Cook And Mix",
                  "description": "Combine or put together ingredients to form one substance or mass while cooking.",
                  "settings": [
                    {
                      "id": "kitchenos:ZenKitchen:TimeSetting",
                      "name": "Time",
                      "description": "Time",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TimeSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "amount": 300,
                          "reference_unit_id": "cckg:Second",
                          "native": {
                            "commands": [
                              {
                                "path": "time"
                              }
                            ],
                            "events": [
                              {
                                "path": "time"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "min": 0,
                            "max": 43200,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Second",
                              "name": "second",
                              "abbreviation": "s"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "time"
                                }
                              ],
                              "events": [
                                {
                                  "path": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:SpeedSetting",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:SpeedSetting",
                      "name": "Speed",
                      "default_value": {
                        "type": "nominal",
                        "value": {
                          "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                          "name": "Medium high",
                          "native": {
                            "commands": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ],
                            "events": [
                              {
                                "path": "speed",
                                "value": "medium_high"
                              }
                            ]
                          }
                        }
                      },
                      "allowed_values": {
                        "nominal": [
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLowest",
                            "name": "Lowest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLowest"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "lowest"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedLow",
                            "name": "Low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedLow"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumLow",
                            "name": "Medium low",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumLow"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_low"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMedium",
                            "name": "Medium",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMedium"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedMediumHigh",
                            "name": "Medium high",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedMediumHigh"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "medium_high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHigh",
                            "name": "High",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHigh"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "high"
                                }
                              ]
                            }
                          },
                          {
                            "id": "kitchenos:ZenKitchen:SpeedHighest",
                            "name": "Highest",
                            "reference_setting_value_mappings": {
                              "nominal": [
                                {
                                  "id": "cckg:SpeedHighest"
                                }
                              ]
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ],
                              "events": [
                                {
                                  "path": "speed",
                                  "value": "highest"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "update_allowed_in": [
                        "kitchenos:CapabilityState:Cooking"
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:TemperatureSetting",
                      "name": "Temperature",
                      "description": "Temperature",
                      "weight": "kitchenos:SettingWeight:Primary",
                      "reference_setting_id": "cckg:TemperatureSetting",
                      "default_value": {
                        "type": "numeric",
                        "value": {
                          "metric": {
                            "amount": 65,
                            "reference_unit_id": "cckg:Celsius",
                            "native": {
                              "commands": [
                                {
                                  "path": "temperature"
                                }
                              ],
                              "events": [
                                {
                                  "path": "temperature"
                                }
                              ]
                            }
                          },
                          "us_customary": {
                            "amount": 149,
                            "reference_unit_id": "cckg:Fahrenheit",
                            "native": {
                              "commands": [
                                {
                                  "path": "temperature"
                                }
                              ],
                              "events": [
                                {
                                  "path": "temperature"
                                }
                              ]
                            }
                          }
                        }
                      },
                      "allowed_values": {
                        "numeric": [
                          {
                            "metric": {
                              "min": 40,
                              "max": 120,
                              "step": 1,
                              "reference_unit": {
                                "id": "cckg:Celsius",
                                "name": "Celsius",
                                "abbreviation": "°C"
                              },
                              "native": {
                                "commands": [
                                  {
                                    "path": "temperature"
                                  }
                                ],
                                "events": [
                                  {
                                    "path": "temperature"
                                  }
                                ]
                              }
                            },
                            "us_customary": {
                              "min": 104,
                              "max": 248,
                              "step": 1,
                              "reference_unit": {
                                "id": "cckg:Fahrenheit",
                                "name": "Fahrenheit",
                                "abbreviation": "°F"
                              },
                              "native": {
                                "commands": [
                                  {
                                    "path": "temperature"
                                  }
                                ],
                                "events": [
                                  {
                                    "path": "temperature"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "states": [
                    {
                      "id": "kitchenos:CapabilityState:Heating",
                      "name": "Preheating",
                      "text_template": "{capability.state.name}",
                      "stage": "kitchenos:Stage:PreCooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "continuous"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "heating"
                            }
                          ]
                        ]
                      }
                    },
                    {
                      "id": "kitchenos:CapabilityState:Cooking",
                      "stage": "kitchenos:Stage:Cooking",
                      "text_template": "{capability.state.name}",
                      "name": "Cooking",
                      "allowed_commands": [
                        {
                          "id": "kitchenos:Command:Cancel",
                          "name": "Cancel",
                          "requires_user_confirmation": true
                        },
                        {
                          "id": "kitchenos:Command:Update",
                          "name": "Update",
                          "requires_user_confirmation": false
                        }
                      ],
                      "progress": {
                        "type": "timed",
                        "timer": "remaining"
                      },
                      "native": {
                        "events": [
                          [
                            {
                              "path": "state",
                              "value": "cooking"
                            }
                          ]
                        ]
                      }
                    }
                  ],
                  "native": {
                    "commands": [
                      {
                        "path": "capability",
                        "value": "cook_and_mix"
                      }
                    ],
                    "events": [
                      {
                        "path": "capability",
                        "value": "cook_and_mix"
                      }
                    ]
                  },
                  "attachments": [
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHook",
                        "name": "Dough hook",
                        "description": "Mixer attachment shaped like a helix (corkscrew shape) or \"C\" looking hook.",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the dough hook in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the dough hook.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      },
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:DoughHookPremium",
                        "name": "Dough hook premium",
                        "description": "Mixer attachment premium quality.",
                        "origin": "add-on",
                        "tips": [
                          {
                            "text": "Put the magnificent dough hook premium in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the lovely dough hook premium.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ],
                    [
                      {
                        "id": "kitchenos:ZenKitchen:ZenMixer:HeatProtector",
                        "name": "Heat protector",
                        "origin": "standard",
                        "tips": [
                          {
                            "text": "Put the heat protector in place.",
                            "type": "set-up",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          },
                          {
                            "text": "Take down the heat protector.",
                            "type": "take-down",
                            "media_type": "image/svg+xml",
                            "url": "https://placehold.co/400x400?text=placeholder"
                          }
                        ]
                      }
                    ]
                  ],
                  "allowed_phases": [
                    {
                      "id": "cckg:PreheatInitializationPhase",
                      "name": "preheat",
                      "call_to_action_text": "Start Preheat"
                    },
                    {
                      "id": "cckg:ExecutionPhase",
                      "name": "run",
                      "call_to_action_text": "Start CookAndMix"
                    },
                    {
                      "id": "cckg:UpdatePhase",
                      "name": "modify",
                      "call_to_action_text": "Update CookAndMix"
                    }
                  ],
                  "ephemeral_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your mix is done"
                    }
                  ],
                  "push_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your mix is done",
                      "ttl": 60,
                      "priority": 2
                    },
                    {
                      "id": "preheat_finished",
                      "title": "Preheat complete",
                      "text": "Your appliance has preheated",
                      "ttl": 60,
                      "priority": 2
                    }
                  ]
                }
              ],
              "ingredient_presets": [
                {
                  "id": "kitchenos:ZenKitchen:IngredientPreset:BeefRibs",
                  "name": "Beef Ribs",
                  "instructions": "Place the beef ribs with the bones facing up.",
                  "capability_id": "kitchenos:ZenKitchen:CookAndMix",
                  "reference_ingredient_id": "cckg:BeefRibs",
                  "configurations": [
                    {
                      "id": "kitchenos:ZenKitchen:Amount",
                      "name": "Amount",
                      "values": [
                        {
                          "id": "kitchenos:ZenKitchen:Amount:0to500g",
                          "name": "0-500g",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TemperatureSetting",
                              "type": "numeric",
                              "value": {
                                "metric": {
                                  "amount": 140,
                                  "reference_unit_id": "cckg:Celsius"
                                },
                                "us_customary": {
                                  "amount": 350,
                                  "reference_unit_id": "cckg:Fahrenheit"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "id": "kitchenos:ZenKitchen:Amount:501to2000g",
                          "name": "501-2000g",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TemperatureSetting",
                              "type": "numeric",
                              "value": {
                                "metric": {
                                  "amount": 160,
                                  "reference_unit_id": "cckg:Celsius"
                                },
                                "us_customary": {
                                  "amount": 380,
                                  "reference_unit_id": "cckg:Fahrenheit"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": "kitchenos:ZenKitchen:Doneness",
                      "name": "Doneness",
                      "values": [
                        {
                          "id": "kitchenos:ZenKitchen:Doneness:Rare",
                          "name": "Raw",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TimeSetting",
                              "type": "numeric",
                              "value": {
                                "amount": 600,
                                "reference_unit_id": "cckg:Second"
                              }
                            }
                          ]
                        },
                        {
                          "id": "kitchenos:ZenKitchen:Doneness:Done",
                          "name": "Done",
                          "settings": [
                            {
                              "setting_id": "kitchenos:ZenKitchen:TimeSetting",
                              "type": "numeric",
                              "value": {
                                "amount": 1400,
                                "reference_unit_id": "cckg:Second"
                              }
                            },
                            {
                              "setting_id": "kitchenos:ZenKitchen:SpeedSetting",
                              "type": "nominal",
                              "value": {
                                "value_id": "kitchenos:ZenKitchen:SpeedMediumHigh"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "ephemeral_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your Beef ribs are done"
                    }
                  ],
                  "push_notifications": [
                    {
                      "id": "program_finished",
                      "title": "Cooking complete",
                      "text": "Smells good, your Beef Ribs are done",
                      "ttl": 60,
                      "priority": 2
                    }
                  ]
                }
              ],
              "groups": [
                {
                  "name": "Standard capabilities",
                  "subgroups": [
                    {
                      "name": "Mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:Mix",
                          "name": "Mix"
                        }
                      ]
                    },
                    {
                      "name": "Cook and mix",
                      "capabilities": [
                        {
                          "id": "kitchenos:ZenKitchen:CookAndMix",
                          "name": "Cook and Mix"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Presets",
                  "capabilities": [
                    {
                      "id": "kitchenos:ZenKitchen:CookAndMix",
                      "name": "Cook and Mix"
                    }
                  ]
                }
              ],
              "weighing": {
                "name": "Weighing",
                "description": "Set a target weight to the appliance",
                "settings": [
                  {
                    "id": "kitchenos:ZenKitchen:WeightSetting",
                    "name": "Weight",
                    "description": "Weight",
                    "weight": "kitchenos:SettingWeight:Primary",
                    "reference_setting_id": "cckg:WeightSetting",
                    "default_value": {
                      "type": "numeric",
                      "value": {
                        "metric": {
                          "amount": 0,
                          "reference_unit_id": "cckg:Gram",
                          "native": {
                            "commands": [
                              {
                                "path": "weight"
                              }
                            ],
                            "events": [
                              {
                                "path": "weight"
                              }
                            ]
                          }
                        },
                        "us_customary": {
                          "amount": 0,
                          "reference_unit_id": "cckg:Ounce",
                          "native": {
                            "commands": [
                              {
                                "path": "weight"
                              }
                            ],
                            "events": [
                              {
                                "path": "weight"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "allowed_values": {
                      "numeric": [
                        {
                          "metric": {
                            "min": 0,
                            "max": 5000,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Gram",
                              "name": "Gram",
                              "abbreviation": "g"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "weight"
                                }
                              ]
                            }
                          },
                          "us_customary": {
                            "min": 0,
                            "max": 176,
                            "step": 1,
                            "reference_unit": {
                              "id": "cckg:Ounce",
                              "name": "Ounce",
                              "abbreviation": "oz"
                            },
                            "native": {
                              "commands": [
                                {
                                  "path": "weight"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "native": {
                  "commands": [
                    {
                      "path": "capability",
                      "value": "weigh"
                    }
                  ]
                }
              }
            }
          ],
          "device_states": [
            {
              "id": "kitchenos:DeviceState:Offline",
              "name": "Disconnected",
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Ready",
              "name": "Ready",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Start",
                  "name": "Start",
                  "requires_user_confirmation": false
                }
              ],
              "native": {
                "events": [
                  {
                    "path": "state",
                    "value": "idle"
                  }
                ]
              },
              "with_capabilities": false
            },
            {
              "id": "kitchenos:DeviceState:Running",
              "name": "Running",
              "allowed_commands": [
                {
                  "id": "kitchenos:Command:Cancel",
                  "name": "Cancel",
                  "requires_user_confirmation": true
                },
                {
                  "id": "kitchenos:Command:Update",
                  "name": "Update",
                  "requires_user_confirmation": false
                }
              ],
              "native": {
                "events": [
                  {
                    "path": "capability",
                    "value": "mix"
                  },
                  {
                    "path": "capability",
                    "value": "cook_and_mix"
                  }
                ]
              },
              "with_capabilities": true
            }
          ],
          "reference_tag_ids": [
            "cckg:ZenMixer"
          ],
          "appliance_sku_id": "cckg:ZenMixer",
          "firmware": [
            {
              "advertising_name": "^ZenMixer$",
              "available_flow": {
                "flow": "kitchenos:FirmwareFlow:KitchenOS",
                "transport": "kitchenos:FirmwareTransportFlow:BLE"
              }
            }
          ],
          "native": {
            "commands": [
              {
                "id": "kitchenos:Command:Cancel",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "cancel"
                    }
                  ]
                }
              },
              {
                "id": "kitchenos:Command:Start",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "start"
                    }
                  ]
                }
              },
              {
                "id": "kitchenos:Command:Update",
                "native": {
                  "commands": [
                    {
                      "path": "command",
                      "value": "update"
                    }
                  ]
                }
              }
            ],
            "units": [
              {
                "id": "cckg:Celsius",
                "supported_by_the_appliance": true,
                "native": {
                  "commands": [],
                  "events": []
                }
              },
              {
                "id": "cckg:Fahrenheit",
                "supported_by_the_appliance": false,
                "native": {
                  "commands": [],
                  "events": []
                }
              },
              {
                "id": "cckg:Gram",
                "supported_by_the_appliance": true,
                "native": {
                  "commands": [],
                  "events": []
                }
              },
              {
                "id": "cckg:Ounce",
                "supported_by_the_appliance": true,
                "native": {
                  "commands": [],
                  "events": []
                }
              }
            ]
          },
          "control": {
            "internal_events": [
              {
                "id": "preheat_finished",
                "match": {
                  "old": {
                    "path": "preheating",
                    "value": true
                  },
                  "new": {
                    "path": "preheating",
                    "value": false
                  }
                },
                "actions": [
                  {
                    "id": "send_push_notification",
                    "match": {},
                    "args": {
                      "name": "preheat_finished"
                    }
                  }
                ]
              },
              {
                "id": "program_finished",
                "match": {
                  "old": {
                    "path": "timer_active",
                    "value": true
                  },
                  "new": {
                    "path": "timer_active",
                    "value": false
                  }
                },
                "actions": [
                  {
                    "id": "send_push_notification",
                    "match": {},
                    "args": {
                      "name": "program_finished"
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      "collection": {
        "value": {
          "total": 45,
          "items": [
            {
              "id": "76qe2p",
              "name": "Full breakfast",
              "author_name": "Big Chef",
              "total_time": "P0DT0H25M0S"
            },
            {
              "id": "41ah8r",
              "name": "Light Lunch",
              "author_name": "The Occasional Cook",
              "total_time": "P0DT1H5M0S"
            }
          ]
        }
      },
      "organization-get": {
        "value": {
          "locales": {
            "available": [
              "en-US",
              "en-GB",
              "en-AU"
            ],
            "enabled": [
              "en-US",
              "en-GB"
            ],
            "default": "en-US",
            "admin_enabled": [
              "en-AU"
            ]
          },
          "minimum_version": {
            "android": "19706",
            "ios": "3.10.0"
          },
          "appliances": {
            "available": {
              "connected": [
                {
                  "appliance_id": "kitchenos:ZenKitchen:ZenPot",
                  "appliance_sku_id": "cckg:ZenPot",
                  "name": "Zen Pot"
                },
                {
                  "appliance_id": "kitchenos:ZenKitchen:Mixer",
                  "appliance_sku_id": "cckg:ZenMixer",
                  "name": "Zen Mixer"
                },
                {
                  "appliance_id": "kitchenos:ZenKitchen:NewConnectedAppliance",
                  "appliance_sku_id": "cckg:NewZenAppliance",
                  "name": "New appliance"
                }
              ],
              "non_connected": [
                {
                  "appliance_sku_id": "cckg:Oven",
                  "name": "Non Connected Oven"
                }
              ]
            },
            "enabled": {
              "connected": [
                {
                  "appliance_id": "kitchenos:ZenKitchen:ZenPot",
                  "appliance_sku_id": "cckg:ZenPot",
                  "name": "Zen Pot"
                }
              ],
              "non_connected": [
                {
                  "appliance_sku_id": "cckg:Oven",
                  "name": "Non Connected Oven"
                }
              ]
            },
            "admin_enabled": {
              "connected": [
                {
                  "appliance_id": "kitchenos:ZenKitchen:Mixer",
                  "appliance_sku_id": "cckg:ZenMixer",
                  "name": "Zen Mixer"
                }
              ],
              "non_connected": []
            }
          },
          "json_data": {
            "device_group": [
              {
                "group_name": "Mixer",
                "group_image": "https://configs.fresco-kitchenos.com/v1/appliances/kitchenos-zenkitchen-mixer/images/icon.webp",
                "group_connectivity_image": "https://configs.fresco-kitchenos.com/v1/appliances/kitchenos-zenkitchen-mixer/images/connected.webp",
                "has_more_items": true,
                "group_item_id": "group:Mixer"
              },
              {
                "group_name": "Pot",
                "group_image": "https://configs.fresco-kitchenos.com/v1/appliances/kitchenos-zenkitchen-pot/images/icon.webp",
                "has_more_items": false,
                "group_item_id": "group:Pot"
              },
              {
                "group_name": "Oven",
                "group_image": "https://configs.fresco-kitchenos.com/v1/appliances/kitchenos-zenkitchen-oven/images/icon.webp",
                "group_connectivity_image": "https://configs.fresco-kitchenos.com/v1/appliances/kitchenos-zenkitchen-oven/images/connected.webp",
                "has_more_items": true,
                "group_item_id": "group:Oven"
              }
            ],
            "device_items": [
              {
                "appliance_sku_id": "cckg:Oven",
                "device_name": "Non Connected Oven",
                "provisioning_mode": "NON_CONNECTED",
                "group_item_id": "group:Oven"
              },
              {
                "appliance_sku_id": "cckg:Mixer",
                "device_name": "Mixer",
                "provisioning_mode": "WIFI",
                "group_item_id": "group:Mixer",
                "appliance_id": "kitchenos:ZenKitchen:Mixer",
                "legacy_appliance_id": "211"
              },
              {
                "appliance_sku_id": "cckg:Pot",
                "device_name": "Pot",
                "provisioning_mode": "WIFI",
                "group_item_id": "group:Pot",
                "appliance_id": "kitchenos:ZenKitchen:ZenPot"
              }
            ]
          },
          "features_enabled": [
            "recipe_adapt"
          ]
        }
      },
      "adapt_recipe_request": {
        "value": {
          "recipe_id": "xyz456",
          "actions": [
            {
              "action": "kitchenos:SubstituteIngredient",
              "data": {
                "ingredient_source_id": "cckg:PorkShoulder",
                "ingredient_target_id": "cckg:BeefBrisket"
              }
            }
          ]
        }
      },
      "suggest_alt_ingredient_request": {
        "value": {
          "recipe_id": "xyz456",
          "ingredient_ids": [
            "cckg:PorkShoulder",
            "cckg:ChickenThigh"
          ]
        }
      },
      "suggest_alt_ingredient_response": {
        "value": {
          "cckg:PorkShoulder": [
            {
              "id": "cckg:BeefBrisket",
              "name": "Beef Brisket"
            },
            {
              "id": "cckg:LambShoulder",
              "name": "Lamb Shoulder"
            },
            {
              "id": "cckg:ChickenThigh",
              "name": "Chicken Thigh"
            }
          ],
          "cckg:ChickenThigh": [
            {
              "id": "cckg:BeefBrisket",
              "name": "Beef Brisket"
            },
            {
              "id": "cckg:LambShoulder",
              "name": "Lamb Shoulder"
            },
            {
              "id": "cckg:ChickenWings",
              "name": "Chicken Wings"
            }
          ]
        }
      },
      "list_recipe_adaptation_jobs": {
        "value": {
          "jobs": [
            {
              "job_id": "ada8632c-4cdd-42a5-801f-54853b7027c5",
              "actions": [
                {
                  "action": "kitchenos:SubstituteIngredient",
                  "data": {
                    "ingredient_source_id": "cckg:GingerRoot",
                    "ingredient_target_id": "cckg:WhiteRice"
                  }
                }
              ],
              "recipe_id": "kn4g9k",
              "status": "finished"
            }
          ]
        }
      },
      "recipe_adaptation_job": {
        "value": {
          "job_id": "ada8632c-4cdd-42a5-801f-54853b7027c5",
          "actions": [
            {
              "action": "kitchenos:SubstituteIngredient",
              "data": {
                "ingredient_source_id": "cckg:GingerRoot",
                "ingredient_target_id": "cckg:WhiteRice"
              }
            }
          ],
          "recipe_id": "kn4g9k",
          "status": "finished"
        }
      },
      "recipe-create-with-refs": {
        "value": {
          "legacy_id": "34mh2p",
          "locale": "en-US",
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H10M0S",
          "total_time": "P0DT0H25M0S",
          "name": "Quick Chocolate Chip Cookies",
          "source_url": "https://share.frescocooks.com/nnVON00sSqb",
          "description": "Quick and easy cookies with the perfect hit of melting chocolate.",
          "difficulty": 2,
          "reference_tag_ids": [
            "cckg:Vegetarian",
            "cckg:Vegan"
          ],
          "ingredients": [
            {
              "source_text": "140 g Unsalted butter",
              "reference_ingredient_id": "cckg:UnsaltedButter",
              "reference_preparation_ids": [
                "cckg:RoomTemperature"
              ],
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "55 g Granulated sugar",
              "reference_ingredient_id": "cckg:GranulatedSugar",
              "quantity": {
                "amount": 54,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "140 g Brown sugar",
              "reference_ingredient_id": "cckg:BrownSugar",
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "1 Egg",
              "reference_ingredient_id": "cckg:Egg",
              "quantity": {
                "amount": 50,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Vanilla extract",
              "reference_ingredient_id": "cckg:VanillaExtract",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "220 g All purpose flour",
              "reference_ingredient_id": "cckg:AllPurposeFlour",
              "quantity": {
                "amount": 218,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Sea salt",
              "reference_ingredient_id": "cckg:SeaSalt",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Baking soda",
              "reference_ingredient_id": "cckg:BakingSoda",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "180 g Chocolate chips",
              "reference_ingredient_id": "cckg:ChocolateChips",
              "quantity": {
                "amount": 181,
                "reference_unit_id": "cckg:Gram"
              }
            }
          ],
          "steps": [
            {
              "source_text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "amount": 54,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Cream until smooth",
              "text": "Cream until smooth"
            },
            {
              "source_text": "Add egg and vanilla extract to the dough",
              "text": "Add egg and vanilla extract to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 50,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well combined",
              "text": "Mix until well combined"
            },
            {
              "source_text": "Add all purpose flour, sea salt and baking soda to the dough",
              "text": "Add all purpose flour, sea salt and baking soda to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 218,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well blended",
              "text": "Mix until well blended"
            },
            {
              "source_text": "Add chocolate chips to the dough",
              "text": "Add chocolate chips to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 8,
                  "quantity": {
                    "amount": 181,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until just combined",
              "text": "Mix until just combined"
            },
            {
              "source_text": "Chill in freezer",
              "text": "Chill in freezer"
            },
            {
              "source_text": "Pre-heat oven - 175°C",
              "text": "Pre-heat oven - 175°C"
            },
            {
              "source_text": "Line a clean baking sheet with parchment paper",
              "text": "Line a clean baking sheet with parchment paper"
            },
            {
              "source_text": "Scoop dough onto baking sheet",
              "text": "Scoop dough onto baking sheet"
            },
            {
              "source_text": "Bake until golden brown - 11 min, 175°C",
              "text": "Bake until golden brown - 11 min, 175°C",
              "capability": {
                "reference_capability_id": "cckg:Bake",
                "settings": [
                  {
                    "reference_setting_id": "cckg:TemperatureSetting",
                    "value": {
                      "type": "numeric",
                      "value": 175,
                      "reference_unit_id": "cckg:Celsius"
                    }
                  }
                ]
              }
            },
            {
              "source_text": "Let cool",
              "text": "Let cool"
            },
            {
              "source_text": "Serve",
              "text": "Serve"
            }
          ],
          "author": {
            "name": "Fresco Cooks",
            "url": "https://frescocooks.com",
            "image": "https://frescocooks.com/logo.png"
          },
          "serves": 4
        }
      },
      "recipe-create-with-refs-v3": {
        "value": {
          "locale": "en-US",
          "prep_time": "PT15M",
          "cook_time": "PT50M",
          "total_time": "PT1H",
          "name": "Classic Beef Stew",
          "description": "",
          "reference_tag_ids": [
            "cckg:Christmas",
            "cckg:Featured",
            "cckg:Favorites",
            "cckg:BeefDish",
            "cckg:Stew",
            "cckg:MeatDish"
          ],
          "ingredients": [
            {
              "reference_ingredient_id": "cckg:BeefStewMeat",
              "reference_preparation_ids": [
                "cckg:Cubed"
              ],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit_id": "cckg:Pound"
                },
                "metric": {
                  "amount": 0.9,
                  "reference_unit_id": "cckg:Kilogram"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:BeefBroth",
              "reference_preparation_ids": [],
              "quantity": {
                "us_customary": {
                  "amount": 3,
                  "reference_unit_id": "cckg:USCup"
                },
                "metric": {
                  "amount": 0.7,
                  "reference_unit_id": "cckg:Litre"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:Carrot",
              "reference_preparation_ids": [
                "cckg:SlicedInRings"
              ],
              "quantity": {
                "amount": 4,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Potato",
              "reference_preparation_ids": [
                "cckg:Peeled",
                "cckg:Diced"
              ],
              "quantity": {
                "amount": 3,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Onion",
              "reference_preparation_ids": [
                "cckg:Chopped"
              ],
              "quantity": {
                "amount": 1,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Garlic",
              "reference_preparation_ids": [
                "cckg:Minced"
              ],
              "quantity": {
                "amount": 2,
                "reference_unit_id": "cckg:Clove"
              }
            },
            {
              "reference_ingredient_id": "cckg:CookingOIl",
              "reference_preparation_ids": [],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit_id": "cckg:USTablespoon"
                },
                "metric": {
                  "amount": 29.6,
                  "reference_unit_id": "cckg:Millilitre"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:SaltAndPepper",
              "reference_preparation_ids": [],
              "quantity": {
                "reference_unit_id": "cckg:ToTaste"
              }
            }
          ],
          "steps": [
            {
              "text": "Season the cubed beef with salt and pepper. ",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit_id": "cckg:Pound"
                    },
                    "metric": {
                      "amount": 0.9,
                      "reference_unit_id": "cckg:Kilogram"
                    }
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit_id": "cckg:ToTaste"
                  }
                }
              ]
            },
            {
              "text": "Select the Sauté, Normal/Medium function on your electric pressure cooker, add the cooking oil, and brown the beef in batches until it's nicely seared. ",
              "ingredients": [
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit_id": "cckg:USTablespoon"
                    },
                    "metric": {
                      "amount": 29.6,
                      "reference_unit_id": "cckg:Millilitre"
                    }
                  }
                }
              ],
              "capability": {
                "reference_capability_id": "cckg:Saute",
                "settings": [
                  {
                    "reference_setting_id": "cckg:TemperatureSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:TemperatureMedium"
                    }
                  },
                  {
                    "reference_setting_id": "cckg:TimeSetting",
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit_id": "cckg:Second"
                      }
                    }
                  }
                ],
                "phase_id": "cckg:ExecutionPhase"
              }
            },
            {
              "text": "When done, remove the beef and set it aside.",
              "ingredients": []
            },
            {
              "text": "In the same pressure cooker, sauté the chopped onions and minced garlic until they become fragrant and slightly translucent, about 3 minutes.",
              "ingredients": [
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 1,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                },
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 2,
                    "reference_unit_id": "cckg:Clove"
                  }
                }
              ]
            },
            {
              "text": "Return the seared beef to the pressure cooker and add the carrots, potatoes, and beef broth. Stir everything together to combine.\n",
              "ingredients": [
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "us_customary": {
                      "amount": 3,
                      "reference_unit_id": "cckg:USCup"
                    },
                    "metric": {
                      "amount": 0.7,
                      "reference_unit_id": "cckg:Litre"
                    }
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 4,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                },
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 3,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                }
              ]
            },
            {
              "text": "Seal the pressure cooker with the lid, set it to High pressure, 30 minutes. Once the cooking time is complete, use the quick-release valve to release the pressure.",
              "ingredients": [],
              "capability": {
                "reference_capability_id": "cckg:PressureCook",
                "settings": [
                  {
                    "reference_setting_id": "cckg:PressureSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:PressureHigh"
                    }
                  },
                  {
                    "reference_setting_id": "cckg:TimeSetting",
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit_id": "cckg:Second"
                      }
                    }
                  },
                  {
                    "reference_setting_id": "cckg:VentingSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:VentingQuick"
                    }
                  }
                ],
                "phase_id": "cckg:ExecutionPhase"
              }
            },
            {
              "text": "Carefully open the lid, check for seasoning, and adjust with more salt and pepper if needed. Serve your delicious beef stew hot, garnished with fresh herbs if desired.",
              "ingredients": [
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit_id": "cckg:ToTaste"
                  }
                }
              ]
            }
          ],
          "author": {
            "name": "Zen Kitchen Culinary Team",
            "image": "https://configs.fresco-kitchenos.com/fresco-1180x1180.svg",
            "url": "https://frescocooks.com"
          },
          "serves": 6
        }
      },
      "recipe": {
        "value": {
          "id": "34mh2p",
          "organization_id": "kitchenos:ZenKitchen",
          "state": "published",
          "created_at": "2020-01-01T00:00:00.000Z",
          "modified_at": "2020-01-01T00:00:00.000Z",
          "legacy_id": "abc123",
          "forked_from_id": "67qwv3",
          "locale": "en-US",
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H10M0S",
          "total_time": "P0DT0H25M0S",
          "name": "Quick Chocolate Chip Cookies",
          "source_url": "https://share.frescocooks.com/nnVON00sSqb",
          "description": "Quick and easy cookies with the perfect hit of melting chocolate.",
          "difficulty": 2,
          "reference_tags": [
            {
              "id": "cckg:Vegetarian",
              "name": "Mediterranean Cuisine",
              "category": "cckg:Vegetarian"
            },
            {
              "id": "cckg:Vegan",
              "name": "Vegan",
              "category": "cckg:Vegan"
            }
          ],
          "ingredients": [
            {
              "source_text": "140 g Unsalted butter",
              "reference_ingredient": {
                "id": "cckg:UnsaltedButter",
                "name": "Unsalted Butter",
                "allowed_units": [
                  {
                    "id": "cckg:Gram",
                    "name": "Gram",
                    "abbreviation": "g"
                  }
                ]
              },
              "reference_preparations": [
                {
                  "id": "cckg:RoomTemperature",
                  "name": "Room Temperature"
                }
              ],
              "quantity": {
                "amount": 145,
                "reference_unit": {
                  "id": "cckg:Gram",
                  "name": "Gram",
                  "abbreviation": "g"
                },
                "text": "145 Gram"
              }
            }
          ],
          "steps": [
            {
              "source_text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "amount": 145,
                    "reference_unit": {
                      "id": "cckg:Gram",
                      "name": "Gram",
                      "abbreviation": "g"
                    },
                    "text": "145 Gram"
                  }
                }
              ],
              "capability": {
                "reference_capability": {
                  "id": "cckg:Mix",
                  "name": "Mix"
                },
                "settings": [
                  {
                    "reference_setting": {
                      "id": "cckg:TemperatureSetting",
                      "name": "Temperature Setting"
                    },
                    "value": {
                      "reference_value": {
                        "id": "cckg:RoomTemperature",
                        "name": "Room Temperature"
                      },
                      "type": "numeric",
                      "value": 175,
                      "reference_unit": {
                        "id": "cckg:Celsius",
                        "name": "Celsius",
                        "abbreviation": "°C"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "author": {
            "name": "Fresco Cooks",
            "url": "https://frescocooks.com",
            "image": "https://frescocooks.com/logo.png"
          },
          "created_by_id": "a0973de1-6688-4f04-bc73-c15bf7545311",
          "serves": 4,
          "etag": "1bcd5486fd6577cc48cc0ccbc363156b"
        }
      },
      "recipe-v3": {
        "value": {
          "name": "Classic Beef Stew",
          "description": "",
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H50M0S",
          "total_time": "P0DT1H0M0S",
          "author": {
            "name": "Zen Kitchen Culinary Team",
            "image": "https://configs.fresco-kitchenos.com/fresco-1180x1180.svg",
            "url": "https://frescocooks.com"
          },
          "serves": 6,
          "id": "wx1pss",
          "etag": "c500d6783bf664a62cb4fa346c4d388d685ce815b4fb209b5b9dcfece7a022a99c6d48bbcaa769259f57b3d765ecb835b698f73659bed49e30c0ac1a50f77e15",
          "organization_id": "kitchenos:Integration",
          "locale": "en-US",
          "state": "draft",
          "created_at": "2023-10-11T14:23:16.480948Z",
          "modified_at": "2024-02-07T16:08:04.484636Z",
          "reference_tags": [
            {
              "id": "cckg:Christmas",
              "name": "Christmas Day",
              "category": "cckg:SeasonalEvent"
            },
            {
              "id": "cckg:Featured",
              "name": "featured",
              "category": "cckg:RecipeVisibility"
            },
            {
              "id": "cckg:Favorites",
              "name": "favorites",
              "category": "cckg:RecipeVisibility"
            },
            {
              "id": "cckg:BeefDish",
              "name": "beef",
              "category": "cckg:Dish"
            },
            {
              "id": "cckg:Stew",
              "name": "stew",
              "category": "cckg:Dish"
            },
            {
              "id": "cckg:MeatDish",
              "name": "meat",
              "category": "cckg:Dish"
            }
          ],
          "created_by_id": "2eeb4c16-e493-5ae8-b318-504b523f0391",
          "ingredients": [
            {
              "reference_ingredient": {
                "id": "cckg:BeefStewMeat",
                "name": "beef stew meat"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Cubed",
                  "name": "cubed"
                }
              ],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit": {
                    "id": "cckg:Pound",
                    "name": "pound",
                    "abbreviation": "lb"
                  },
                  "text": "2 lb"
                },
                "metric": {
                  "amount": 0.9,
                  "reference_unit": {
                    "id": "cckg:Kilogram",
                    "name": "kilogram",
                    "abbreviation": "kg"
                  },
                  "text": "0.9 kg"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:BeefBroth",
                "name": "beef broth"
              },
              "reference_preparations": [],
              "quantity": {
                "us_customary": {
                  "amount": 3,
                  "reference_unit": {
                    "id": "cckg:USCup",
                    "name": "cup",
                    "abbreviation": "cup"
                  },
                  "text": "3 cup"
                },
                "metric": {
                  "amount": 0.7,
                  "reference_unit": {
                    "id": "cckg:Litre",
                    "name": "litre",
                    "abbreviation": "l"
                  },
                  "text": "0.7 l"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Carrot",
                "name": "carrot"
              },
              "reference_preparations": [
                {
                  "id": "cckg:SlicedInRings",
                  "name": "sliced in rings"
                }
              ],
              "quantity": {
                "amount": 4,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "4"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Potato",
                "name": "potato"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Peeled",
                  "name": "peeled"
                },
                {
                  "id": "cckg:Diced",
                  "name": "diced"
                }
              ],
              "quantity": {
                "amount": 3,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "3"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Onion",
                "name": "onion"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Chopped",
                  "name": "chopped"
                }
              ],
              "quantity": {
                "amount": 1,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "1"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Garlic",
                "name": "garlic"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Minced",
                  "name": "minced"
                }
              ],
              "quantity": {
                "amount": 2,
                "reference_unit": {
                  "id": "cckg:Clove",
                  "name": "clove"
                },
                "text": "2 clove"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:CookingOIl",
                "name": "cooking oil"
              },
              "reference_preparations": [],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit": {
                    "id": "cckg:USTablespoon",
                    "name": "tablespoon",
                    "abbreviation": "Tbsp"
                  },
                  "text": "2 Tbsp"
                },
                "metric": {
                  "amount": 29.6,
                  "reference_unit": {
                    "id": "cckg:Millilitre",
                    "name": "millilitre",
                    "abbreviation": "ml"
                  },
                  "text": "29.6 ml"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:SaltAndPepper",
                "name": "salt & pepper"
              },
              "reference_preparations": [],
              "quantity": {
                "reference_unit": {
                  "id": "cckg:ToTaste",
                  "name": "as needed"
                },
                "text": "as needed"
              }
            }
          ],
          "steps": [
            {
              "text": "Season the cubed beef with salt and pepper. ",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit": {
                        "id": "cckg:Pound",
                        "name": "pound",
                        "abbreviation": "lb"
                      },
                      "text": "2 lb"
                    },
                    "metric": {
                      "amount": 0.9,
                      "reference_unit": {
                        "id": "cckg:Kilogram",
                        "name": "kilogram",
                        "abbreviation": "kg"
                      },
                      "text": "0.9 kg"
                    }
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit": {
                      "id": "cckg:ToTaste",
                      "name": "as needed"
                    },
                    "text": "as needed"
                  }
                }
              ]
            },
            {
              "text": "Select the Sauté, Normal/Medium function on your electric pressure cooker, add the cooking oil, and brown the beef in batches until it's nicely seared. ",
              "ingredients": [
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit": {
                        "id": "cckg:USTablespoon",
                        "name": "tablespoon",
                        "abbreviation": "Tbsp"
                      },
                      "text": "2 Tbsp"
                    },
                    "metric": {
                      "amount": 29.6,
                      "reference_unit": {
                        "id": "cckg:Millilitre",
                        "name": "millilitre",
                        "abbreviation": "ml"
                      },
                      "text": "29.6 ml"
                    }
                  }
                }
              ],
              "capability": {
                "reference_capability": {
                  "id": "cckg:Saute",
                  "name": "sauté"
                },
                "settings": [
                  {
                    "reference_setting": {
                      "id": "cckg:TemperatureSetting",
                      "name": "temperature"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "us_customary": {
                          "amount": 130,
                          "reference_unit": {
                            "id": "cckg:Fahrenheit",
                            "name": "Fahrenheit",
                            "abbreviation": "°F"
                          },
                          "text": "placeholder"
                        },
                        "metric": {
                          "amount": 50,
                          "reference_unit": {
                            "id": "cckg:Celsius",
                            "name": "Celsius",
                            "abbreviation": "°C"
                          },
                          "text": "placeholder"
                        }
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:TimeSetting",
                      "name": "time"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit": {
                          "id": "cckg:Second",
                          "name": "second",
                          "abbreviation": "s"
                        },
                        "text": "placeholder"
                      }
                    }
                  }
                ],
                "phase": {
                  "id": "cckg:ExecutionPhase",
                  "name": "run",
                  "can_follow_phases": [
                    "cckg:PreheatInitializationPhase",
                    "cckg:SetUpPhase"
                  ]
                }
              }
            },
            {
              "text": "When done, remove the beef and set it aside.",
              "ingredients": []
            },
            {
              "text": "In the same pressure cooker, sauté the chopped onions and minced garlic until they become fragrant and slightly translucent, about 3 minutes.",
              "ingredients": [
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 1,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "1"
                  }
                },
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 2,
                    "reference_unit": {
                      "id": "cckg:Clove",
                      "name": "clove"
                    },
                    "text": "2 clove"
                  }
                }
              ]
            },
            {
              "text": "Return the seared beef to the pressure cooker and add the carrots, potatoes, and beef broth. Stir everything together to combine.\n",
              "ingredients": [
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "us_customary": {
                      "amount": 3,
                      "reference_unit": {
                        "id": "cckg:USCup",
                        "name": "cup",
                        "abbreviation": "cup"
                      },
                      "text": "3 cup"
                    },
                    "metric": {
                      "amount": 0.7,
                      "reference_unit": {
                        "id": "cckg:Litre",
                        "name": "litre",
                        "abbreviation": "l"
                      },
                      "text": "0.7 l"
                    }
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 4,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "4"
                  }
                },
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 3,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "3"
                  }
                }
              ]
            },
            {
              "text": "Seal the pressure cooker with the lid, set it to High pressure, 30 minutes. Once the cooking time is complete, use the quick-release valve to release the pressure.",
              "ingredients": [],
              "capability": {
                "reference_capability": {
                  "id": "cckg:PressureCook",
                  "name": "pressure cook"
                },
                "settings": [
                  {
                    "reference_setting": {
                      "id": "cckg:PressureSetting",
                      "name": "pressure"
                    },
                    "value": {
                      "text": "placeholder",
                      "type": "nominal",
                      "reference_value": {
                        "id": "cckg:PressureHigh",
                        "name": "high"
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:TimeSetting",
                      "name": "time"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit": {
                          "id": "cckg:Second",
                          "name": "second",
                          "abbreviation": "s"
                        },
                        "text": "placeholder"
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:VentingSetting",
                      "name": "venting"
                    },
                    "value": {
                      "text": "placeholder",
                      "type": "nominal",
                      "reference_value": {
                        "id": "cckg:VentingQuick",
                        "name": "quick"
                      }
                    }
                  }
                ],
                "phase": {
                  "id": "cckg:ExecutionPhase",
                  "name": "run",
                  "can_follow_phases": [
                    "cckg:PreheatInitializationPhase",
                    "cckg:SetUpPhase"
                  ]
                }
              }
            },
            {
              "text": "Carefully open the lid, check for seasoning, and adjust with more salt and pepper if needed. Serve your delicious beef stew hot, garnished with fresh herbs if desired.",
              "ingredients": [
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit": {
                      "id": "cckg:ToTaste",
                      "name": "as needed"
                    },
                    "text": "as needed"
                  }
                }
              ]
            }
          ]
        }
      },
      "recipe-migrate-with-refs": {
        "value": {
          "locale": "en-US",
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H10M0S",
          "total_time": "P0DT0H25M0S",
          "name": "Quick Chocolate Chip Cookies",
          "source_url": "https://share.frescocooks.com/nnVON00sSqb",
          "description": "Quick and easy cookies with the perfect hit of melting chocolate.",
          "difficulty": 2,
          "reference_tag_ids": [
            "cckg:Vegetarian",
            "cckg:Vegan"
          ],
          "ingredients": [
            {
              "source_text": "140 g Unsalted butter",
              "reference_ingredient_id": "cckg:UnsaltedButter",
              "reference_preparation_ids": [
                "cckg:RoomTemperature"
              ],
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "55 g Granulated sugar",
              "reference_ingredient_id": "cckg:GranulatedSugar",
              "quantity": {
                "amount": 54,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "140 g Brown sugar",
              "reference_ingredient_id": "cckg:BrownSugar",
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "1 Egg",
              "reference_ingredient_id": "cckg:Egg",
              "quantity": {
                "amount": 50,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Vanilla extract",
              "reference_ingredient_id": "cckg:VanillaExtract",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "220 g All purpose flour",
              "reference_ingredient_id": "cckg:AllPurposeFlour",
              "quantity": {
                "amount": 218,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Sea salt",
              "reference_ingredient_id": "cckg:SeaSalt",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Baking soda",
              "reference_ingredient_id": "cckg:BakingSoda",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "180 g Chocolate chips",
              "reference_ingredient_id": "cckg:ChocolateChips",
              "quantity": {
                "amount": 181,
                "reference_unit_id": "cckg:Gram"
              }
            }
          ],
          "steps": [
            {
              "source_text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "amount": 54,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Cream until smooth",
              "text": "Cream until smooth"
            },
            {
              "source_text": "Add egg and vanilla extract to the dough",
              "text": "Add egg and vanilla extract to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 50,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well combined",
              "text": "Mix until well combined"
            },
            {
              "source_text": "Add all purpose flour, sea salt and baking soda to the dough",
              "text": "Add all purpose flour, sea salt and baking soda to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 218,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well blended",
              "text": "Mix until well blended"
            },
            {
              "source_text": "Add chocolate chips to the dough",
              "text": "Add chocolate chips to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 8,
                  "quantity": {
                    "amount": 181,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until just combined",
              "text": "Mix until just combined"
            },
            {
              "source_text": "Chill in freezer",
              "text": "Chill in freezer"
            },
            {
              "source_text": "Pre-heat oven - 175°C",
              "text": "Pre-heat oven - 175°C"
            },
            {
              "source_text": "Line a clean baking sheet with parchment paper",
              "text": "Line a clean baking sheet with parchment paper"
            },
            {
              "source_text": "Scoop dough onto baking sheet",
              "text": "Scoop dough onto baking sheet"
            },
            {
              "source_text": "Bake until golden brown - 11 min, 175°C",
              "text": "Bake until golden brown - 11 min, 175°C",
              "capability": {
                "reference_capability_id": "cckg:Bake",
                "settings": [
                  {
                    "reference_setting_id": "cckg:TemperatureSetting",
                    "value": {
                      "type": "numeric",
                      "value": 175,
                      "reference_unit_id": "cckg:Celsius"
                    }
                  }
                ]
              }
            },
            {
              "source_text": "Let cool",
              "text": "Let cool"
            },
            {
              "source_text": "Serve",
              "text": "Serve"
            }
          ],
          "author": {
            "name": "Fresco Cooks",
            "url": "https://frescocooks.com",
            "image": "https://frescocooks.com/logo.png"
          },
          "serves": 4,
          "organization_id": "kitchenos:ZenKitchen",
          "created_by_id": "45qa71",
          "rating_total": 541,
          "rating_count": 18,
          "legacy_id": "xw98721"
        }
      },
      "recipe-update-with-refs": {
        "value": {
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H10M0S",
          "total_time": "P0DT0H25M0S",
          "name": "Quick Chocolate Chip Cookies",
          "source_url": "https://share.frescocooks.com/nnVON00sSqb",
          "description": "Quick and easy cookies with the perfect hit of melting chocolate.",
          "difficulty": 2,
          "reference_tag_ids": [
            "cckg:Vegetarian",
            "cckg:Vegan"
          ],
          "ingredients": [
            {
              "source_text": "140 g Unsalted butter",
              "reference_ingredient_id": "cckg:UnsaltedButter",
              "reference_preparation_ids": [
                "cckg:RoomTemperature"
              ],
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "55 g Granulated sugar",
              "reference_ingredient_id": "cckg:GranulatedSugar",
              "quantity": {
                "amount": 54,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "140 g Brown sugar",
              "reference_ingredient_id": "cckg:BrownSugar",
              "quantity": {
                "amount": 145,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "1 Egg",
              "reference_ingredient_id": "cckg:Egg",
              "quantity": {
                "amount": 50,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Vanilla extract",
              "reference_ingredient_id": "cckg:VanillaExtract",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "220 g All purpose flour",
              "reference_ingredient_id": "cckg:AllPurposeFlour",
              "quantity": {
                "amount": 218,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Sea salt",
              "reference_ingredient_id": "cckg:SeaSalt",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "5 g Baking soda",
              "reference_ingredient_id": "cckg:BakingSoda",
              "quantity": {
                "amount": 5,
                "reference_unit_id": "cckg:Gram"
              }
            },
            {
              "source_text": "180 g Chocolate chips",
              "reference_ingredient_id": "cckg:ChocolateChips",
              "quantity": {
                "amount": 181,
                "reference_unit_id": "cckg:Gram"
              }
            }
          ],
          "steps": [
            {
              "source_text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "text": "Add unsalted butter, granulated sugar and brown sugar to a clean large mixing bowl",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "amount": 54,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 145,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Cream until smooth",
              "text": "Cream until smooth"
            },
            {
              "source_text": "Add egg and vanilla extract to the dough",
              "text": "Add egg and vanilla extract to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 50,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well combined",
              "text": "Mix until well combined"
            },
            {
              "source_text": "Add all purpose flour, sea salt and baking soda to the dough",
              "text": "Add all purpose flour, sea salt and baking soda to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 218,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "amount": 5,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until well blended",
              "text": "Mix until well blended"
            },
            {
              "source_text": "Add chocolate chips to the dough",
              "text": "Add chocolate chips to the dough",
              "ingredients": [
                {
                  "ingredient_idx": 8,
                  "quantity": {
                    "amount": 181,
                    "reference_unit_id": "cckg:Gram"
                  }
                }
              ]
            },
            {
              "source_text": "Mix until just combined",
              "text": "Mix until just combined"
            },
            {
              "source_text": "Chill in freezer",
              "text": "Chill in freezer"
            },
            {
              "source_text": "Pre-heat oven - 175°C",
              "text": "Pre-heat oven - 175°C"
            },
            {
              "source_text": "Line a clean baking sheet with parchment paper",
              "text": "Line a clean baking sheet with parchment paper"
            },
            {
              "source_text": "Scoop dough onto baking sheet",
              "text": "Scoop dough onto baking sheet"
            },
            {
              "source_text": "Bake until golden brown - 11 min, 175°C",
              "text": "Bake until golden brown - 11 min, 175°C",
              "capability": {
                "reference_capability_id": "cckg:Bake",
                "settings": [
                  {
                    "reference_setting_id": "cckg:TemperatureSetting",
                    "value": {
                      "type": "numeric",
                      "value": 175,
                      "reference_unit_id": "cckg:Celsius"
                    }
                  }
                ]
              }
            },
            {
              "source_text": "Let cool",
              "text": "Let cool"
            },
            {
              "source_text": "Serve",
              "text": "Serve"
            }
          ],
          "author": {
            "name": "Fresco Cooks",
            "url": "https://frescocooks.com",
            "image": "https://frescocooks.com/logo.png"
          },
          "serves": 4
        }
      },
      "recipe-update-with-refs-v3": {
        "value": {
          "prep_time": "PT15M",
          "cook_time": "PT50M",
          "total_time": "PT1H",
          "name": "Classic Beef Stew",
          "description": "",
          "reference_tag_ids": [
            "cckg:Christmas",
            "cckg:Featured",
            "cckg:Favorites",
            "cckg:BeefDish",
            "cckg:Stew",
            "cckg:MeatDish"
          ],
          "ingredients": [
            {
              "reference_ingredient_id": "cckg:BeefStewMeat",
              "reference_preparation_ids": [
                "cckg:Cubed"
              ],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit_id": "cckg:Pound"
                },
                "metric": {
                  "amount": 0.9,
                  "reference_unit_id": "cckg:Kilogram"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:BeefBroth",
              "reference_preparation_ids": [],
              "quantity": {
                "us_customary": {
                  "amount": 3,
                  "reference_unit_id": "cckg:USCup"
                },
                "metric": {
                  "amount": 0.7,
                  "reference_unit_id": "cckg:Litre"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:Carrot",
              "reference_preparation_ids": [
                "cckg:SlicedInRings"
              ],
              "quantity": {
                "amount": 4,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Potato",
              "reference_preparation_ids": [
                "cckg:Peeled",
                "cckg:Diced"
              ],
              "quantity": {
                "amount": 3,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Onion",
              "reference_preparation_ids": [
                "cckg:Chopped"
              ],
              "quantity": {
                "amount": 1,
                "reference_unit_id": "cckg:SingleUnit"
              }
            },
            {
              "reference_ingredient_id": "cckg:Garlic",
              "reference_preparation_ids": [
                "cckg:Minced"
              ],
              "quantity": {
                "amount": 2,
                "reference_unit_id": "cckg:Clove"
              }
            },
            {
              "reference_ingredient_id": "cckg:CookingOIl",
              "reference_preparation_ids": [],
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit_id": "cckg:USTablespoon"
                },
                "metric": {
                  "amount": 29.6,
                  "reference_unit_id": "cckg:Millilitre"
                }
              }
            },
            {
              "reference_ingredient_id": "cckg:SaltAndPepper",
              "reference_preparation_ids": [],
              "quantity": {
                "reference_unit_id": "cckg:ToTaste"
              }
            }
          ],
          "steps": [
            {
              "text": "Season the cubed beef with salt and pepper. ",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit_id": "cckg:Pound"
                    },
                    "metric": {
                      "amount": 0.9,
                      "reference_unit_id": "cckg:Kilogram"
                    }
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit_id": "cckg:ToTaste"
                  }
                }
              ]
            },
            {
              "text": "Select the Sauté, Normal/Medium function on your electric pressure cooker, add the cooking oil, and brown the beef in batches until it's nicely seared. ",
              "ingredients": [
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit_id": "cckg:USTablespoon"
                    },
                    "metric": {
                      "amount": 29.6,
                      "reference_unit_id": "cckg:Millilitre"
                    }
                  }
                }
              ],
              "capability": {
                "reference_capability_id": "cckg:Saute",
                "settings": [
                  {
                    "reference_setting_id": "cckg:TemperatureSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:TemperatureMedium"
                    }
                  },
                  {
                    "reference_setting_id": "cckg:TimeSetting",
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit_id": "cckg:Second"
                      }
                    }
                  }
                ],
                "phase_id": "cckg:ExecutionPhase"
              }
            },
            {
              "text": "When done, remove the beef and set it aside.",
              "ingredients": []
            },
            {
              "text": "In the same pressure cooker, sauté the chopped onions and minced garlic until they become fragrant and slightly translucent, about 3 minutes.",
              "ingredients": [
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 1,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                },
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 2,
                    "reference_unit_id": "cckg:Clove"
                  }
                }
              ]
            },
            {
              "text": "Return the seared beef to the pressure cooker and add the carrots, potatoes, and beef broth. Stir everything together to combine.\n",
              "ingredients": [
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "us_customary": {
                      "amount": 3,
                      "reference_unit_id": "cckg:USCup"
                    },
                    "metric": {
                      "amount": 0.7,
                      "reference_unit_id": "cckg:Litre"
                    }
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 4,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                },
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 3,
                    "reference_unit_id": "cckg:SingleUnit"
                  }
                }
              ]
            },
            {
              "text": "Seal the pressure cooker with the lid, set it to High pressure, 30 minutes. Once the cooking time is complete, use the quick-release valve to release the pressure.",
              "ingredients": [],
              "capability": {
                "reference_capability_id": "cckg:PressureCook",
                "settings": [
                  {
                    "reference_setting_id": "cckg:PressureSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:PressureHigh"
                    }
                  },
                  {
                    "reference_setting_id": "cckg:TimeSetting",
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit_id": "cckg:Second"
                      }
                    }
                  },
                  {
                    "reference_setting_id": "cckg:VentingSetting",
                    "value": {
                      "type": "nominal",
                      "reference_value_id": "cckg:VentingQuick"
                    }
                  }
                ],
                "phase_id": "cckg:ExecutionPhase"
              }
            },
            {
              "text": "Carefully open the lid, check for seasoning, and adjust with more salt and pepper if needed. Serve your delicious beef stew hot, garnished with fresh herbs if desired.",
              "ingredients": [
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit_id": "cckg:ToTaste"
                  }
                }
              ]
            }
          ],
          "author": {
            "name": "Zen Kitchen Culinary Team",
            "image": "https://configs.fresco-kitchenos.com/fresco-1180x1180.svg",
            "url": "https://frescocooks.com"
          },
          "serves": 6
        }
      },
      "rus-recipe-v3": {
        "value": {
          "name": "Classic Beef Stew",
          "description": "Classic Beef Stew",
          "source_url": "https://frescocooks.com",
          "prep_time": "P0DT0H15M0S",
          "cook_time": "P0DT0H50M0S",
          "total_time": "P0DT1H0M0S",
          "ingredients": [
            {
              "reference_ingredient": {
                "id": "cckg:BeefStewMeat",
                "name": "beef stew meat"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Cubed",
                  "name": "cubed"
                }
              ],
              "source_text": "2 pound beef stew meat, cubed.",
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit": {
                    "id": "cckg:Pound",
                    "name": "pound",
                    "abbreviation": "lb"
                  },
                  "text": "2 lb"
                },
                "metric": {
                  "amount": 0.9,
                  "reference_unit": {
                    "id": "cckg:Kilogram",
                    "name": "kilogram",
                    "abbreviation": "kg"
                  },
                  "text": "0.9 kg"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:BeefBroth",
                "name": "beef broth"
              },
              "reference_preparations": [],
              "source_text": "3 cup beef broth.",
              "quantity": {
                "us_customary": {
                  "amount": 3,
                  "reference_unit": {
                    "id": "cckg:USCup",
                    "name": "cup",
                    "abbreviation": "cup"
                  },
                  "text": "3 cup"
                },
                "metric": {
                  "amount": 0.7,
                  "reference_unit": {
                    "id": "cckg:Litre",
                    "name": "litre",
                    "abbreviation": "l"
                  },
                  "text": "0.7 l"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Carrot",
                "name": "carrot"
              },
              "reference_preparations": [
                {
                  "id": "cckg:SlicedInRings",
                  "name": "sliced in rings"
                }
              ],
              "source_text": "4 carrot, sliced in rings",
              "quantity": {
                "amount": 4,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "4"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Potato",
                "name": "potato"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Peeled",
                  "name": "peeled"
                },
                {
                  "id": "cckg:Diced",
                  "name": "diced"
                }
              ],
              "source_text": "3 potato, peeled",
              "quantity": {
                "amount": 3,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "3"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Onion",
                "name": "onion"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Chopped",
                  "name": "chopped"
                }
              ],
              "source_text": "1 onion, chopped",
              "quantity": {
                "amount": 1,
                "reference_unit": {
                  "id": "cckg:SingleUnit",
                  "name": "unit"
                },
                "text": "1"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:Garlic",
                "name": "garlic"
              },
              "reference_preparations": [
                {
                  "id": "cckg:Minced",
                  "name": "minced"
                }
              ],
              "source_text": "2 clove minced garlic",
              "quantity": {
                "amount": 2,
                "reference_unit": {
                  "id": "cckg:Clove",
                  "name": "clove"
                },
                "text": "2 clove"
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:CookingOIl",
                "name": "cooking oil"
              },
              "reference_preparations": [],
              "source_text": "2 Tbsp cooking oil",
              "quantity": {
                "us_customary": {
                  "amount": 2,
                  "reference_unit": {
                    "id": "cckg:USTablespoon",
                    "name": "tablespoon",
                    "abbreviation": "Tbsp"
                  },
                  "text": "2 Tbsp"
                },
                "metric": {
                  "amount": 29.6,
                  "reference_unit": {
                    "id": "cckg:Millilitre",
                    "name": "millilitre",
                    "abbreviation": "ml"
                  },
                  "text": "29.6 ml"
                }
              }
            },
            {
              "reference_ingredient": {
                "id": "cckg:SaltAndPepper",
                "name": "salt & pepper"
              },
              "reference_preparations": [],
              "source_text": "salt & pepper, as needed",
              "quantity": {
                "reference_unit": {
                  "id": "cckg:ToTaste",
                  "name": "as needed"
                },
                "text": "as needed"
              }
            }
          ],
          "steps": [
            {
              "text": "Season the cubed beef with salt and pepper. ",
              "source_text": "Season the cubed beef with salt and pepper. ",
              "ingredients": [
                {
                  "ingredient_idx": 0,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit": {
                        "id": "cckg:Pound",
                        "name": "pound",
                        "abbreviation": "lb"
                      },
                      "text": "2 lb"
                    },
                    "metric": {
                      "amount": 0.9,
                      "reference_unit": {
                        "id": "cckg:Kilogram",
                        "name": "kilogram",
                        "abbreviation": "kg"
                      },
                      "text": "0.9 kg"
                    }
                  }
                },
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit": {
                      "id": "cckg:ToTaste",
                      "name": "as needed"
                    },
                    "text": "as needed"
                  }
                }
              ]
            },
            {
              "text": "Select the Sauté, Normal/Medium function on your electric pressure cooker, add the cooking oil, and brown the beef in batches until it's nicely seared. ",
              "source_text": "Select the Sauté, Normal/Medium function on your electric pressure cooker, add the cooking oil, and brown the beef in batches until it's nicely seared. ",
              "ingredients": [
                {
                  "ingredient_idx": 6,
                  "quantity": {
                    "us_customary": {
                      "amount": 2,
                      "reference_unit": {
                        "id": "cckg:USTablespoon",
                        "name": "tablespoon",
                        "abbreviation": "Tbsp"
                      },
                      "text": "2 Tbsp"
                    },
                    "metric": {
                      "amount": 29.6,
                      "reference_unit": {
                        "id": "cckg:Millilitre",
                        "name": "millilitre",
                        "abbreviation": "ml"
                      },
                      "text": "29.6 ml"
                    }
                  }
                }
              ],
              "capability": {
                "reference_capability": {
                  "id": "cckg:Saute",
                  "name": "sauté"
                },
                "settings": [
                  {
                    "reference_setting": {
                      "id": "cckg:TemperatureSetting",
                      "name": "temperature"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "us_customary": {
                          "amount": 130,
                          "reference_unit": {
                            "id": "cckg:Fahrenheit",
                            "name": "Fahrenheit",
                            "abbreviation": "°F"
                          },
                          "text": "placeholder"
                        },
                        "metric": {
                          "amount": 50,
                          "reference_unit": {
                            "id": "cckg:Celsius",
                            "name": "Celsius",
                            "abbreviation": "°C"
                          },
                          "text": "placeholder"
                        }
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:TimeSetting",
                      "name": "time"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit": {
                          "id": "cckg:Second",
                          "name": "second",
                          "abbreviation": "s"
                        },
                        "text": "placeholder"
                      }
                    }
                  }
                ],
                "phase": {
                  "id": "cckg:ExecutionPhase",
                  "name": "run",
                  "can_follow_phases": [
                    "cckg:PreheatInitializationPhase",
                    "cckg:SetUpPhase"
                  ]
                }
              }
            },
            {
              "text": "When done, remove the beef and set it aside.",
              "source_text": "When done, remove the beef and set it aside.",
              "ingredients": []
            },
            {
              "text": "In the same pressure cooker, sauté the chopped onions and minced garlic until they become fragrant and slightly translucent, about 3 minutes.",
              "source_text": "In the same pressure cooker, sauté the chopped onions and minced garlic until they become fragrant and slightly translucent, about 3 minutes.",
              "ingredients": [
                {
                  "ingredient_idx": 4,
                  "quantity": {
                    "amount": 1,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "1"
                  }
                },
                {
                  "ingredient_idx": 5,
                  "quantity": {
                    "amount": 2,
                    "reference_unit": {
                      "id": "cckg:Clove",
                      "name": "clove"
                    },
                    "text": "2 clove"
                  }
                }
              ]
            },
            {
              "text": "Return the seared beef to the pressure cooker and add the carrots, potatoes, and beef broth. Stir everything together to combine.",
              "source_text": "Return the seared beef to the pressure cooker and add the carrots, potatoes, and beef broth. Stir everything together to combine.",
              "ingredients": [
                {
                  "ingredient_idx": 1,
                  "quantity": {
                    "us_customary": {
                      "amount": 3,
                      "reference_unit": {
                        "id": "cckg:USCup",
                        "name": "cup",
                        "abbreviation": "cup"
                      },
                      "text": "3 cup"
                    },
                    "metric": {
                      "amount": 0.7,
                      "reference_unit": {
                        "id": "cckg:Litre",
                        "name": "litre",
                        "abbreviation": "l"
                      },
                      "text": "0.7 l"
                    }
                  }
                },
                {
                  "ingredient_idx": 2,
                  "quantity": {
                    "amount": 4,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "4"
                  }
                },
                {
                  "ingredient_idx": 3,
                  "quantity": {
                    "amount": 3,
                    "reference_unit": {
                      "id": "cckg:SingleUnit",
                      "name": "unit"
                    },
                    "text": "3"
                  }
                }
              ]
            },
            {
              "text": "Seal the pressure cooker with the lid, set it to High pressure, 30 minutes. Once the cooking time is complete, use the quick-release valve to release the pressure.",
              "source_text": "Seal the pressure cooker with the lid, set it to High pressure, 30 minutes. Once the cooking time is complete, use the quick-release valve to release the pressure.",
              "ingredients": [],
              "capability": {
                "reference_capability": {
                  "id": "cckg:PressureCook",
                  "name": "pressure cook"
                },
                "settings": [
                  {
                    "reference_setting": {
                      "id": "cckg:PressureSetting",
                      "name": "pressure"
                    },
                    "value": {
                      "text": "placeholder",
                      "type": "nominal",
                      "reference_value": {
                        "id": "cckg:PressureHigh",
                        "name": "high"
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:TimeSetting",
                      "name": "time"
                    },
                    "value": {
                      "type": "numeric",
                      "value": {
                        "amount": 1800,
                        "reference_unit": {
                          "id": "cckg:Second",
                          "name": "second",
                          "abbreviation": "s"
                        },
                        "text": "placeholder"
                      }
                    }
                  },
                  {
                    "reference_setting": {
                      "id": "cckg:VentingSetting",
                      "name": "venting"
                    },
                    "value": {
                      "text": "placeholder",
                      "type": "nominal",
                      "reference_value": {
                        "id": "cckg:VentingQuick",
                        "name": "quick"
                      }
                    }
                  }
                ],
                "phase": {
                  "id": "cckg:ExecutionPhase",
                  "name": "run",
                  "can_follow_phases": [
                    "cckg:PreheatInitializationPhase",
                    "cckg:SetUpPhase"
                  ]
                }
              }
            },
            {
              "text": "Carefully open the lid, check for seasoning, and adjust with more salt and pepper if needed. Serve your delicious beef stew hot, garnished with fresh herbs if desired.",
              "source_text": "Carefully open the lid, check for seasoning, and adjust with more salt and pepper if needed. Serve your delicious beef stew hot, garnished with fresh herbs if desired.",
              "ingredients": [
                {
                  "ingredient_idx": 7,
                  "quantity": {
                    "reference_unit": {
                      "id": "cckg:ToTaste",
                      "name": "as needed"
                    },
                    "text": "as needed"
                  }
                }
              ]
            }
          ],
          "reference_tags": [
            {
              "id": "cckg:Featured",
              "name": "featured",
              "category": "cckg:RecipeVisibility"
            },
            {
              "id": "cckg:Favorites",
              "name": "favorites",
              "category": "cckg:RecipeVisibility"
            },
            {
              "id": "cckg:BeefDish",
              "name": "beef",
              "category": "cckg:Dish"
            },
            {
              "id": "cckg:Stew",
              "name": "stew",
              "category": "cckg:Dish"
            },
            {
              "id": "cckg:MeatDish",
              "name": "meat",
              "category": "cckg:Dish"
            }
          ]
        }
      },
      "appliance_sku": {
        "value": {
          "id": "cckg:ZenMixer",
          "name": "ZenMixer",
          "appliance_families": [
            {
              "id": "cckg:ZenAppliance",
              "name": "Zen Appliances"
            }
          ]
        }
      },
      "appliance_family": {
        "value": {
          "id": "cckg:ZenAppliance",
          "name": "Zen Appliances",
          "appliance_skus": [
            {
              "id": "cckg:ZenMixer",
              "name": "Zen Mixer"
            }
          ]
        }
      },
      "capability_phases": {
        "value": {
          "items": [
            {
              "id": "cckg:ExecutionPhase",
              "name": "execute",
              "can_follow_phases": [
                "cckg:PreheatInitializationPhase",
                "cckg:SetUpPhase"
              ]
            },
            {
              "id": "cckg:PreheatInitializationPhase",
              "name": "preheat",
              "can_follow_phases": [
                "cckg:SetUpPhase"
              ]
            },
            {
              "id": "cckg:UpdatePhase",
              "name": "update",
              "can_follow_phases": [
                "cckg:ExecutionPhase",
                "cckg:UpdatePhase"
              ]
            }
          ],
          "total": 3
        }
      },
      "capability_phase": {
        "value": {
          "id": "cckg:ExecutionPhase",
          "name": "execute",
          "can_follow_phases": [
            "cckg:PreheatInitializationPhase",
            "cckg:SetUpPhase"
          ]
        }
      },
      "unit": {
        "value": {
          "id": "cckg:Second",
          "name": "second",
          "abbreviation": "s",
          "dimension": "cckg:Time",
          "measurement_system": {
            "id": "cckg:MetricSystem",
            "name": "Metric"
          }
        }
      },
      "settings": {
        "value": {
          "items": [
            {
              "id": "cckg:TimeSetting",
              "name": "time setting",
              "allowed_values": {
                "numeric": [
                  {
                    "unit": {
                      "id": "cckg:Second",
                      "name": "second",
                      "abbreviation": "s"
                    }
                  }
                ]
              }
            },
            {
              "id": "cckg:VentingSetting",
              "name": "venting setting",
              "allowed_values": {
                "nominal": [
                  {
                    "id": "cckg:VentingNatural",
                    "name": "natural release"
                  },
                  {
                    "id": "cckg:VentingPulse",
                    "name": "pulse release"
                  },
                  {
                    "id": "cckg:VentingQuick",
                    "name": "quick release"
                  },
                  {
                    "id": "cckg:VentingNaturalQuick",
                    "name": "natural then quick release"
                  }
                ]
              }
            },
            {
              "id": "cckg:VentingTimeSetting",
              "name": "venting time setting",
              "allowed_values": {
                "numeric": [
                  {
                    "unit": {
                      "id": "cckg:Second",
                      "name": "second",
                      "abbreviation": "s"
                    }
                  }
                ]
              },
              "depends_on_setting": [
                {
                  "reference_setting_id": "cckg:VentingSetting",
                  "allowed_values": {
                    "nominal": [
                      "cckg:VentingNaturalQuick"
                    ]
                  }
                }
              ]
            }
          ],
          "total": 3
        }
      },
      "tags": {
        "value": {
          "items": [
            {
              "id": "cckg:ZenMixer",
              "name": "ZenMixer",
              "category": "cckg:ApplianceSKU"
            },
            {
              "id": "cckg:VortexDualBasket",
              "name": "Vortex Dual Basket",
              "category": "cckg:ApplianceSKU"
            },
            {
              "id": "cckg:ZenAppliance",
              "name": "Zen Appliance",
              "category": "cckg:ApplianceFamily"
            },
            {
              "id": "cckg:VortexAirFryer",
              "name": "Vortex Air Fryer",
              "category": "cckg:ApplianceFamily"
            }
          ],
          "total": 4
        }
      },
      "tag": {
        "value": {
          "id": "cckg:ZenMixer",
          "name": "Zen Mixer",
          "category": "cckg:ApplianceSKU"
        }
      },
      "tag_categories": {
        "value": {
          "items": [
            {
              "id": "cckg:ApplianceFamily",
              "name": "a family of kitchen appliances"
            },
            {
              "id": "cckg:ApplianceSKU",
              "name": "a kitchen appliance model (SKU)"
            },
            {
              "id": "cckg:DietaryRequirement",
              "name": "dietary requirement"
            },
            {
              "id": "cckg:Dish",
              "name": "dish"
            },
            {
              "id": "cckg:MealOccasion",
              "name": "meal occasion"
            },
            {
              "id": "cckg:RecipeAuthor",
              "name": "recipe author"
            },
            {
              "id": "cckg:RecipeVisibility",
              "name": "recipe visibility"
            },
            {
              "id": "cckg:SeasonalEvent",
              "name": "seasonal event"
            },
            {
              "id": "cckg:TestingRecord",
              "name": "testing record"
            }
          ],
          "total": 9
        }
      },
      "measurement_systems": {
        "value": {
          "items": [
            {
              "id": "cckg:USCustomarySystem",
              "name": "US customary",
              "units": [
                {
                  "id": "cckg:Fahrenheit",
                  "name": "Fahrenheit",
                  "abbreviation": "°F",
                  "dimension": "cckg:Temperature"
                }
              ]
            },
            {
              "id": "cckg:MetricSystem",
              "name": "Metric",
              "units": [
                {
                  "id": "cckg:Celsius",
                  "name": "Celsius",
                  "abbreviation": "°C",
                  "dimension": "cckg:Temperature"
                }
              ]
            }
          ],
          "total": 2
        }
      },
      "measurement_system": {
        "value": {
          "id": "cckg:MetricSystem",
          "name": "Metric",
          "units": [
            {
              "id": "cckg:Second",
              "name": "second",
              "abbreviation": "s",
              "dimension": "cckg:Time"
            }
          ]
        }
      },
      "unit_conversion_request": {
        "value": {
          "entities": [
            {
              "source_unit": {
                "value": 200,
                "unit_reference_id": "cckg:Gram",
                "unit_system_reference_id": "cckg:MetricSystem",
                "context": {
                  "preparation_reference_ids": [
                    "cckg:Sifted"
                  ],
                  "ingredient_reference_id": "cckg:PlainFlour",
                  "capability_reference_id": "cckg:Bake",
                  "setting_reference_id": "cckg:TemperatureSetting"
                }
              },
              "target_unit": {
                "unit_system_reference_id": "cckg:USCustomarySystem",
                "preferred_unit_reference_id": "cckg:Ounce",
                "rounding": true
              }
            }
          ]
        }
      },
      "unit_conversion_response": {
        "value": {
          "entities": [
            {
              "converted_value": 8,
              "converted_reference_unit": {
                "abbreviation": "lb",
                "id": "cckg:Ounce",
                "name": "ounce",
                "dimension": "cckg:Weight"
              },
              "converted_reference_unit_system": {
                "id": "cckg:USCustomarySystem",
                "name": "US customary"
              }
            }
          ]
        }
      }
    },
    "responses": {
      "ApplianceListResponse": {
        "description": "Successful appliance list response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of appliances.",
                  "items": {
                    "$ref": "#/components/schemas/ApplianceListItem"
                  }
                }
              },
              "required": [
                "items"
              ]
            },
            "examples": {
              "ApplianceListExample": {
                "$ref": "#/components/examples/appliance_list"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            }
          }
        }
      },
      "NotAcceptableResponse": {
        "description": "An error indicating that the requested resource could not be produced matching the list of acceptable values defined in the request's proactive content negotiation headers.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotAcceptableError"
            }
          }
        }
      },
      "ApplicationErrorResponse": {
        "description": "An error indicating that the request could not be processed due to an internal application error.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplicationError"
            }
          }
        }
      },
      "IntegrationServiceErrorResponse": {
        "description": "An error indicating that communication with third party services failed.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IntegrationServiceError"
            }
          }
        }
      },
      "NonCompliantResponse": {
        "description": "An error indicating that the response was not compliant.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NonCompliantError"
            }
          }
        }
      },
      "ApplianceResponse": {
        "description": "Successful appliance response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceV1"
            },
            "examples": {
              "ApplianceExample": {
                "$ref": "#/components/examples/ZenMixerV1"
              }
            }
          },
          "application/x.default+json;version=2": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceV2Default"
            },
            "examples": {
              "ApplianceExample": {
                "$ref": "#/components/examples/ZenMixerV2Default"
              }
            }
          },
          "application/x.internal+json;version=2": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceV2Internal"
            },
            "examples": {
              "ApplianceExample": {
                "$ref": "#/components/examples/ZenMixerV2Internal"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            }
          },
          "Content-Type": {
            "schema": {
              "type": "string",
              "description": "The version and variant of the appliance profile returned.",
              "enum": [
                "application/json",
                "application/x.default+json;version=2",
                "application/x.internal+json;version=2"
              ]
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "An error indicating that the requested resource could not be found.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        }
      },
      "CollectionResponse": {
        "description": "Successful get the collection response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "A list of recipes in the collection.\n",
                  "items": {
                    "$ref": "#/components/schemas/CollectionItem"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of recipes in the collection.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "SavedRecipesExample": {
                "$ref": "#/components/examples/collection"
              }
            }
          }
        }
      },
      "BadRequestResponse": {
        "description": "Bad request.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "$ref": "#/components/schemas/InvalidOperationError"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "ValidationError": "#/components/schemas/ValidationError",
                  "InvalidOperationError": "#/components/schemas/InvalidOperationError"
                }
              }
            }
          }
        }
      },
      "DevicesWithCapabilitiesResponse": {
        "description": "Devices available for recipe capabilities. One match per step position and appliance_id.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DevicesWithCapabilitiesMatches"
            }
          }
        }
      },
      "CookingSessionsResponse": {
        "description": "A list of Cooking Sessions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CookingSessionObject"
                  }
                }
              },
              "required": [
                "results"
              ]
            }
          }
        }
      },
      "CookingSessionResponse": {
        "description": "A Cooking Session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CookingSessionObject"
            }
          }
        }
      },
      "CuratedCollectionResponseWithHeaders": {
        "description": "KitchenOS Curated Collection",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CuratedCollection"
            }
          }
        },
        "headers": {
          "Content-Location": {
            "schema": {
              "type": "string",
              "description": "Relative resource URI."
            }
          }
        }
      },
      "CuratedCollectionListResponse": {
        "description": "KitchenOS Curated Collection List",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CuratedCollectionList"
            }
          }
        }
      },
      "CuratedCollectionResponse": {
        "description": "KitchenOS Curated Collection",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CuratedCollectionWithRecipeTotal"
            }
          }
        }
      },
      "PreconditionFailedResponse": {
        "description": "An error indicating that the server does not meet one of the preconditions that the client put in its request header fields.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PreconditionFailedError"
            }
          }
        }
      },
      "CuratedCollectionDuplicationResponse": {
        "description": "KitchenOS Curated Collection",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CuratedCollectionDuplicationReport"
            }
          }
        }
      },
      "CanCloudProvisionResponse": {
        "description": "Response to whether a device can be cloud provisioned or not",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "can_provision": {
                  "type": "boolean",
                  "description": "Can the device be provisioned?"
                }
              },
              "required": [
                "can_provision"
              ]
            }
          }
        }
      },
      "ProvisioningDataResponse": {
        "description": "Response with temporal claim certificate and MQTT entpoint",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "key_pair": {
                  "type": "object",
                  "properties": {
                    "private_key": {
                      "type": "string"
                    },
                    "public_key": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "private_key",
                    "public_key"
                  ]
                },
                "certificate_pem": {
                  "type": "string"
                },
                "mqtt_details": {
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "description": "The MQTT broker URI to connect to."
                    },
                    "topics": {
                      "type": "object",
                      "description": "The MQTT Topics to complete cloud provisioning",
                      "properties": {
                        "certificates": {
                          "type": "object",
                          "description": "The MQTT Topic to obtain final certificates",
                          "properties": {
                            "topic": {
                              "type": "string",
                              "description": "the topic name"
                            },
                            "qos": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          },
                          "required": [
                            "topic"
                          ]
                        },
                        "provision": {
                          "type": "object",
                          "description": "The MQTT Topic to fulfill provisioning stage",
                          "properties": {
                            "topic": {
                              "type": "string",
                              "description": "the topic name"
                            },
                            "qos": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          },
                          "required": [
                            "topic"
                          ]
                        }
                      },
                      "required": [
                        "certificates",
                        "provision"
                      ]
                    }
                  },
                  "required": [
                    "uri",
                    "topics"
                  ]
                }
              },
              "required": [
                "key_pair",
                "certificate_pem",
                "mqtt_details"
              ]
            }
          }
        }
      },
      "ForbiddenResponse": {
        "description": "An error indicating that  the server understands the request but refuses to authorize it.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Forbidden request"
                }
              }
            }
          }
        }
      },
      "GetUploadOTAUrlResponse": {
        "description": "Response containing an URL to upload an OTA file",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "S3 pre-signed url to upload the update file."
                }
              },
              "required": [
                "url"
              ]
            }
          }
        }
      },
      "HomeFeedListResponse": {
        "description": "KitchenOS Home Feed List",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeFeedList"
            }
          }
        }
      },
      "HomeFeedDeprecatedRetrieveResponse": {
        "description": "KitchenOS Home Feed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeFeedOutputWithNext"
            }
          }
        }
      },
      "HomeFeedModifyResponse": {
        "description": "Localized home feed successfully updated.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "etag": {
                  "$ref": "#/components/schemas/Etag"
                }
              },
              "required": [
                "etag"
              ]
            }
          }
        },
        "headers": {
          "Content-Location": {
            "schema": {
              "type": "string",
              "description": "Relative resource URI."
            }
          }
        }
      },
      "HomeFeedRetrieveResponse": {
        "description": "KitchenOS Home Feed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeFeedOutputWithTotal"
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "description": "An error indicating that the request parameters are invalid.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "PushDeviceTokensResponse": {
        "description": "A list of Push Device Tokens",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PushDeviceTokenObject"
                  }
                }
              },
              "required": [
                "results"
              ]
            }
          }
        }
      },
      "OrganizationResponse": {
        "description": "Successful Organization response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            },
            "examples": {
              "OrganizationExample": {
                "$ref": "#/components/examples/organization-get"
              }
            }
          }
        }
      },
      "AdaptRecipeResponse": {
        "description": "Create Recipe adaptation response\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdaptRecipeOutput"
            },
            "examples": {
              "AdaptRecipeResponse": {
                "value": {
                  "job_id": "ada8632c-4cdd-42a5-801f-54853b7027c5"
                }
              }
            }
          }
        },
        "headers": {
          "Content-Location": {
            "schema": {
              "type": "string",
              "description": "Relative resource URI."
            }
          }
        }
      },
      "UnprocessableEntityErrorResponse": {
        "description": "An error indicationg that the server understands the content type of the request entity, and the syntax of the request entity is correct but semantically erroneous.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnprocessableEntityError"
            }
          }
        }
      },
      "SuggestAlternativeIngredientResponse": {
        "description": "List of suggested alternative ingredients\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "description": "This object includes a property for each ingredient ID specified in the request body. Each property will consist of a list of ingredients, where each ingredient represents a recommended substitute for the corresponding ingredient.\n",
                "items": {
                  "$ref": "#/components/schemas/ReferenceIngredientSimplified"
                }
              }
            },
            "examples": {
              "SuggestAlternativeIngredientResponseExample": {
                "$ref": "#/components/examples/suggest_alt_ingredient_response"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListRecipeAdaptationJobsResponse": {
        "description": "Response for get recipe adatation jobs",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ListRecipeAdaptationJobsOutput"
            },
            "examples": {
              "ListRecipeAdaptationJobsResponseExample": {
                "$ref": "#/components/examples/list_recipe_adaptation_jobs"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "GetRecipeAdaptationJobResponse": {
        "description": "Get recipe adaptation job response\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecipeAdaptationJob"
            },
            "examples": {
              "GetJobStatusResponse": {
                "$ref": "#/components/examples/recipe_adaptation_job"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "RecipeCreateResponse": {
        "description": "Successful recipe response.",
        "headers": {
          "Content-Location": {
            "schema": {
              "type": "string",
              "description": "Relative resource URI."
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Recipe"
            },
            "examples": {
              "RecipeExample": {
                "$ref": "#/components/examples/recipe"
              }
            }
          },
          "application/json;version=3": {
            "schema": {
              "$ref": "#/components/schemas/RecipeV3"
            },
            "examples": {
              "RecipeExample": {
                "$ref": "#/components/examples/recipe-v3"
              }
            }
          }
        }
      },
      "RecipeResponse": {
        "description": "Successful recipe response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Recipe"
            },
            "examples": {
              "RecipeExample": {
                "$ref": "#/components/examples/recipe"
              }
            }
          },
          "application/json;version=3": {
            "schema": {
              "$ref": "#/components/schemas/RecipeV3"
            },
            "examples": {
              "RecipeExample": {
                "$ref": "#/components/examples/recipe-v3"
              }
            }
          }
        }
      },
      "InvalidOperationResponse": {
        "description": "An error indicating that the requested operation is invalid.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidOperationError"
            }
          }
        }
      },
      "RUSRecipeResponse": {
        "description": "An RUS recipe\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RusRecipe"
            },
            "examples": {
              "RusRecipeV3Example1": {
                "$ref": "#/components/examples/rus-recipe-v3"
              }
            }
          }
        }
      },
      "ListReferenceApplianceSkusResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of appliance SKUs subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceApplianceSku"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceApplianceSkuResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceApplianceSku"
            },
            "examples": {
              "ReferenceApplianceSkuExample": {
                "$ref": "#/components/examples/appliance_sku"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceApplianceFamiliesResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of appliance families subject to pagination.",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceApplianceFamily"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceApplianceFamilyResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceApplianceFamily"
            },
            "examples": {
              "ReferenceApplianceFamilyExample": {
                "$ref": "#/components/examples/appliance_family"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceCapabilityPhasesResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of capability phases subject to pagination.",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCapabilityPhase"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "ReferenceCapabilityPhasesExample": {
                "$ref": "#/components/examples/capability_phases"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceCapabilityPhaseResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceCapabilityPhase"
            },
            "examples": {
              "ReferenceCapabilityPhaseExample": {
                "$ref": "#/components/examples/capability_phase"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceIngredientsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of ingredients subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceIngredient"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceIngredientResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceIngredient"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceUnitsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of units subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceUnit"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceUnitResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceUnit"
            },
            "examples": {
              "ReferenceUnitExample": {
                "$ref": "#/components/examples/unit"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferencePreparationsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of preparations subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferencePreparation"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferencePreparationResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferencePreparation"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceCapabilitiesResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of capabilities subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCapability"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceCapabilityResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceCapability"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceSettingsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of settings subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceSetting"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "ListSettingsExample": {
                "$ref": "#/components/examples/settings"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceSettingResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceSetting"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceSettingValuesResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of setting values subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceSettingValueNominal"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceSettingValueResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceSettingValueNominal"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceTagsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of tags subject to pagination",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceTag"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "ListTagsExample": {
                "$ref": "#/components/examples/tags"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceTagResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceTag"
            },
            "examples": {
              "ReferenceTagExample": {
                "$ref": "#/components/examples/tag"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ListReferenceTagCategoriesResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of tag categories subject to pagination. Tag categories  indicates the tag set the tag is a part of, such as  cckg:ApplianceSKU, cckg:ApplianceFamily.",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceItem"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "ReferenceTagExample": {
                "$ref": "#/components/examples/tag_categories"
              }
            }
          }
        }
      },
      "ListReferenceMeasurementSystemsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "The list of measurement systems subject to pagination.",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceMeasurementSystem"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results"
                }
              },
              "required": [
                "items",
                "total"
              ]
            },
            "examples": {
              "ReferenceMeasurementSystemExample": {
                "$ref": "#/components/examples/measurement_systems"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ReferenceMeasurementSystemResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceMeasurementSystem"
            },
            "examples": {
              "ReferenceMeasurementSystemExample": {
                "$ref": "#/components/examples/measurement_system"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "ConvertUnitsResponse": {
        "description": "Convert Units Response\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConvertUnitsOutput"
            },
            "examples": {
              "UnitConversionResponseExample": {
                "$ref": "#/components/examples/unit_conversion_response"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "$ref": "#/components/schemas/Locale"
            },
            "description": "The language intended for the audience"
          }
        }
      },
      "SearchRecipesResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of recipes matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/Recipe"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchIngredientsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of ingredients matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceIngredient"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchUnitsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of units matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceUnit"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchMeasurementSystemsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of measurement systems matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceMeasurementSystem"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchPreparationsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of preparations matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferencePreparation"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchCapabilitiesResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of capabilities matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCapability"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchCapabilityPhasesResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of capability phases matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCapabilityPhase"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchSettingsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of settings matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceSetting"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchTagsResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of tags matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceTag"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "SearchSettingValuesResponse": {
        "description": "Results of the search.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "The list of setting values matching the search query.\n",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceSettingValueNominal"
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of results matching the search query.\n"
                }
              },
              "required": [
                "items",
                "total"
              ]
            }
          }
        }
      },
      "UserResponse": {
        "description": "KitchenOS User",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "AnonymousTokenResponse": {
        "description": "Generated anonymous token payload with session id",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "session_id": {
                  "type": "string",
                  "description": "Identifier for clients to trace the anonymous user"
                },
                "id_token": {
                  "type": "string",
                  "format": "jwt",
                  "description": "a JWT for anonymous access"
                }
              },
              "required": [
                "session_id",
                "id_token"
              ]
            }
          }
        }
      }
    },
    "requestBodies": {
      "DevicesWithCapabilitiesBody": {
        "description": "Data required to check for devices available for a recipe.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "recipe_id": {
                  "description": "Recipe ID to check.",
                  "type": "string"
                }
              },
              "required": [
                "recipe_id"
              ]
            }
          }
        }
      },
      "ExecuteCapabilityBody": {
        "description": "Data required to execute a capability command in a device.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CapabilityExecutionCommand"
            }
          }
        }
      },
      "ExecuteBody": {
        "description": "Data required to execute a command in a device.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExecutionCommand"
            }
          }
        }
      },
      "CreateCookingSessionBody": {
        "description": "Data required to create a Cooking Session.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "recipe_id": {
                  "type": "string",
                  "description": "Recipe ID of the Cooking Session."
                }
              },
              "required": [
                "recipe_id"
              ]
            }
          }
        }
      },
      "TransitionStepBody": {
        "description": "Data required to transition the step of a Cooking Session.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "step_position": {
                  "type": "integer",
                  "description": "Step number to transition to."
                }
              },
              "required": [
                "step_position"
              ]
            }
          }
        }
      },
      "CuratedCollectionCreateRequest": {
        "description": "Data required to create a Curated Collection.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CuratedCollection"
            }
          }
        }
      },
      "CuratedCollectionListRequest": {
        "description": "Fields that can be used to search or filter Curated Collections.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "description": "The search query. It will search for curated collections that contain the specified terms in the title and subtitle by partial text match. It will also search for curated collections  as an exact match if the curated collection id is in the search query.",
                  "type": "string",
                  "example": "winter"
                },
                "locale": {
                  "$ref": "#/components/schemas/Locale"
                },
                "state": {
                  "description": "The current state of the curated collection (either draft or published).",
                  "type": "string",
                  "enum": [
                    "draft",
                    "published"
                  ]
                },
                "appliance_tag_ids": {
                  "description": "List of appliance tags. Must belong to the categories cckg:ApplianceFamily or cckg:ApplianceSKU. Filters search results with curated collections that contain any of the appliance tag ids provided.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceId"
                  }
                },
                "sort": {
                  "description": "The field and order by which the results should be ordered. If sort is not provided, then the search results will be sorted by default from the most recently modified to the least recently modified collections.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CuratedCollectionSort"
                  },
                  "minItems": 1,
                  "maxItems": 1
                },
                "recipe_limit": {
                  "$ref": "#/components/schemas/CuratedCollectionListRecipeLimit"
                }
              }
            }
          }
        }
      },
      "CuratedCollectionModifyRequest": {
        "description": "Data required to modify a Curated Collection.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "description": "The title of the curated collection.",
                  "type": "string",
                  "minLength": 1
                },
                "subtitle": {
                  "description": "A subtitle of the curated collection.",
                  "type": "string",
                  "minLength": 1
                },
                "state": {
                  "description": "Indicates if the curated collection is published or draft",
                  "type": "string",
                  "enum": [
                    "published",
                    "draft"
                  ]
                },
                "recipe_ids": {
                  "type": "array",
                  "uniqueItems": true,
                  "description": "A list of recipe ids in the collection",
                  "items": {
                    "description": "The recipe's unique ID",
                    "type": "string",
                    "example": "34mh2p"
                  }
                }
              },
              "required": [
                "title",
                "subtitle",
                "state",
                "recipe_ids"
              ]
            }
          }
        }
      },
      "CuratedCollectionDuplicateRequest": {
        "description": "Data required to duplicate a Curated Collection.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Locale",
                  "properties": {
                    "locale": {
                      "$ref": "#/components/schemas/Locale"
                    }
                  },
                  "required": [
                    "locale"
                  ]
                },
                {
                  "type": "object",
                  "title": "Array of appliance tag IDs",
                  "properties": {
                    "appliance_tag_ids": {
                      "description": "List of appliance tags. Must belong to the categories cckg:ApplianceFamily or cckg:ApplianceSKU",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReferenceId"
                      }
                    }
                  },
                  "required": [
                    "appliance_tag_ids"
                  ]
                }
              ]
            }
          }
        }
      },
      "CanCloudProvisionBody": {
        "description": "Data required to check if a device can be provisioned",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "native_appliance_id": {
                  "type": "string",
                  "description": "An unique native appliance identifier that need to be flashed at manufacturing time."
                },
                "native_device_id": {
                  "type": "string",
                  "description": "Native device ID."
                }
              },
              "required": [
                "native_appliance_id"
              ]
            }
          }
        }
      },
      "GetUploadOTAUrlBody": {
        "description": "Data required to check if an OTA file can be uploaded to an s3 bucket.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/FirmwareTypeEnum"
                },
                "version": {
                  "type": "string",
                  "description": "Version of the update to be uploaded."
                },
                "appliance_id": {
                  "type": "string",
                  "description": "Identifier of the device to which the OTA update belongs"
                }
              },
              "required": [
                "type",
                "version",
                "appliance_id"
              ]
            }
          }
        }
      },
      "CreateOTADetailsBody": {
        "description": "Data required to create an OTA detail",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/FirmwareTypeEnum"
                },
                "version": {
                  "type": "string",
                  "description": "Version of the update to be uploaded."
                },
                "appliance_id": {
                  "type": "string",
                  "description": "Appliance identifier whose the OTA rule will be associated."
                },
                "device_ids": {
                  "type": "array",
                  "description": "Devices ids whitelist for an OTA rule.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "type",
                "version",
                "appliance_id"
              ]
            }
          }
        }
      },
      "HomeFeedModifyRequest": {
        "description": "Data required to modify a localized Home Feed.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "uniqueItems": true,
                    "properties": {
                      "id": {
                        "description": "Content identifier",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "items"
              ]
            }
          }
        }
      },
      "HomeFeedPostRequest": {
        "description": "Data that can be used to filter and sort the curated collections in a localized Home Feed.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "appliance_tag_ids": {
                  "description": "List of appliance tags. Must belong to the categories cckg:ApplianceFamily or cckg:ApplianceSKU. Filters home feed with curated collections that contain any of the appliance tag ids provided.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceId"
                  }
                },
                "preview": {
                  "type": "boolean",
                  "default": false,
                  "description": "Flag to enable/disable the preview mode. When enabled, the home feed will only include published contents."
                },
                "sort": {
                  "description": "The field and order by which the curated collections should be ordered. If sort is not provided, then the curated collections will be sorted by their position on the home feed.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CuratedCollectionSort"
                  },
                  "minItems": 1,
                  "maxItems": 1
                },
                "recipe_limit": {
                  "$ref": "#/components/schemas/CuratedCollectionListRecipeLimit"
                }
              }
            }
          }
        }
      },
      "AddCuratedCollectionToHomeFeedRequest": {
        "description": "Data required to add a curated collection to its localized Home Feed.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The curated collection's ID"
                },
                "append": {
                  "type": "boolean",
                  "description": "If true, the curated collection is added to the end of the home feed. If false, the curated collection is added to the beginning of the home feed.",
                  "default": false
                }
              },
              "required": [
                "id"
              ]
            }
          }
        }
      },
      "ImageUploadRequestBody": {
        "description": "The image to upload",
        "content": {
          "image/webp": {
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "image/jpeg": {
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "image/jpg": {
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "image/png": {
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "required": true
      },
      "RegisterPushDeviceTokenBody": {
        "description": "Data required to register a device registration token (used to deliver cooking push notifications)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "device_token": {
                  "description": "The device registration token to add to the user and organization implicit by the request authorization token.",
                  "type": "string"
                },
                "platform": {
                  "description": "The platform associated with the device_token and will be used to send tailored platform-specific content.",
                  "type": "string",
                  "enum": [
                    "iOS",
                    "Android"
                  ]
                },
                "previous_device_token": {
                  "description": "The previous device registration token that is going to be replaced by the new device_token and needs to be deleted.",
                  "type": "string"
                }
              },
              "required": [
                "device_token",
                "platform"
              ]
            }
          }
        }
      },
      "RemovePushDeviceTokenBody": {
        "description": "Data required to remove a device registration token",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "device_token": {
                  "description": "The device registration token to remove.",
                  "type": "string"
                }
              },
              "required": [
                "device_token"
              ]
            }
          }
        }
      },
      "AdaptRecipeRequest": {
        "description": "Request body for Recipe Adapt",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdaptRecipeInput"
            },
            "examples": {
              "AdaptRecipeRequestExample": {
                "$ref": "#/components/examples/adapt_recipe_request"
              }
            }
          }
        }
      },
      "SuggestAlternativeIngredientRequest": {
        "description": "Request body for Recipe Adapt",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuggestAlternativeIngredientsInput"
            },
            "examples": {
              "SuggestAlternativeIngredientRequestExample": {
                "$ref": "#/components/examples/suggest_alt_ingredient_request"
              }
            }
          }
        }
      },
      "RecipeCreateRequest": {
        "description": "Recipe request body for creating a Recipe.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecipeCreateWithRefs"
            },
            "examples": {
              "RecipeCreateWithRefsExample": {
                "$ref": "#/components/examples/recipe-create-with-refs"
              }
            }
          },
          "application/json;version=3": {
            "schema": {
              "$ref": "#/components/schemas/RecipeCreateWithRefsV3"
            },
            "examples": {
              "RecipeCreateWithRefsExample": {
                "$ref": "#/components/examples/recipe-create-with-refs-v3"
              }
            }
          }
        }
      },
      "RecipeMigrateRequest": {
        "description": "Recipe request body for migrating a Recipe.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecipeMigrateWithRefs"
            },
            "examples": {
              "RecipeMigrateWithRefsExample": {
                "$ref": "#/components/examples/recipe-migrate-with-refs"
              }
            }
          }
        }
      },
      "RecipeUpdateRequest": {
        "description": "Recipe request body.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecipeUpdateWithRefs"
            },
            "examples": {
              "RecipeUpdateWithRefsExample": {
                "$ref": "#/components/examples/recipe-update-with-refs"
              }
            }
          },
          "application/json;version=3": {
            "schema": {
              "$ref": "#/components/schemas/RecipeUpdateWithRefsV3"
            },
            "examples": {
              "RecipeUpdateWithRefsExample": {
                "$ref": "#/components/examples/recipe-update-with-refs-v3"
              }
            }
          }
        }
      },
      "RecipeForkRequest": {
        "description": "Recipe request body for forking a Recipe.",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "fork_from_core": {
                  "description": "If true then set the forked_from_id in the newly forked recipe to the core recipe's id. If not specified or false then the recipe_id specified in the arguments is used as the forked_from_id",
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "FromUrlRequest": {
        "description": "Request body for url input",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UrlInput"
            }
          }
        }
      },
      "FromTextRequest": {
        "description": "Request body for text input",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TextInput"
            }
          }
        }
      },
      "ConvertUnitsRequest": {
        "description": "Request body for Units Conversion",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConvertUnitsInput"
            },
            "examples": {
              "UnitConversionRequestExample": {
                "$ref": "#/components/examples/unit_conversion_request"
              }
            }
          }
        }
      },
      "UserUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserCreateRequest": {
        "description": "Data to register a user in the system",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "The user's email address"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "description": "The user's password",
                  "minLength": 8,
                  "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$"
                },
                "client_id": {
                  "description": "The app client ID it is registering from",
                  "type": "string"
                },
                "name": {
                  "description": "The user's name",
                  "type": "string",
                  "minLength": 1
                },
                "family_name": {
                  "description": "The user's last name",
                  "type": "string",
                  "minLength": 1
                },
                "locale": {
                  "$ref": "#/components/schemas/Locale"
                }
              },
              "required": [
                "email",
                "password",
                "client_id",
                "name",
                "family_name"
              ]
            }
          }
        }
      },
      "UnpairDeviceRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "device_id": {
                  "type": "string"
                }
              },
              "required": [
                "device_id"
              ]
            }
          }
        }
      }
    }
  }
}